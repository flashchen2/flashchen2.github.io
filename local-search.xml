<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2024/10/05/Redis/"/>
    <url>/2024/10/05/Redis/</url>
    
    <content type="html"><![CDATA[<ul><li>学习链接：<a href="https://www.bilibili.com/video/BV1Jj411D7oG?p=2&vd_source=4cf7b60c223a665538a4d958765c91a5">https://www.bilibili.com/video/BV1Jj411D7oG?p=2&vd_source&#x3D;4cf7b60c223a665538a4d958765c91a5</a></li></ul><h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><ol><li>Redis是Remote Dictionary Server的缩写，是一个开源的基于内存的数据存储系统，可以用作数据库缓存和消息队列等各种场景，也是目前最热门的NoSQL数据库之一</li><li>早期互联网公司大多数是通过MySQL这种传统的数据库。随着互联网的快速发展，应用系统的访问量越来越大，数据库的性能瓶颈越来越明显。主要是由于磁盘IO所导致的，磁盘IO的读写操作速度，与将数据存储在内存中的Redis相比是非常慢的</li></ol><h2 id="2-关系数据库与非关系型数据库"><a href="#2-关系数据库与非关系型数据库" class="headerlink" title="2.关系数据库与非关系型数据库"></a>2.关系数据库与非关系型数据库</h2><ol><li><p>关系数据库</p><ul><li><p>以二维表格的形式组织数据，SQL用于执行数据的检索、更新、插入和删除操作</p></li><li><p>需要先创建数据库并设计表结构。存储数据时，数据须符合表结构定义。这保证了数据的结构化和可维护性，适用于需要强一致性和复杂查询的场景</p></li><li><p>主流的关系型数据库包括 Oracle、MySQL、SQL Server、Microsoft Access、DB2 和 PostgreSQL 等</p></li></ul></li><li><p>非关系数据库</p><ul><li><p>也称 NoSQL （Not Only SQL）数据库，不需要事先定义表结构。每条记录可以有不同的数据类型和字段数量，适合处理多样化的数据</p></li><li><p>常用于需要高扩展性、灵活性和处理大量非结构化数据的场景。可以在数据存储和查询方面提供更高的性能和灵活性，尤其是在处理海量数据和高频率读写操作时</p></li><li><p>主流的 NoSQL 数据库包括 Redis、MongoDB、HBase 和 Memcached 等</p></li></ul></li><li><p>两者区别</p><table><thead><tr><th></th><th>关系数据库</th><th>非关系数据库</th></tr></thead><tbody><tr><td>数据存储方式</td><td>将数据存储在表格中</td><td><mark>以键值对Key-Value等形式存在</mark></td></tr><tr><td>扩展方式</td><td>提高单台计算机的处理能力来应对增长的需求，这种方式适合于数据量不算极大的情况</td><td>通过添加更多的数据库服务器（节点）来分担负载，适合于大规模数据和高并发场景</td></tr><tr><td>对事务性的支持不同</td><td>适用于高事务性或者复杂数据查询需要控制执行计划</td><td>操作的扩展性和大数据量处理方面</td></tr></tbody></table></li></ol><h2 id="3-使用方式"><a href="#3-使用方式" class="headerlink" title="3.使用方式"></a>3.使用方式</h2><ol><li>命令行界面（CLI）</li><li>应用程序接口（API）</li><li>图形用户界面（GUI）：RedisInsight工具，下载方法（<a href="https://blog.csdn.net/weixin_56050344/article/details/139242706?ops_request_misc=%257B%2522request%255Fid%2522%253A%252241742521-138D-413F-AD7B-E7A76077E223%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=41742521-138D-413F-AD7B-E7A76077E223&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-139242706-null-null.142%5Ev100%5Epc_search_result_base5&utm_term=redisinsight%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_56050344&#x2F;article&#x2F;details</a>）</li></ol><h2 id="4-相关指令"><a href="#4-相关指令" class="headerlink" title="4.相关指令"></a>4.相关指令</h2><ol><li>安装redis</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install redis<br></code></pre></td></tr></table></figure><ol start="2"><li>启动redis服务端</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server<br></code></pre></td></tr></table></figure><ol start="3"><li>启动redis客户端</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/redis_pic/2.png" alt="图片描述" style="zoom:80%;"></div><h1 id="二、命令"><a href="#二、命令" class="headerlink" title="二、命令"></a>二、命令</h1><h2 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1.字符串"></a>1.字符串</h2><ol><li><p>存入数据（redis内的数据以键值对的形式存在）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">set key value       // 当存入的key重复时，后存入的value会覆盖前面的value<br>setnx key value     // 当没有重复的key时，存入这条数据；若有重复的数据，此命令不生效<br></code></pre></td></tr></table></figure></li><li><p>读取数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">get key<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/redis_pic/3.png" alt="图片描述" style="zoom:60%;"></div></li><li><p>删除数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">del key<br></code></pre></td></tr></table></figure></li><li><p>判断数据是否存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">exists key<br></code></pre></td></tr></table></figure></li><li><p>查看数据库中都有哪些键</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">keys *<br></code></pre></td></tr></table></figure></li><li><p>查看以xx结尾的键值对</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">keys</span> *xx<br></code></pre></td></tr></table></figure></li><li><p>删除数据库中所有的键值对（慎用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">flushall<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h2><ol><li><p>存入列表数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">lpush key value                     // 从列表头部添加元素：向同一个key（列表）中传入数据，会插入至此列表的最前面<br>lpush key value1 value2 value3      // 存入一个列表中的多个元素，从左到右依次添加，321<br>rpush key value                     // 从列表尾部添加元素<br></code></pre></td></tr></table></figure></li><li><p>读取列表内数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lrange key 0 -1     // 读取整个列表数据（从0号元素，到-1号元素）<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/redis_pic/4.png" alt="图片描述" style="zoom:60%;"></div></li><li><p>删除列表内元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpop key x        // 从右往左删除x个元素<br>lpop key x        // 从左往右删除x个元素<br></code></pre></td></tr></table></figure></li><li><p>查看列表长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">llen key<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-集合"><a href="#3-集合" class="headerlink" title="3.集合"></a>3.集合</h2><ol><li><p>存入集合数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sadd key value       // 同一个key中，不能添加相同的value<br></code></pre></td></tr></table></figure></li><li><p>读取集合数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">smembers key<br></code></pre></td></tr></table></figure></li><li><p>判断集合中是否含有某值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sismeber key value<br></code></pre></td></tr></table></figure></li><li><p>删除集合中的某个元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">srem key vlue<br></code></pre></td></tr></table></figure></li></ol><div style="text-align:center;gap:5px">    <img src="/img/redis_pic/5.png" alt="图片描述" style="zoom:40%;"></div><h2 id="4-哈希"><a href="#4-哈希" class="headerlink" title="4.哈希"></a>4.哈希</h2><ol><li><p>存入哈希数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hset key key1 value1<br></code></pre></td></tr></table></figure></li><li><p>读取哈希数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hget key key1      // 读取key中key1对应的数据<br>hgetall key        // 读取key中的全部数据<br></code></pre></td></tr></table></figure></li><li><p>删除哈希数据</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q"><span class="hljs-built_in">hdel</span> <span class="hljs-built_in">key</span> key1      <span class="hljs-comment">// 删除key中key1对应的数据</span><br></code></pre></td></tr></table></figure></li><li><p>判断哈希数据是否存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexists key key1<br></code></pre></td></tr></table></figure></li><li><p>获取哈希中的所有键</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hkeys key<br></code></pre></td></tr></table></figure></li></ol><div style="text-align:center;gap:5px">    <img src="/img/redis_pic/6.png" alt="图片描述" style="zoom:40%;"></div><h1 id="三、进阶"><a href="#三、进阶" class="headerlink" title="三、进阶"></a>三、进阶</h1><h2 id="1-发布订阅模式"><a href="#1-发布订阅模式" class="headerlink" title="1.发布订阅模式"></a>1.发布订阅模式</h2><ol><li>将消息发送到指定的频道：<code>publish 频道名 消息</code></li><li>订阅某频道：<code>subscribe 频道名</code></li><li>适用于两个客户端（<code>redis-cli</code>）内传递信息</li><li>局限性：消息无法持久化、无法记录历史消息</li></ol><div style="text-align:center;gap:5px">    <img src="/img/redis_pic/7.png" alt="图片描述" style="zoom:40%;"></div><h2 id="2-消息队列stream"><a href="#2-消息队列stream" class="headerlink" title="2.消息队列stream"></a>2.消息队列stream</h2><ul><li>解决消息无法持久化、无法记录历史消息等发布订阅模式的问题</li><li>消息id格式为：时间戳-序列号，时间戳需要是整数自增的</li></ul><ol><li><p>向消息stream中添加数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">xadd 消息名称 * key value     // 向消息中添加数据，*号表示自动生产消息的id<br><br>xadd geekhour 1-0 course git<br>xadd geekhour 2-0 course docker<br></code></pre></td></tr></table></figure></li><li><p>查看stream中消息的数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">xlen 消息名称<br></code></pre></td></tr></table></figure></li><li><p>查看stream中的消息的详细内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">xrange 消息名称 - +<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/redis_pic/8.png" alt="图片描述" style="zoom:40%;"></div></li><li><p>删除stream中的消息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">xdel 消息名称 消息id        // 删除指定id消息  eg：xdel geekhour 1686495710450-0<br>xtrim 消息名称 maxlen 0    // 删除所有消息<br></code></pre></td></tr></table></figure></li><li><p>读取消息 *</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 一次读取2个消息，如果没有读到消息则阻塞1000ms，从geekhour中的第0个元素开始读起</span><br>xread <span class="hljs-built_in">count</span> <span class="hljs-number">2</span> block <span class="hljs-number">1000</span> streams geekhour <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>后端</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>后端</tag>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
      <tag>终端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka</title>
    <link href="/2024/09/05/Kafka/"/>
    <url>/2024/09/05/Kafka/</url>
    
    <content type="html"><![CDATA[<ul><li>学习链接：<a href="https://www.bilibili.com/video/BV1Kwx1e8E1C/?spm_id_from=333.337.search-card.all.click&vd_source=4cf7b60c223a665538a4d958765c91a5">https://www.bilibili.com/video/BV1Kwx1e8E1C/</a></li></ul><h1 id="一、Kafka快速上手"><a href="#一、Kafka快速上手" class="headerlink" title="一、Kafka快速上手"></a>一、Kafka快速上手</h1><h2 id="1-MQ的作用"><a href="#1-MQ的作用" class="headerlink" title="1.MQ的作用"></a>1.MQ的作用</h2><ol><li><p>MQ：MessageQueue，消息队列是一种FIFO先进先出的数据结构。一个典型的MQ系统，会将消息由生产者发送到MQ进行排队，然后根据一定的顺序交由消息的消费者进行处理</p><blockquote><p>[!NOTE]</p><p>QQ和微信就是典型的MQ。只不过他对接的使用对象是人，而Kafka需要对接的使用对象是应用程序</p></blockquote></li><li><p>MQ的作用：</p><ol><li><p>异步，提高系统的响应速度、吞吐量</p></li><li><p>解耦，用作消息队列，帮助解耦系统的生产者和消费者</p></li><li><p>削峰，以稳定的系统资源对应突发的流量冲击</p></li></ol></li><li><p>kafka是目前最具有影响力的开源MQ产品，官网地址：<a href="https://kafka.apache.org/">https://kafka.apache.org/</a></p></li></ol><h2 id="2-搭建单机服务"><a href="#2-搭建单机服务" class="headerlink" title="2.搭建单机服务"></a>2.搭建单机服务</h2><ol><li><p>下载Kafka：<a href="https://kafka.apache.org/downloads">https://kafka.apache.org/downloads</a> </p></li><li><p>下载Zookeeper：<a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a></p></li><li><p>将上述两个压缩包，分别解压至<code>cd Documents/apps/kafka</code>文件夹和<code>cd Documents/apps/zookeeper</code>文件夹</p></li><li><p>启动Kafka⾃带的Zookeeper脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 来到kafka所在路径<br>cd $KAKFKA_HOME<br>// 对于本机电脑为：cd Documents/apps/kafka/kafka_2.13-3.8.0<br><br>// 启动Zookeeper脚本<br>nohup bin/zookeeper-server-start.sh config/zookeeper.properties &amp;<br><br>jps  // 查看zookeeper配置的进程<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/kafka_pic/2.png" alt="图片描述"></div><blockquote><p>[!NOTE]</p><p>从nohup.out中可以看到zookeeper默认会在2181端⼝启动</p><p>通过jps指令看到⼀个QuorumPeerMain进程，确定服务启动成功</p></blockquote></li><li><p>启动kafka</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 来到kafka所在路径<br>cd $KAKFKA_HOME<br><br>// 启动kafka脚本<br>nohup bin/kafka-server-start.sh config/server.properties &amp;<br><br>jps  // 查看kafka进程<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/kafka_pic/3.png" alt="图片描述"></div><blockquote><p>[!NOTE]</p><p>启动完成后，使⽤jps指令，看到⼀个kafka进程，确定服务启动成功</p><p>服务会默认在9092端⼝启动</p></blockquote></li></ol><h2 id="3-简单收发消息"><a href="#3-简单收发消息" class="headerlink" title="3.简单收发消息"></a>3.简单收发消息</h2><ul><li>Kafka的基础⼯作机制是消息发送者可以将消息发送到kafka上指定的topic，⽽消息消费者，可以从指定的topic上消费消息</li></ul><div style="text-align:center;gap:5px">    <img src="/img/kafka_pic/4.png" alt="图片描述" style="zoom:60%"></div><ol><li>使⽤Kafka提供的客户端脚本创建Topic</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd $KAKFKA_HOME<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建Topic</span><br>bin/kafka-topics.sh --create --topic zctest --bootstrap-server localhost:9092<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看Topic</span><br>bin/kafka-topics.sh --describe --topic zctest --bootstrap-server localhost:9092<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p><code>--bootstrap-server</code> 用于指定服务端</p></blockquote><div style="text-align:center;gap:5px">    <img src="/img/kafka_pic/5.png" alt="图片描述" style="zoom:60%"></div><ol start="2"><li><p>启动⼀个消息发送者端。向名为zctest的Topic发送消息。当命令⾏出现&gt;符号后，随意输⼊⼀些字符。Ctrl+C退出命令⾏。这样就完成了往kafka发消息的操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd $KAKFKA_HOME<br>bin/kafka-console-producer.sh --broker-list localhost:9092 --topic zctest<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">xxx</span><br></code></pre></td></tr></table></figure></li><li><p>启动⼀个消息消费端，从名为zctest的Topic上接收消息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd $KAKFKA_HOME<br>bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic zctest<br><br>xxx<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/kafka_pic/6.png" alt="图片描述" style="zoom:60%"></div></li><li><p>其他消费模式</p><ol><li><p><mark>上述消费者只能获得创建消费者之后的消息</mark>。如果想要<mark>消费之前发送的消息</mark>，可以通过添加–from-begining参数指定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd $KAKFKA_HOME<br>bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topictest<br></code></pre></td></tr></table></figure></li><li><p>如果需要更精确的消费消息，可以指定从哪⼀条消息开始消费</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd $KAKFKA_HOME bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --partition 0 --offset 4 --topic test<br>// 这表示从第0号Partition上的第四个消息开始读起。<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><ol><li><code>--partition</code>：实际存储消息的队列</li><li><code>--offset</code>：<code>--partition</code>的内部编号</li></ol></blockquote></li></ol></li></ol><h2 id="4-消费者组"><a href="#4-消费者组" class="headerlink" title="4.消费者组"></a>4.消费者组</h2><ol><li><p>对于每个消费者，可以指定⼀个消费者组。<mark>kafka中的同⼀条消息，只能被同⼀个消费者组下的第⼀个消费者消费；或不属于同⼀个消费者组的其他消费者来消费</mark>。在kafka-console-consumer.sh脚本中，可以通过–consumer-propertygroup.id&#x3D;testGroup来指定所属的消费者组。例如，可以启动三个消费者组，来验证⼀下分组消费机制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">两个消费者实例属于同⼀个消费者组</span><br>bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --consumer-property group.id=testGroup --topic zctest    // 可以消费<br><br>bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --consumer-property group.id=testGroup --topic zctest    // 不可以消费<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这个消费者实例属于不同的消费者组</span><br>bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --consumer-property group.id=testGroup2 --topic zctest   // 可以消费<br></code></pre></td></tr></table></figure></li><li><p>接下来，还可以使⽤kafka-consumer-groups.sh观测消费者组的情况。包括他们的消费进度。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group testGroup<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/kafka_pic/7.png" alt="图片描述" style="zoom:60%"></div><p>Kafka是以消费者组为单位来分别记录每个Partition上的消息偏移量的。⽽增加新的消费者组，并不会影响Kafka的消息数据，只是需要新增⼀条偏移量记录就可以了。所以，Kafka的消息复读效率是很⾼的。</p></li></ol><h2 id="5-kafka的消息传递机制"><a href="#5-kafka的消息传递机制" class="headerlink" title="5.kafka的消息传递机制"></a>5.kafka的消息传递机制</h2><p>从之前的实验可以看到，Kafka的消息发送者和消息消费者通过Topic这样⼀个逻辑概念来进⾏业务沟通。但是实际上，所有的消息是存在服务端的Partition这样⼀个数据结构当中的</p><div style="text-align:center;gap:5px">    <img src="/img/kafka_pic/8.png" alt="图片描述" style="zoom:50%"></div><ul><li>服务端Broker：⼀个Kafka服务器就是⼀个Broker</li><li>话题Topic：这是⼀个逻辑概念，⼀个Topic被认为是业务含义相同的⼀组消息。客户端都通过绑定Topic来⽣产或者消费⾃⼰感兴趣的话题</li><li>分区Partition：Topic只是⼀个逻辑概念，⽽Partition就是实际存储消息的组件。每个Partiton就是⼀个queue队列结构。所有消息以FIFO先进先出的顺序保存在这些Partition分区中</li></ul><h1 id="二、Kafka集群"><a href="#二、Kafka集群" class="headerlink" title="二、Kafka集群"></a>二、Kafka集群</h1><ol><li><p>集群架构</p><div style="text-align:center;gap:5px">    <img src="/img/kafka_pic/9.png" alt="图片描述" style="zoom:50%"></div></li><li><p>为什么要⽤集群？</p><ol><li>机服务下，Kafka已经具备了⾮常⾼的性能。TPS能够达到百万级别。但是，在实际⼯作中使⽤时，单机搭建的Kafka会有很⼤的局限性。</li><li>消息太多，需要分开保存。Kafka是⾯向海量消息设计的，⼀个Topic下的消息会⾮常多，单机服务很难存得下来。这些消息就需要分成不同的Partition，分布到多个不同的Broker上。这样每个Broker就只需要保存⼀部分数据。这些分区的个数就称为分区数。</li><li>服务不稳定，数据容易丢失。单机服务下，如果服务崩溃，数据就丢失了。为了保证数据安全，就需要给每个Partition配置⼀个或多个备份，保证数据不丢失。Kafka的集群模式下，每个Partition都有⼀个或多个备份。Kafka会通过⼀个统⼀的Zookeeper集群作为选举中⼼，给每个Partition选举出⼀个主节点Leader，其他节点就是从节点Follower。主节点负责响应客户端的具体业务请求，并保存消息。⽽从节点则负责同步主节点的数据。当主节点发⽣故障时，Kafka会选举出⼀个从节点成为新的主节点。</li><li>Kafka集群中的这些Broker信息，包括Partition的选举信息，都会保存在额外部署的Zookeeper集群当中，这样，kafka集群就不会因为某⼀些Broker服务崩溃⽽中断。</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>中间件</tag>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot框架</title>
    <link href="/2024/08/01/Spring%20Boot%E6%A1%86%E6%9E%B6/"/>
    <url>/2024/08/01/Spring%20Boot%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><ol><li><p>背景：JavaEE的开发一般涉及三个框架（SSM）Spring、Spring MVC、Mybatis，开发时需要配置大量xml文件，非常繁琐</p></li><li><p>SpringBoot特点</p><ol><li>遵循”约定优于配置“的原则，只需要很少的配置或使用默认的配置</li><li>能够使用内嵌的Tomcat、Jetty服务器，不需要部署war文件</li><li>提供定制化的启动器Starters，简化Maven配置，开箱即用</li><li>纯Java配置，没有代码生成，也不需要XML配置</li><li>提供了生产级的服务监控方案，如安全监控、应用监控、健康检查等</li></ol></li></ol><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/40.png" alt="图片描述" style="zoom:40%;"></div><h1 id="二、第一个项目"><a href="#二、第一个项目" class="headerlink" title="二、第一个项目"></a>二、第一个项目</h1><h2 id="1-创建"><a href="#1-创建" class="headerlink" title="1. 创建"></a>1. 创建</h2><ol><li><p>创建SpringBoot项目，使用IDEA中的Spring Initializr生成器快捷创建，Maven类型</p><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/2.png" alt="图片描述" style="zoom:20%;"></div></li><li><p>添加Spring Web、MySQL Driver和Spring Data JPA依赖项</p><blockquote><p>[!NOTE]</p><ul><li>创建SpringBoot项目勾选Spring Web选项后，会自动将spring-boot-starter-web组件加入到项目中</li></ul></blockquote><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/3.png" alt="图片描述" style="zoom:30%;"></div></li></ol><h2 id="2-MVC设计模式"><a href="#2-MVC设计模式" class="headerlink" title="2. MVC设计模式"></a>2. MVC设计模式</h2><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/11.png" alt="图片描述" style="zoom:50%;"></div><ul><li>M：model，用于存储&#x2F;封装数据</li><li>V：View，视图，用于显示数据</li><li>C：Controller，控制器</li></ul><h2 id="3-控制器-RestController"><a href="#3-控制器-RestController" class="headerlink" title="3. 控制器 - @RestController"></a>3. 控制器 - @RestController</h2><ul><li>Spring Boot提供@Controller和@RestController两种注释来标识此类负责接收和处理HTTP请求</li><li>@Controller：可用于请求的是页面和数据</li><li><mark>@RestController：可用于只请求的是数据</mark>，主要使用此方法</li></ul><h4 id="1-具体用法"><a href="#1-具体用法" class="headerlink" title="1. 具体用法"></a>1. 具体用法</h4><blockquote><p>[!NOTE]</p><ol><li>需要手动<mark>创建<code>controller</code>软件包</mark>，以及启动器的类</li><li>@RestController会将返回的对象数据转换为json格式</li></ol></blockquote><h5 id="1-示例1"><a href="#1-示例1" class="headerlink" title="1. 示例1"></a>1. 示例1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello1&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>()<br>        user.setUsername(<span class="hljs-string">&quot;zhangchen&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/12.png" alt="图片描述" style="zoom:35%;"></div><h5 id="2-示例2"><a href="#2-示例2" class="headerlink" title="2. 示例2"></a>2. 示例2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello word&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/5.png" alt="图片描述" style="zoom:20%;"></div><h4 id="2-请求方法RequestMapping-GetMapping-PostMapping"><a href="#2-请求方法RequestMapping-GetMapping-PostMapping" class="headerlink" title="2. 请求方法RequestMapping&#x2F;GetMapping&#x2F;PostMapping"></a>2. 请求方法RequestMapping&#x2F;GetMapping&#x2F;PostMapping</h4><ul><li>@RequestMapping提供制定请求的Method类型，包括RequestMethod.GET、RequestMethod.POST、RequestMethod.DELETE、RequestMethod.PUT等值，分别对应HTTP请求的Method</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/stability/drill/&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/insert&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Method匹配也可以使用@GetMapping、@PostMapping</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/stability/drill/&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/insert&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p>Post请求除了可以接收隐性请求体，也可以接收写在url中明文的请求体</p></blockquote><h4 id="3-实体entity"><a href="#3-实体entity" class="headerlink" title="3. 实体entity"></a>3. 实体<code>entity</code></h4><ul><li>当传入的参数为对象时</li></ul><ol><li>控制器 - 新建controller软件包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/hello1&quot;)</span><br>    <span class="hljs-keyword">public</span> UserEntity <span class="hljs-title function_">getUser</span><span class="hljs-params">(UserEntity userEntity)</span>&#123;<br>      <br>      System.out.println(userEntity.getUsername());   <span class="hljs-comment">// zhangchen</span><br>        System.out.println(userEntity.getPassword());   <span class="hljs-comment">// 123</span><br>      <br>        <span class="hljs-keyword">return</span> userEntity;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>对象类 - 新建entity软件包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserEntity</span> &#123;<br>    <span class="hljs-keyword">private</span> String Username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <br>    自动生成javaBean get、set方法<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>项目结构</li></ol><div style="text-align:center;gap:5px">      <img src="/img/spring_boot_pic/14.png" alt="图片描述" style="zoom:23%;"></div><ol start="4"><li>测试请求</li></ol><ul><li>请求格式为form-data</li></ul><div style="text-align:center;gap:5px">      <img src="/img/spring_boot_pic/15.png" alt="图片描述" style="zoom:53%;"></div><ul><li>请求内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs curl">curl --location --request POST &#x27;http://localhost:8080/hello1&#x27; \<br>--form &#x27;Username=&quot;zhangchen&quot;&#x27; \<br>--form &#x27;Password=&quot;123&quot;&#x27;<br></code></pre></td></tr></table></figure><ul><li>返回结果</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zhangchen&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-请求体为Body-raw-json-高频"><a href="#4-请求体为Body-raw-json-高频" class="headerlink" title="4. 请求体为Body - raw (json) *高频"></a>4. 请求体为Body - raw (json) *高频</h4><ol><li>请求内容</li></ol><div style="text-align:center;gap:5px">      <img src="/img/spring_boot_pic/16.png" alt="图片描述" style="zoom:60%;"></div><ol start="2"><li>控制器 + <mark>@RequestBody</mark></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/hello2&quot;)</span><br>    <span class="hljs-keyword">public</span> UserEntity <span class="hljs-title function_">getUser2</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserEntity userEntity)</span>&#123;<br>        System.out.println(userEntity.getUsername());   <span class="hljs-comment">// zhangchen</span><br>        System.out.println(userEntity.getPassword());   <span class="hljs-comment">// 123json</span><br>        <span class="hljs-keyword">return</span> userEntity;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-请求体为Body-form-data"><a href="#5-请求体为Body-form-data" class="headerlink" title="5. 请求体为Body - form-data"></a>5. 请求体为Body - form-data</h4><ol><li>请求内容</li></ol><div style="text-align:center;gap:5px">      <img src="/img/spring_boot_pic/17.png" alt="图片描述" style="zoom:60%;"></div><ol start="2"><li>控制器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/hello1&quot;)</span><br>    <span class="hljs-keyword">public</span> UserEntity <span class="hljs-title function_">getUser</span><span class="hljs-params">(UserEntity userEntity)</span>&#123;<br>        System.out.println(userEntity.getUsername());   <span class="hljs-comment">// zhangchen</span><br>        System.out.println(userEntity.getPassword());   <span class="hljs-comment">// 123form-data</span><br>        <span class="hljs-keyword">return</span> userEntity;<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-请求体为params"><a href="#6-请求体为params" class="headerlink" title="6. 请求体为params"></a>6. 请求体为params</h4><ol><li>请求内容</li></ol><div style="text-align:center;gap:5px">      <img src="/img/spring_boot_pic/18.png" alt="图片描述" style="zoom:60%;"></div><ol start="2"><li>控制器 + <mark>@RequestParam</mark></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/hello3&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUser3</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String username)</span>&#123;<br>        System.out.println(username);   <span class="hljs-comment">// 111</span><br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-启动类-application"><a href="#4-启动类-application" class="headerlink" title="4. 启动类 - application"></a>4. 启动类 - application</h2><ol><li>启动运行项目</li></ol><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/4.png" alt="图片描述" style="zoom:14%;">      <img src="/img/spring_boot_pic/6.png" alt="图片描述" style="zoom:13%;"></div><ol start="2"><li>访问网址：<code>http://localhost:8080/hello</code></li></ol><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/7.png" alt="图片描述" style="zoom:40%;"></div><h1 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h1><h2 id="1-yml"><a href="#1-yml" class="headerlink" title="1.yml"></a>1.yml</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><ol><li>介绍：YML&#x2F;YAML是一种直观的能够被电脑识别的数据序列化格式，并且容易被阅读</li><li>xml、yml、properties之间的比较，设置服务器的ip以及端口号</li></ol><div style="text-align:center;gap:5px">      <img src="/img/spring_boot_pic/19.png" alt="图片描述" style="zoom:50%;"></div><h3 id="2-设置端口号及ip"><a href="#2-设置端口号及ip" class="headerlink" title="2. 设置端口号及ip"></a>2. 设置端口号及ip</h3><ol><li><p>介绍</p><ol><li>在resources文件中，新建application.yml文件，设计项目ip及端口号，整体样式如下：</li><li>项目运行后，访问链接为：<code>http://127.0.0.1:8088</code></li><li>对于本机电脑，也可访问：<code>http://localhost:8088</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure></li></ol><div style="text-align:center;gap:5px">      <img src="/img/spring_boot_pic/21.png" alt="图片描述" style="zoom:20%;"></div><ol start="2"><li><p>端口号</p><ol><li>在<code>application.yml</code>中配置，默认情况为8080，可自行修改端口号</li></ol></li><li><p>ip</p><ol><li><p>无法更改本机电脑ip，在<code>application.yml</code>中配置，仅是作为自我记录</p></li><li><p><code>ifconfig</code>查询本机ip</p><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/20.png" alt="图片描述" style="zoom:35%;"></div></li></ol></li></ol><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h3><ol><li><p>数据值前边必须有空格，作为分隔符</p></li><li><p>缩进的空格数目不重要，只要相同层级的元素左侧对其即可</p></li></ol><h3 id="4-数据格式"><a href="#4-数据格式" class="headerlink" title="4.数据格式"></a>4.数据格式</h3><ul><li><p>对象：键值对的集合</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">zhangchen</span><br><br><span class="hljs-comment"># 行内写法</span><br><span class="hljs-attr">person:</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">zhangchen</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p>数组：一组按次序排列的值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">address:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">beijing</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">shanghai</span><br><span class="hljs-comment"># 行内写法</span><br><span class="hljs-attr">address:</span> [<span class="hljs-string">beijing</span>,<span class="hljs-string">shanghai</span>]<br></code></pre></td></tr></table></figure></li><li><p>纯量：单个的，不可再分的值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">mag1:&#x27;hello</span> <span class="hljs-string">\n</span> <span class="hljs-string">world&#x27;</span>  <span class="hljs-comment"># 单引号，忽略转义字符</span><br><span class="hljs-string">mag2:&quot;hello</span> <span class="hljs-string">\n</span> <span class="hljs-string">world&quot;</span>  <span class="hljs-comment"># 双引号，识别转义字符</span><br></code></pre></td></tr></table></figure></li><li><p>参数引用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">zhangchen</span><br><br><span class="hljs-attr">person:</span><br><span class="hljs-string">name:$&#123;name&#125;</span>   <span class="hljs-comment"># 引用上边定义的name值</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2-读取配置文件内容"><a href="#2-读取配置文件内容" class="headerlink" title="2.读取配置文件内容"></a>2.读取配置文件内容</h2><h3 id="1-Value"><a href="#1-Value" class="headerlink" title="1.@Value"></a>1.@Value</h3><ul><li>将配置内容挨个进行导入，适用于文件配置较少时</li></ul><ol><li><code>.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">abc</span><br><br><span class="hljs-comment"># 对象</span><br><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zhangchen</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/24.png" alt="图片描述" style="zoom:35%;"></div><ol start="2"><li><code>.controller</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YmlController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;person.age&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/yml1&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title function_">yml1</span><span class="hljs-params">()</span>&#123;<br>        Map&lt;String, String&gt; m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        m.put(<span class="hljs-string">&quot;name&quot;</span>, name);<br>        m.put(<span class="hljs-string">&quot;age&quot;</span>, String.valueOf(age));<br>        <span class="hljs-keyword">return</span> m;       <span class="hljs-comment">// &#123;&quot;name&quot;:&quot;abc&quot;,&quot;age&quot;:&quot;24&quot;&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/25.png" alt="图片描述" style="zoom:35%;"></div><h3 id="2-Environment"><a href="#2-Environment" class="headerlink" title="2.Environment"></a>2.Environment</h3><ul><li>将配置内容整体进行导入，适用于文件配置较多时</li></ul><ol><li><code>.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">abc</span><br><br><span class="hljs-comment"># 对象</span><br><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zhangchen</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><ol start="2"><li><code>.controller</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YmlController</span> &#123;<br><br>  # 初始化环境变量<br><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Environment env;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/yml2&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">yml2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(env.getProperty(<span class="hljs-string">&quot;person.name&quot;</span>));  <span class="hljs-comment">// zhangchen</span><br>        <span class="hljs-keyword">return</span> env.getProperty(<span class="hljs-string">&quot;person.name&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/26.png" alt="图片描述" style="zoom:35%;"></div><h3 id="3-ConfigurationProperties"><a href="#3-ConfigurationProperties" class="headerlink" title="3.@ConfigurationProperties"></a>3.@ConfigurationProperties</h3><ul><li>将配置内容封装成对象，再进行导入</li></ul><ol><li><code>.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">abc</span><br><br><span class="hljs-comment"># 对象</span><br><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zhangchen</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><ol start="2"><li><code>entity</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 表达这个类是bean</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">// 将配置文件注入到这个bean中，其中前缀是person</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonEntity</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><code>.controller</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YmlController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PersonEntity personEntity;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/yml3&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">yml3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(personEntity.getName());  <span class="hljs-comment">// zhangchen</span><br>        <span class="hljs-keyword">return</span> personEntity.getName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/27.png" alt="图片描述" style="zoom:35%;"></div><h2 id="3-不同环境文件配置方式-profile"><a href="#3-不同环境文件配置方式-profile" class="headerlink" title="3.不同环境文件配置方式 profile"></a>3.不同环境文件配置方式 profile</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>开发时，通常同一套程序会被安装到不同环境，比如开发、测试、生产等。其中数据库地址、服务器端口等配置都不同，如果每次打包时，都修改配置文件将非常麻烦，使用profile功能来动态配置切换</p><h3 id="2-不同环境文件配置方式"><a href="#2-不同环境文件配置方式" class="headerlink" title="2.不同环境文件配置方式"></a>2.不同环境文件配置方式</h3><h4 id="1-多properties文件方式"><a href="#1-多properties文件方式" class="headerlink" title="1.多properties文件方式"></a>1.多properties文件方式</h4><ol><li>设置<code>application-dev.properties</code>，开发环境端口号</li></ol><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/22.png" alt="图片描述" style="zoom:35%;"></div><ol start="2"><li>设置<code>application-dev.properties</code>，测试环境端口号</li></ol><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/23.png" alt="图片描述" style="zoom:35%;"></div><ol start="3"><li><code>application.properties</code><mark>进行激活</mark>，使用开发环境端口号（8081）</li></ol><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/28.png" alt="图片描述" style="zoom:35%;"></div><h4 id="2-yml单文档方式"><a href="#2-yml单文档方式" class="headerlink" title="2.yml单文档方式"></a>2.yml单文档方式</h4><ol><li>将dev、test、pro环境所需要的配置写在同一个yml文件中，<mark>中间用<code>---</code>来进行分割</mark></li><li>选择所需要的环境配置，<mark>进行激活</mark></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-attr">activate:</span><br>      <span class="hljs-attr">on-profile:</span> <span class="hljs-string">dev</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-attr">activate:</span><br>      <span class="hljs-attr">on-profile:</span> <span class="hljs-string">test</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8083</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-attr">activate:</span><br>      <span class="hljs-attr">on-profile:</span> <span class="hljs-string">pro</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># 激活开发环境的配置文件</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">pro</span><br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/29.png" alt="图片描述" style="zoom:35%;"></div><h2 id="4-开发环境热部署"><a href="#4-开发环境热部署" class="headerlink" title="4. 开发环境热部署"></a>4. 开发环境热部署</h2><ul><li>在实际的项目开发调试过程中，会频繁地修改后台类文件，导致需要重新编译、重新启动，整个过程非常麻烦，影响开发效率</li><li>Spring Boot提供了spring-boot-devtools组件，使得无需动手重启Spring Boot应用即可重新编译、启动项目，大大缩短编译启动时间</li><li>devtools会监听classpath下的文件变动，触发Restart类加载器重新加载该类，从而实现类文件和属性文件的热部署</li><li>并不是所有的更改都需要重启应用（如静态资源，视图模板），可以通过设置spring.devtools.restart.exclude属性，来指定一些文件或目录的修改，不用重启应用</li></ul><ol><li><p>在maven中添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--热部署依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在application.properties中配置devtools</p><blockquote><p>[!NOTE]</p><p><code>.properties</code>文件是一种简单的配置文件格式，它主要用于存储配置信息和参数，方便应用程序在运行时读取和使用。</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 热部署生效</span><br><span class="hljs-attr">spring.devtools.restart.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 设置重启目录</span><br><span class="hljs-attr">spring.devtools.restart.additional-paths</span>=<span class="hljs-string">src/main/java</span><br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/8.png" alt="图片描述" style="zoom:25%;"></div></li><li><p>对于IDEA这个IDE，需要进行额外配置</p><ol><li><p>打开Setting页面，Build、Excution、Deployment-compile，勾选Buildprojectautomatically</p><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/9.png" alt="图片描述" style="zoom:25%;"></div></li><li><p>打开Setting页面-高级设置-编译器，勾选compiler.automake.allow.when.app.running复选框</p><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/10.png" alt="图片描述" style="zoom:25%;"></div></li></ol></li><li><p>以上完成热部署所需的所有配置。后续完成代码修改后，<code>command+s</code>进行保存，平台再次访问内容已经发生了修改，即热部署</p></li></ol><h1 id="四、整合其他框架"><a href="#四、整合其他框架" class="headerlink" title="四、整合其他框架 *"></a>四、整合其他框架 *</h1><h2 id="1-测试-Junit"><a href="#1-测试-Junit" class="headerlink" title="1.测试 Junit"></a>1.测试 <code>Junit</code></h2><h3 id="1-搭建SpringBoot工程"><a href="#1-搭建SpringBoot工程" class="headerlink" title="1.搭建SpringBoot工程"></a>1.搭建SpringBoot工程</h3><h3 id="2-引入依赖"><a href="#2-引入依赖" class="headerlink" title="2.引入依赖"></a>2.引入依赖</h3><p>创建SpringBoot工程后，会自动导入start-test依赖</p><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/31.png" alt="图片描述" style="zoom:35%;"></div><h3 id="3-编写测试类-Service"><a href="#3-编写测试类-Service" class="headerlink" title="3.编写测试类 @Service"></a>3.编写测试类 <code>@Service</code></h3><blockquote><p>[!NOTE]</p><ol><li><mark>@Service 标识了这个类是一个业务逻辑层的服务 Bean</mark>。这意味着当 Spring 应用启动时，该 Bean 会被自动创建并加入到 Spring 应用上下文中</li><li><mark>在控制器类中，通过注入该组件的实例，即可调用其中的方法</mark></li></ol></blockquote><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/32.png" alt="图片描述" style="zoom:35%;"></div><h3 id="4-添加测试相关注释"><a href="#4-添加测试相关注释" class="headerlink" title="4.添加测试相关注释"></a>4.添加测试相关注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(classes = Application.class)</span><br></code></pre></td></tr></table></figure><ul><li>其中<code>Application.class</code>方法，为启动器中的方法</li></ul><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/33.png" alt="图片描述" style="zoom:35%;"></div><h3 id="5-编写测试用例方法"><a href="#5-编写测试用例方法" class="headerlink" title="5.编写测试用例方法"></a>5.编写测试用例方法</h3><blockquote><p>[!NOTE]</p><ol><li><mark>@Autowired</mark>：注入实例</li><li><mark>@Test</mark>：标记测试方法</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(classes = Application.class)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBootDemoApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloService helloService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1&quot;</span>);       <span class="hljs-comment">// 1</span><br>        helloService.helloService();   <span class="hljs-comment">// hello</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/34.png" alt="图片描述" style="zoom:35%;"></div><h2 id="2-数据库MyBatis"><a href="#2-数据库MyBatis" class="headerlink" title="2.数据库MyBatis"></a>2.数据库<code>MyBatis</code></h2><h3 id="1-搭建SpringBoot工程-1"><a href="#1-搭建SpringBoot工程-1" class="headerlink" title="1.搭建SpringBoot工程"></a>1.搭建SpringBoot工程</h3><h3 id="2-引入依赖-1"><a href="#2-引入依赖-1" class="headerlink" title="2.引入依赖"></a>2.引入依赖</h3><ul><li>引入mybatis起步依赖，添加mysql驱动</li><li><mark>需要注意<code>Spring Boot</code>和<code>MyBatis</code>的版本是否兼容</mark></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- pom.xml --&gt;</span><br><br><span class="hljs-comment">&lt;!-- MyBatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.26<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-编写配置"><a href="#3-编写配置" class="headerlink" title="3.编写配置"></a>3.编写配置</h3><ul><li>编写DataSource和MyBatis相关配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#application.yml</span><br><br><span class="hljs-comment">#配置本地Mysql数据源信息</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/test01</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">Pooh_0505</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapper/*.xml</span><br></code></pre></td></tr></table></figure><h3 id="4-定义实体类"><a href="#4-定义实体类" class="headerlink" title="4.定义实体类"></a>4.定义实体类</h3><ul><li><mark>创建<code>domain</code>软件包</mark>，定义表和实体类</li><li><code>User.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String gender;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/35.png" alt="图片描述" style="zoom:35%;"></div><h3 id="5-数据库查询"><a href="#5-数据库查询" class="headerlink" title="5.数据库查询"></a>5.数据库查询</h3><ul><li>创建<code>mapper</code>软件包，编写dao和mapper文件，进行数据库查询</li><li><code>UserMapper.java</code></li></ul><h4 id="1-纯注解模式-Select"><a href="#1-纯注解模式-Select" class="headerlink" title="1.纯注解模式@Select"></a>1.纯注解模式<code>@Select</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from test001&quot;)</span><br>    List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/36.png" alt="图片描述" style="zoom:35%;"></div>#### 2.`Xml`配置文件映射模式 *<h5 id="1-创建xml配置文件"><a href="#1-创建xml配置文件" class="headerlink" title="1.创建xml配置文件"></a>1.创建xml配置文件</h5><ol><li><p>resources下，新建 mappers 软件包，以及<code>UserMapper</code>配置文件</p></li><li><p>添加<code>UserMapper</code>配置文件的配置头</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写查询语句</p><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/38.png" alt="图片描述" style="zoom:35%;"></div></li></ol><h5 id="2-创建项目运行配置文件"><a href="#2-创建项目运行配置文件" class="headerlink" title="2.创建项目运行配置文件"></a>2.创建项目运行配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mappers/*.xml</span>   <span class="hljs-comment"># mapper映射文件路径</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.example.springbootdemo.domain</span>  <span class="hljs-comment">#包扫描，用于查找别名</span><br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/37.png" alt="图片描述" style="zoom:35%;"></div><h5 id="3-创建mapper调用xml配置文件"><a href="#3-创建mapper调用xml配置文件" class="headerlink" title="3.创建mapper调用xml配置文件"></a>3.创建mapper调用xml配置文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserXmlMapper</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">findAll2</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_boot_pic/39.png" alt="图片描述" style="zoom:35%;"></div><h3 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(classes = Application.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFindAll</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; all = userMapper.findAll();<br>        System.out.println(all);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="六、软件包"><a href="#六、软件包" class="headerlink" title="六、软件包"></a>六、软件包</h1><h2 id="1-java"><a href="#1-java" class="headerlink" title="1. java"></a>1. java</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">|- java              <span class="hljs-regexp">//</span> 源码<br>  |- com<br>|- controller     <span class="hljs-regexp">//</span> 控制层、web层<br><br>|- service        <span class="hljs-regexp">//</span> 服务层接口<br>        |- impl       <span class="hljs-regexp">//</span> 服务层实现<br>        <br>    |- mapper<span class="hljs-regexp">/dao/</span>repository <span class="hljs-regexp">//</span> 数据访问层，与数据库交互为service提供接口<br>    <br>    |- pojo<span class="hljs-regexp">/entity/</span>domain     <span class="hljs-regexp">//</span> 实体对象<br>        |- dto <span class="hljs-regexp">//</span> 持久层需要的实体对象(用于服务层与持久层之间的数据传输对象)<br>        |- vo <span class="hljs-regexp">//</span> 视图层需要的实体对象(用于服务层与视图层之间的数据传输对象)<br><br>    |- constant       <span class="hljs-regexp">//</span> 存放常量<br>    |- utils          <span class="hljs-regexp">//</span> 工具<br>    |- *Application.java  <span class="hljs-regexp">//</span> 入口启动类<br></code></pre></td></tr></table></figure><h3 id="1-控制层"><a href="#1-控制层" class="headerlink" title="1.控制层"></a>1.控制层</h3><ol><li><p>controller</p><p>用途：具体模块的业务流程控制，需要调用service逻辑设计层的接口来控制业务流程。因为service中的方法是我们使用到的，controller通过接收前端H5或者App传过来的参数进行业务操作，再将处理结果返回到前端</p></li></ol><h3 id="2-服务层"><a href="#2-服务层" class="headerlink" title="2.服务层"></a>2.服务层</h3><ol><li><p>service</p><p>用途：业务service层，给controller层的类提供接口进行调用。一般就是自己写的方法封装起来，就是声明一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>serviceImpl</p><p>用途：方法的具体实现</p></li></ol><h3 id="3-数据访问层"><a href="#3-数据访问层" class="headerlink" title="3.数据访问层"></a>3.数据访问层</h3><ol><li><p>mapper&#x2F;dao&#x2F;repository</p><p>用途：对数据库进行数据持久化操作，他的方法语句是直接针对数据库操作的，主要实现一些增删改查操作，在mybatis中方法主要与与xxx.xml内相互一一映射</p></li></ol><h3 id="4-实体层"><a href="#4-实体层" class="headerlink" title="4.实体层"></a>4.实体层</h3><ol><li><p><mark>pojo</mark>&#x2F;entity&#x2F;domin</p><p>用途：用于存放我们的实体类，与数据库中的属性值基本保持一致，实现set和get的方法</p></li><li><p><mark>DTO</mark>（Data Transfer Object）</p></li></ol><p>DTO通常用于在应用程序的各层之间传输数据。<mark>通常不包含任何业务逻辑，只是用来承载数据</mark>。DTO的主要目的是将数据从一层传递到另一层，同时减少层与层之间的耦合度</p><ul><li>示例：有一个用户服务，需要从数据库获取用户信息并将其传输到前端。我们可以创建一个UserDTO来承载这些信息。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDTO</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-comment">// 省略getter和setter方法...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中，UserDTO只是一个简单的Java类，包含了用户的ID、用户名和电子邮件地址。它没有包含任何与用户相关的业务逻辑，只是用来在不同的层之间传输数据</p><ol start="3"><li><mark>VO</mark>（Value Object）</li></ol><p>VO是一个用来封装业务逻辑处理后的数据。与DTO不同，<mark>VO通常会包含一些业务逻辑</mark>，比如计算、校验等。VO更注重于业务领域，它是对某个业务实体的抽象表示。</p><ul><li>示例：需要对用户进行一些业务处理，比如计算用户的积分。我们可以创建一个UserVO来承载这些信息。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserVO</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> points; <span class="hljs-comment">// 用户的积分</span><br>    <span class="hljs-comment">// 省略getter和setter方法...</span><br>    <br>    <span class="hljs-comment">// 业务处理方法，比如计算积分</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calculatePoints</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 计算积分的逻辑...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，UserVO不仅包含了用户的基本信息，还包含了用户的积分信息，并且提供了一个计算积分的方法。这样，我们就可以在业务处理层使用UserVO来进行一些与用户相关的业务操作</p><h2 id="2-resource"><a href="#2-resource" class="headerlink" title="2.resource"></a>2.resource</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lasso">|- resources         <span class="hljs-comment">// 资源</span><br> |- static        <span class="hljs-comment">// 静态资源(html、css、js、图片等)</span><br> |- templates     <span class="hljs-comment">// 视图模板(jsp、thymeleaf等)</span><br> |- mapper        <span class="hljs-comment">// 存放数据访问层对应的XML配置</span><br>     |- *Mapper.<span class="hljs-built_in">xml</span><br>     |- <span class="hljs-params">...</span><br> |- application.yml        <span class="hljs-comment">// 公共配置</span><br> |- application<span class="hljs-params">-dev.yml</span>    <span class="hljs-comment">// 开发环境配置</span><br> |- application<span class="hljs-params">-prod.yml</span>   <span class="hljs-comment">// 生产环境配置 </span><br> |- logback.<span class="hljs-built_in">xml</span>            <span class="hljs-comment">// 日志配置</span><br></code></pre></td></tr></table></figure><h2 id="3-test"><a href="#3-test" class="headerlink" title="3.test"></a>3.test</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|- test                  // 测试源码</span><br>  <span class="hljs-string">|- java               </span><br>   <span class="hljs-string">|- com</span><br>     <span class="hljs-string">|- 根据具体情况按源码目录结构存放编写的测试用例</span><br></code></pre></td></tr></table></figure><p>1.Mapper文件：通常是指MyBatis框架中的XML文件，用于定义SQL语句和映射关系。它的主要用途包括，定义SQL语句、结果映射、参数映射、动态SQL</p><p>2.DAO（Data Access Object）文件：是Java类，用于定义数据访问接口和实现类，调用Mapper文件中的SQL语句。它的主要用途包括，定义数据访问接口、实现数据访问逻辑</p><h1 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h1><h2 id="1-本机端口号被占，无法启动web程序"><a href="#1-本机端口号被占，无法启动web程序" class="headerlink" title="1.本机端口号被占，无法启动web程序"></a>1.本机端口号被占，无法启动web程序</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 找到使用端口的进程<br>sudo lsof -i :PortNum   // 将PortNum替换为要查询的端口号（注意端口号前面不要空格）<br>// 关闭进程<br>sudo kill -9 PID        // 将PID替换为相应的进程号<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>框架</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven项目管理</title>
    <link href="/2024/07/30/Maven/"/>
    <url>/2024/07/30/Maven/</url>
    
    <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a><font color=#1E90FF>1. 介绍</font></h2><h3 id="1-什么是Maven"><a href="#1-什么是Maven" class="headerlink" title="1. 什么是Maven"></a><font color=#1E90FF>1. 什么是Maven</font></h3><p>介绍：全称是Apache Maven，专门用于管理和构建项目的<strong>工具</strong> </p><p>Maven对工程目录结构的要求：</p><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/16.png" alt="图片描述" style="zoom:50%;"></div><p>Maven的构建过程：</p><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/17.png" alt="图片描述" style="zoom:50%;"></div><h3 id="2-Maven有什么用"><a href="#2-Maven有什么用" class="headerlink" title="2. Maven有什么用"></a><font color=#1E90FF>2. Maven有什么用</font></h3><ol><li><p><strong>提供了一套标准化的项目结构</strong></p><ol><li>官方：使用的idea，eclipse编译器的项目结构不统一，maven就提供了统一的项目结构标准，这样就可以统一项目结构通用了</li><li>直白翻译：用meven后，不管用什么编译器，项目结构都一样通用了</li></ol></li><li><p><strong>提供了标准化的构建流程（编译、测试、打包、发布）</strong></p><ol><li>官方：使用简单的几个命令来进行整个项目的编译、测试、打包、发布（发布一般不用maven命令） </li><li>直白翻译：项目写好后，不知道怎么打包之类的，使用maven对应的一个命令就可以帮你完成这些工作了</li></ol></li><li><p><strong>提供了一套依赖管理机制</strong></p><ol><li><p>依赖管理：管理你项目所依赖的第三方资源（jar包、插件） </p></li><li><p>不用maven使用jar包的步骤：</p><ol><li>网上去寻找下载jar包–&gt;复制jar包到项目–&gt;将jar包加入到工作环境</li></ol></li><li><p>用maven后步骤：</p><ol><li>使用简单的几行命令坐标就可以从仓库里面调你需要的jar包给你直接用上</li></ol></li></ol></li></ol><h3 id="3-基础概念"><a href="#3-基础概念" class="headerlink" title="3. 基础概念"></a><font color=#1E90FF>3. 基础概念</font></h3><h5 id="1-仓库"><a href="#1-仓库" class="headerlink" title="1. 仓库"></a><font color=#1E90FF>1. 仓库</font></h5><ol><li><p>仓库：用于存储资源，包含各种jar包</p></li><li><p>仓库的分类：</p><ol><li>本地仓库：自己计算机上的一个仓库</li><li>远程仓库（私服）：由公司团队搭建的私有仓库（免费开源和一些付费的jar包）</li><li>中央仓库：由maven团队维护的全球唯一仓库(全球免费开源的jar包)</li></ol><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/9.png" alt="图片描述" style="zoom:50%;"></div></li><li><p>私服的作用</p><ol><li>保留具有版权的资源，包含购买或自主研发的jar（中央仓库中的jar都是开源的，不能存储具有版权的资源）</li><li>一定范围内共享资源，仅对内部开放，不对外共享</li></ol></li></ol><h5 id="2-坐标"><a href="#2-坐标" class="headerlink" title="2. 坐标"></a><font color=#1E90FF>2. 坐标</font></h5><ul><li>Maven中的坐标使用三个『向量』在『Maven的仓库』中唯一的定位到一个『jar』包。</li></ul><ol><li><p>groupId：公司或组织的 id，即公司或组织域名的倒序，通常也会加上项目名称</p><p>例如：groupId：com.javatv.maven</p></li><li><p>artifactId：一个项目或者是项目中的一个模块的 id，即模块的名称，将来作为 Maven 工程的工程名</p><p>例如：artifactId：auth</p></li><li><p>version：版本号</p><p>例如：version：1.0.0</p></li></ol><p>提示：坐标和仓库中 jar 包的存储路径之间的对应关系，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br>&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">2.5</span>&lt;/version&gt;<br></code></pre></td></tr></table></figure><p>上面坐标对应的 jar 包在 Maven 本地仓库中的位置：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Maven</span>本地仓库根目录\javax\servlet\servlet-api\<span class="hljs-number">2</span>.<span class="hljs-number">5</span>\servlet-api-<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.jar<br></code></pre></td></tr></table></figure><h2 id="2-安装和配置"><a href="#2-安装和配置" class="headerlink" title="2. 安装和配置"></a><font color=#1E90FF>2. 安装和配置</font></h2><ol><li><p>参考视频：<a href="https://www.bilibili.com/video/BV1y24y1o7mB/?spm_id_from=333.337.search-card.all.click&vd_source=4cf7b60c223a665538a4d958765c91a5">https://www.bilibili.com/video/BV1y24y1o7mB/?spm_id_from=333.337.search-card.all.click&amp;vd_source=4cf7b60c223a665538a4d958765c91a5</a></p></li><li><p>压缩包下载，后放置文件夹解压，链接：<a href="https://archive.apache.org/dist/maven/maven-3/3.5.4/binaries/">https://archive.apache.org/dist/maven/maven-3/3.5.4/binaries/</a></p><ul><li>注：maven需要手动下载配置，直接用系统brew会出错</li></ul><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/2.png" alt="图片描述" style="zoom:50%;"></div></li><li><p>终端操作</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.zshrc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加环境配置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">maven</span><br>export MAVEN_HOME=/Users/zhangchen/Documents/JavaDevelopEnvironment/apache-maven-3.5.4<br>export PATH=$&#123;MAVEN_HOME&#125;/bin:$PATH:.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">esc + :wq! 退出</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>maven文档中，新建respository文件夹</p><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/3.png" alt="图片描述" style="zoom:50%;"></div></li><li><p>编辑settings.xml文件，添加maven路径和镜像</p><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/4.png" alt="图片描述" style="zoom:25%;">    <img src="/img/maven_pic/5.png" alt="图片描述" style="zoom:25%;"></div></li><li><p>IDEA中设置maven的设置文件和本地仓库</p></li></ol><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/6.png" alt="图片描述" style="zoom:50%;"></div><h2 id="3-创建JavaSE工程"><a href="#3-创建JavaSE工程" class="headerlink" title="3. 创建JavaSE工程"></a>3. 创建JavaSE工程</h2><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/7.png" alt="图片描述" style="zoom:15%;">    <img src="/img/maven_pic/8.png" alt="图片描述" style="zoom:15%;"></div><h2 id="4-创建JavaEE工程-java功能变为web工程"><a href="#4-创建JavaEE工程-java功能变为web工程" class="headerlink" title="4. 创建JavaEE工程 - java功能变为web工程"></a>4. 创建JavaEE工程 - java功能变为web工程</h2><ol><li>安装JBLJavaToWeb插件</li></ol><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/21.png" alt="图片描述" style="zoom:45%;"></div><ol start="2"><li>创建一个javamaven工程</li><li>右键，使用快捷键补全web项目</li></ol><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/22.png" alt="图片描述" style="zoom:45%;"></div><ol start="4"><li>java web结构</li></ol><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/23.png" alt="图片描述" style="zoom:45%;"></div><h2 id="5-Maven核心功能管理依赖"><a href="#5-Maven核心功能管理依赖" class="headerlink" title="5. Maven核心功能管理依赖"></a>5. Maven核心功能管理依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-comment">&lt;!--    gavp属性 不会改变--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-project<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--    构建过程 - 部署时进行修改--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--  maven工程的打包方式java-jar,web-war,不打包-pom--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-comment">&lt;!--  声明版本号--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  第三方依赖声明</span><br><span class="hljs-comment">      dependencies - 依赖的集合</span><br><span class="hljs-comment">      dependency   - 每个依赖项，</span><br><span class="hljs-comment">      【gav】- groupId，artifactId，artifactId - 依赖的信息就是其他maven工程，只不过是被打成了jar包</span><br><span class="hljs-comment">      --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-导入依赖"><a href="#6-导入依赖" class="headerlink" title="6. 导入依赖"></a>6. 导入依赖</h2><h3 id="1-手动导入"><a href="#1-手动导入" class="headerlink" title="1. 手动导入"></a>1. 手动导入</h3><ol><li>搜索maven依赖，网址：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></li><li>搜索框输入想要的jar包，以junit为例子，点击第二个</li></ol><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/18.png" alt="图片描述" style="zoom:45%;"></div><ol start="3"><li>找到所需要的版本，点进去就可以看到导入maven项目的jar坐标</li></ol><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/19.png" alt="图片描述" style="zoom:30%;">    <img src="/img/maven_pic/20.png" alt="图片描述" style="zoom:30%;"></div><h3 id="2-插件导入"><a href="#2-插件导入" class="headerlink" title="2. 插件导入"></a>2. 插件导入</h3><ol><li>安装maven-search插件</li></ol><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/24.png" alt="图片描述" style="zoom:45%;"></div><ol start="2"><li>使用方法</li></ol><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/25.png" alt="图片描述" style="zoom:45%;"></div><h2 id="7-扩展"><a href="#7-扩展" class="headerlink" title="7. 扩展"></a>7. 扩展</h2><h3 id="1-提取版本号，统一管理"><a href="#1-提取版本号，统一管理" class="headerlink" title="1. 提取版本号，统一管理"></a>1. 提取版本号，统一管理</h3><ul><li><p>当声明一个变量后，在其他的位置可以引用${技术名.version}</p></li><li><p>注意：声明的标签一定要两层以上命名，推荐技术名.version</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">jackson.version</span>&gt;</span>2.15.2<span class="hljs-tag">&lt;/<span class="hljs-name">jackson.version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-可选属性scope"><a href="#2-可选属性scope" class="headerlink" title="2. 可选属性scope"></a>2. 可选属性scope</h3><ul><li><p><code>&lt;scope&gt;</code>引入依赖的作用域：</p><p>默认为compile：作用于main，test，打包和运行</p><p>test：仅作用于test代码，典型代表：<mark>junit - @test</mark></p><p>runtime：仅作用于打包和运行，main和test不会使用，典型代表：mysql</p><p>provided：仅作用于main和test，打包和运行不会使用，典型代表：servlet</p></li><li><p>总结：是一种锦上添花的手段，可以默认值全部生效</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-依赖传递性"><a href="#3-依赖传递性" class="headerlink" title="3. 依赖传递性"></a>3. 依赖传递性</h3><ul><li><p>若<code>A1.0</code>依赖<code>B1.0</code>，<code>B1.0</code>依赖<code>C1.0</code></p><p>因为依赖传递性存在，导入<code>A1.0</code>后，会自动导入依赖<code>B1.0</code>和<code>C1.0</code></p></li></ul><h3 id="4-依赖冲突"><a href="#4-依赖冲突" class="headerlink" title="4. 依赖冲突"></a>4. 依赖冲突</h3><ul><li><p>若<code>A1.0</code>依赖<code>B1.0</code>，<code>B1.0</code>依赖<code>C1.0</code>，<code>C1.0</code>依赖<code>A1.0</code></p><p>因为依赖冲突的存在，当发生重复依赖导入会终止依赖传递。导入<code>A1.0</code>后，会自动导入依赖<code>B1.0</code>和<code>C1.0</code></p></li><li><p>依赖冲突的两个原则</p><ul><li><p>第一原则：谁短谁优先（引用的路径长度）</p><p>若<code>A</code>依赖<code>B</code>，<code>B</code>依赖<code>C1.0</code>，<code>F</code>依赖<code>C2.0</code></p><p>最终引入的依赖为：<code>A</code>，<code>B</code>，<code>F</code>，<code>C2.0</code></p></li><li><p>第二原则：谁上谁优先，dependencies声明的先后顺序</p><p>若<code>A</code>依赖<code>B1.0</code>，<code>F</code>依赖<code>B2.0</code></p><p>最终引入的依赖为：<code>A</code>，<code>F</code>，<code>B1.0</code></p></li></ul></li></ul><h2 id="8-构建管理"><a href="#8-构建管理" class="headerlink" title="8. 构建管理"></a>8. 构建管理</h2><p>项目构架是指将<mark>源代码、依赖库和资源文件等转换成为可执行或可部署的应用程序</mark>的过程，在这个过程中包括清理 -&gt; 编译 -&gt; 测试 -&gt; 报告   -&gt; 打包 -&gt; 部署</p><ul><li><p>可视化构建方式</p><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/26.png" alt="图片描述" style="zoom:45%;"></div></li></ul><h2 id="9-继承"><a href="#9-继承" class="headerlink" title="9. 继承 &lt;dependencyManagement&gt;"></a>9. 继承 <code>&lt;dependencyManagement&gt;</code></h2><ol><li><p>概念</p><p>在Maven项目中，让一个项目从另一个项目中继承配置信息的机制。继承可以让我们在多个项目中共享同一配置信息，简化项目的管理和维护工作。进行统一版本管理</p><div style="text-align:center;gap:5px">    <img src="/img/maven_pic/27.png" alt="图片描述" style="zoom:45%;"></div></li><li><p>父工程</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-project-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--声明版本信息--&gt;</span><br><span class="hljs-comment">&lt;!--【不推荐】导入依赖，所有子工程都有相应的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>xx<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--【推荐】声明依赖，不会下载依赖，可以被子工程继承版本号--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.15.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>子工程</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-project<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--声明版本信息--&gt;</span><br><span class="hljs-comment">&lt;!--【推荐】只需要写ga，不要写v--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">denpendencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">denpendencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="10-聚合"><a href="#10-聚合" class="headerlink" title="10. 聚合"></a>10. 聚合</h2><p>将多个项目组织到一个父级项目中，通过触发父工程的构建，会统一按顺序触发子工程构建的过程</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语言</tag>
      
      <tag>开发</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL+Django</title>
    <link href="/2023/12/06/MySQL+Django/"/>
    <url>/2023/12/06/MySQL+Django/</url>
    
    <content type="html"><![CDATA[<h1 id="一、通过pymysql操作MySQL-只做了解"><a href="#一、通过pymysql操作MySQL-只做了解" class="headerlink" title="一、通过pymysql操作MySQL - 只做了解"></a>一、通过pymysql操作MySQL - 只做了解</h1><ol><li><p>用Python代码连接MySQL：<code>pip install pymysql</code></p></li><li><p>向MySQL中传入静态某值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># 1.连接MySQL</span><br>conn = pymysql.connect(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">3306</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, passwd=<span class="hljs-string">&quot;Pooh_0505&quot;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>, db=<span class="hljs-string">&#x27;mysqltest&#x27;</span>)<br>cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br><span class="hljs-comment"># 2.发送指令</span><br>cursor.execute( <span class="hljs-string">&quot;insert into admin(username,password,mobile) values(&#x27;kfc&#x27;,&#x27;kfc123&#x27;,&#x27;1853&#x27;)&quot;</span>)<br>conn.commit()<br><br><span class="hljs-comment"># 3.关闭连接</span><br>cursor.close()<br>conn.close()<br></code></pre></td></tr></table></figure></li><li><p>向MySQL中传入动态某值</p></li></ol><ul><li>注：不可以使用字符串格式化format形式，去拼接sql，安全隐患sql注入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法一</span><br>sql = <span class="hljs-string">&quot;insert into admin(username,password,mobile) values(%s, %s, %s)&quot;</span><br>cursor.execute(sql, [<span class="hljs-string">&quot;zc&quot;</span>,<span class="hljs-string">&quot;zc123&quot;</span>,<span class="hljs-string">&quot;189999&quot;</span>])<br><br><span class="hljs-comment"># 方法二</span><br>sql = <span class="hljs-string">&quot;insert into admin(username,password,mobile) values(%(n1)s, %(n2)s, %(n3)s)&quot;</span><br>cursor.execute(sql, &#123;<span class="hljs-string">&quot;n1&quot;</span>:<span class="hljs-string">&quot;zc&quot;</span>,<span class="hljs-string">&quot;n2&quot;</span>:<span class="hljs-string">&quot;zc123&quot;</span>,<span class="hljs-string">&quot;n3&quot;</span>:<span class="hljs-string">&quot;18999&quot;</span>&#125;)<br><br><span class="hljs-comment"># 动态创建数据</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>：<br>    user = <span class="hljs-built_in">input</span>（“用户名：”）<br>    <span class="hljs-keyword">if</span> user.upper() == <span class="hljs-string">&#x27;Q&#x27;</span>;<br>        <span class="hljs-keyword">break</span><br>    pwd = <span class="hljs-built_in">input</span>（“密码：”）<br>    mobile = <span class="hljs-built_in">input</span>（“手机号：”）<br>    <br>    sql = <span class="hljs-string">&quot;insert into admin(username,password,mobile) values(%s, %s, %s)&quot;</span><br>    cursor.execute(sql, [user，pwd，mobile])<br></code></pre></td></tr></table></figure><ol start="4"><li><p>查询数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># 1.连接MySQL</span><br>conn = pymysql.connect(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">3306</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, passwd=<span class="hljs-string">&quot;Pooh_0505&quot;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>, db=<span class="hljs-string">&#x27;mysqltest&#x27;</span>)<br>cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br><span class="hljs-comment"># 2.发送指令</span><br>cursor.execute( <span class="hljs-string">&quot;select * from admin where id &gt; 2&quot;</span>)<br><span class="hljs-comment"># 获取符合条件的所有数据，得到是[字典，字典]</span><br>data_list = cursor.fetchall()<br><span class="hljs-keyword">for</span> row_dict <span class="hljs-keyword">in</span> data_list:<br>    <span class="hljs-built_in">print</span>(row_dict)<br><span class="hljs-comment"># 获取符合条件的第一条数据</span><br>data_list = cursor.fetchone()<br><br><span class="hljs-comment"># 3.关闭连接</span><br>cursor.close()<br>conn.close()<br></code></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># 1.连接MySQL</span><br>conn = pymysql.connect(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">3306</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, passwd=<span class="hljs-string">&quot;Pooh_0505&quot;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>, db=<span class="hljs-string">&#x27;mysqltest&#x27;</span>)<br>cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br><span class="hljs-comment"># 2.发送指令</span><br>cursor.execute( <span class="hljs-string">&quot;delete from admin where id=%s&quot;</span>,[<span class="hljs-number">3</span>,])<br>conn.commit()<br><br><span class="hljs-comment"># 3.关闭连接</span><br>cursor.close()<br>conn.close()<br></code></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># 1.连接MySQL</span><br>conn = pymysql.connect(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">3306</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, passwd=<span class="hljs-string">&quot;Pooh_0505&quot;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>, db=<span class="hljs-string">&#x27;mysqltest&#x27;</span>)<br>cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br><span class="hljs-comment"># 2.发送指令</span><br><span class="hljs-comment"># 修改id为4的那个人，手机号为1888</span><br>cursor.execute( <span class="hljs-string">&quot;updata admin set mobile=%s where id=%s&quot;</span>,[<span class="hljs-string">&quot;1888&quot;</span>,<span class="hljs-number">4</span>,])<br>conn.commit()<br><br><span class="hljs-comment"># 3.关闭连接</span><br>cursor.close()<br>conn.close()<br></code></pre></td></tr></table></figure></li></ol><h1 id="二、django自带ORM框架操作MySQL-推荐使用"><a href="#二、django自带ORM框架操作MySQL-推荐使用" class="headerlink" title="二、django自带ORM框架操作MySQL - 推荐使用"></a>二、django自带ORM框架操作MySQL - 推荐使用</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><ol><li><p>ORM是一个翻译的过程，方便操作数据库</p><div style="text-align:center"> <img src="/img/mysql_advance_pic/2.jpg" alt="图片描述"></div></li><li><p>安装第三方模块</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> mysqlclient<br></code></pre></td></tr></table></figure></li><li><p>ORM可以帮助我们做的两件事</p><ol><li>创建、修改、删除数据库中的表（不用写SQL语句），但是需要手动创建数据库</li><li>操作表中的数据（不用写SQL语句）</li></ol></li></ol><h2 id="2-创建-连接数据库"><a href="#2-创建-连接数据库" class="headerlink" title="2. 创建&#x2F;连接数据库"></a>2. 创建&#x2F;连接数据库</h2><ol><li><p>创建数据库</p><ol><li>启动MySQL服务:<code>mysql -u root -p</code><br> <code>Enter password:Pooh_0505</code></li><li>自带的工具创建数据库：<code>create database 数据库名字 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</code></li><li>查看mysql目录下文件夹：<code>show databases;</code> <div style="text-align:center"> <img src="/img/mysql_advance_pic/3.jpg" alt="图片描述"> </div></li></ol></li><li><p>连接数据库</p><ol><li>在settings.py文件中进行配置和修改,连接MySQL</li></ol> <div style="text-align:center">     <img src="/img/mysql_advance_pic/4.jpg" alt="图片描述"> </div>   <ol start="2"><li>注释掉原有DATABASES数据，重新写入 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">DATABASES = &#123;<br><span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>    <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>, <span class="hljs-comment"># 链接mysql数据库</span><br>    <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;mysqltest&#x27;</span>,  <span class="hljs-comment"># 数据库名字</span><br>    <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,      <span class="hljs-comment"># 用户名字，默认是root</span><br>    <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;Pooh_0505&#x27;</span>,    <span class="hljs-comment"># 用户密码</span><br>    <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,    <span class="hljs-comment"># 那台机器安装了MySQL</span><br>    <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-string">&#x27;3306&#x27;</span>,   <span class="hljs-comment"># 端口含默认3306</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="3-django操作表"><a href="#3-django操作表" class="headerlink" title="3. django操作表"></a>3. django操作表</h2><h3 id="1-创建表-级联删除-置空"><a href="#1-创建表-级联删除-置空" class="headerlink" title="1. 创建表  - 级联删除&amp;置空*"></a>1. 创建表  - 级联删除&amp;置空*</h3><ol><li>app.【models】文件夹书写，确定表的格式<ol><li>此时数据库表的名称为数据库的名称 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br>母亲<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span>(models.Model):<br>    <span class="hljs-string">&#x27;&#x27;&#x27; 部门表 &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># django会自动补充 自增id列</span><br>    title = models.CharField(verbose_name=<span class="hljs-string">&#x27;标题&#x27;</span>, max_length=<span class="hljs-number">32</span>)<br><br>---------------------------------------------------------------------<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    name = models.CharField(verbose_name=<span class="hljs-string">&#x27;姓名&#x27;</span>, max_length=<span class="hljs-number">16</span>)<br>    password = models.CharField(verbose_name=<span class="hljs-string">&#x27;密码&#x27;</span>, max_length=<span class="hljs-number">64</span>)<br>    age = models.IntegerField(verbose_name=<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>    <span class="hljs-comment"># 长度最长为10，包含2位小数，未输入数字则显示为0</span><br>    account = models.DecimalField(verbose_name=<span class="hljs-string">&#x27;账户余额&#x27;</span>, max_length=<span class="hljs-number">10</span>, decimal_places=<span class="hljs-number">2</span>, default=<span class="hljs-number">0</span>, max_digits=<span class="hljs-number">100000</span>)<br>    creat_time = models.DateTimeField(verbose_name=<span class="hljs-string">&#x27;入职时间&#x27;</span>)<br><br>    <span class="hljs-comment"># 无约束</span><br>    <span class="hljs-comment"># depart_id = models.BigIntegerField(verbose_name=&#x27;部门ID&#x27;)</span><br><br>    <span class="hljs-comment"># 有约束 - 与另一张表进行联表</span><br>    <span class="hljs-comment"># to 与那张表关联</span><br>    <span class="hljs-comment"># to field 与表中的那一列关联</span><br>    <span class="hljs-comment"># 在创建表写入department后，django会自动生成department_id</span><br><br>    <span class="hljs-comment"># 部门表删除</span><br>    <span class="hljs-comment"># 级联删除 - 若母表删除，子表对应元素的行会同步删除</span><br>    <span class="hljs-comment"># depart = models.ForeignKey(to=&quot;Department&quot;, to_field=&quot;id&quot;, on_delete=models.CASCADE)</span><br><br>    <span class="hljs-comment"># 置空 - 若母表删除，子表对应的元素会置空</span><br>    depart = models.ForeignKey(to=<span class="hljs-string">&quot;Department&quot;</span>, to_field=<span class="hljs-string">&quot;id&quot;</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, on_delete=models.SET_NULL)<br><br>    <span class="hljs-comment"># 在django中做的约束</span><br>    gender_choices = (<br>        (<span class="hljs-number">1</span>, <span class="hljs-string">&quot;男&quot;</span>),<br>        (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;女&quot;</span>),<br>    )<br>    gender = models.SmallIntegerField(verbose_name=<span class="hljs-string">&quot;性别&quot;</span>, choices=gender_choices)<br></code></pre></td></tr></table></figure></li></ol></li></ol><div style="text-align:center">    <img src="/img/mysql_advance_pic/5.jpg" alt="图片描述"></div><ol start="2"><li><p>在pycharm终端解释器执行，余MySQL中生成对应的表</p><ol><li><p>方法1：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure></li><li><p>方法2:</p><ol><li><p>Tools - Run manage.py Task</p> <div style="text-align:center"> <img src="/img/mysql_advance_pic/5.jpg" alt="图片描述"> </div></li><li><p>在下方终端输入</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">makemigrations<br>migrate<br></code></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>运行后会自动创建【settings】已经注册项中的所有表</p><div style="text-align:center;gap:5px"> <img src="/img/mysql_advance_pic/6.jpg" alt="图片描述" style="zoom:55%;"> <img src="/img/mysql_advance_pic/7.jpg" alt="图片描述" style="zoom:95%;"></div></li></ol><h3 id="2-删除表"><a href="#2-删除表" class="headerlink" title="2. 删除表"></a>2. 删除表</h3><ol><li><p>app.【models】文件夹注释表格内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-comment"># class UserInfo(models.Model):</span><br><span class="hljs-comment">#     name = models.CharField(max_length=32)</span><br><span class="hljs-comment">#     password = models.CharField(max_length=64)</span><br><span class="hljs-comment">#     age = models.IntegerField()</span><br></code></pre></td></tr></table></figure></li><li><p>在pycharm终端解释器重新执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure></li><li><p>【models】注释内容后，再次终端执行，将删除数据库中的内容</p></li></ol><h3 id="3-修改表"><a href="#3-修改表" class="headerlink" title="3. 修改表"></a>3. 修改表</h3><ol><li><p>app.【models.py】写入数据库相关内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    name = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    password = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    age = models.IntegerField()<br>    <span class="hljs-comment"># 新增项</span><br>    key = models.IntegerField()<br></code></pre></td></tr></table></figure></li><li><p>在pycharm终端解释器执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure></li><li><p>【models】中添加新内容后，再次终端执行。在表中新增列时，由于已存在列中可能已有数据，所以新增列必须要指定对应的数据，此时有接下来三个选项</p><ol><li>手动输入一个值</li><li>设定默认值：<code>age = models.IntegerField(default=2)</code></li><li>允许为空：<code>age = models.IntegerField(null=True, blank=True)</code></li></ol></li></ol><h3 id="4-操作后的同步数据库-验证结果"><a href="#4-操作后的同步数据库-验证结果" class="headerlink" title="4. 操作后的同步数据库+验证结果"></a>4. 操作后的同步数据库+验证结果</h3><ol><li>同步数据库<br>在pycharm终端解释器执行，余MySQL中生成对应的表</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br></code></pre></td></tr></table></figure><ol start="2"><li>验证结果：<br>访问mysql：<code>mysql -u root -p</code><br>重置密码：<code>set password = password(&quot;Pooh_0505&quot;)</code><br>查看mysql目录下文件夹：<code>show databases;</code><br>进入数据库：<code>use 数据库名字；</code><br>查看文件夹下所有的数据表：<code>show tables；</code><br>查看新建表中的数据：<code>desc 数据表名;</code><br>查看新建表中的数据：<code>select * from 表的名称;</code><div style="text-align:center"> <img src="/img/mysql_advance_pic/9.jpg" alt="图片描述"></div></li></ol><h3 id="5-Django操作表-新建、删除、查找、更新"><a href="#5-Django操作表-新建、删除、查找、更新" class="headerlink" title="5. Django操作表 - 新建、删除、查找、更新"></a>5. Django操作表 - 新建、删除、查找、更新</h3><ol><li><p>app.【models.py】写入数据库相关内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">数据表名</span>(models.Model):<br>    name = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    password = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    age = models.IntegerField()<br></code></pre></td></tr></table></figure></li><li><p>app.【views.py】写入表相关内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">orm</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 新建</span><br>    数据表名.objects.create(title=<span class="hljs-string">&quot;销售部&quot;</span>）<br>    <br>    <span class="hljs-comment"># 删除</span><br>    数据表名.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>).delete()<br>    数据表名.objects.<span class="hljs-built_in">all</span>().delete()<br>    <br>    -------------------------------------------------<br>    <span class="hljs-comment"># 查找</span><br>    <span class="hljs-comment"># 获取符合条件的所有数据</span><br>    data_list = [对象，对象，对象] QuerySet类型<br>    data_list = 数据表名.objects.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> data_list:<br>        <span class="hljs-built_in">print</span>(obj.<span class="hljs-built_in">id</span>, obj.name)<br>    <br>    <span class="hljs-comment"># 将数据传递给html，进行前端展示    </span><br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&quot;**.html&quot;</span>,&#123;<span class="hljs-string">&quot;data_list&quot;</span>:data_list&#125;)<br>        <br>    --------------------------------------------------        <br>    <span class="hljs-comment"># 获取符合条件的第一条数据【对象】</span><br>    row_obj = 数据表名.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>).first<br>    <span class="hljs-built_in">print</span>(row_obj.<span class="hljs-built_in">id</span>, row_obj.name)<br>    <br>    <span class="hljs-comment"># 更新数据</span><br>    数据表名.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>).update(age=<span class="hljs-number">999</span>)<br>    数据表名.objects.<span class="hljs-built_in">all</span>().update(age=<span class="hljs-number">999</span>)<br>    <br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;成功&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol><h1 id="三、-Form组件与ModelForm组件"><a href="#三、-Form组件与ModelForm组件" class="headerlink" title="三、 Form组件与ModelForm组件"></a>三、 Form组件与ModelForm组件</h1><h2 id="1-优势"><a href="#1-优势" class="headerlink" title="1. 优势"></a>1. 优势</h2><p>以新建用户为例：</p><ol><li>原始方式思路：不会采用【麻烦】</li></ol><ul><li>用户提交数据没有校验</li><li>错误，页面上应该有错误提示</li><li>页面上，每一个字段都需要我们重新写一遍</li><li>关联的数据，手动去获取，并循环展示在界面</li></ul><ol start="2"><li>Django组件</li></ol><ul><li>Form组件【小简便】</li><li>ModelForm【最简便】</li></ul><h2 id="2-展示信息列表"><a href="#2-展示信息列表" class="headerlink" title="2. 展示信息列表"></a>2. 展示信息列表</h2><ol><li><p><code>models.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DOU_project_basic_information_list</span>(models.Model):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;DOU 项目基础信息表&#x27;&#x27;&#x27;</span><br>    project_name = models.CharField(verbose_name=<span class="hljs-string">&#x27;项目名称&#x27;</span>, max_length=<span class="hljs-number">16</span>)<br>    test_rounds = models.CharField(verbose_name=<span class="hljs-string">&#x27;测试轮次&#x27;</span>, max_length=<span class="hljs-number">32</span>)<br>    test_time = models.CharField(verbose_name=<span class="hljs-string">&#x27;测试时间&#x27;</span>, max_length=<span class="hljs-number">64</span>)<br>    hardware_version = models.CharField(verbose_name=<span class="hljs-string">&#x27;硬件版本&#x27;</span>, max_length=<span class="hljs-number">16</span>)<br>    firmware_version = models.CharField(verbose_name=<span class="hljs-string">&#x27;固件版本&#x27;</span>, max_length=<span class="hljs-number">32</span>)<br>    app_version = models.CharField(verbose_name=<span class="hljs-string">&#x27;app版本&#x27;</span>, max_length=<span class="hljs-number">32</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>url.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;ppc_test_center/DOU/&#x27;</span>, views.ppc_test_center_DOU),<br></code></pre></td></tr></table></figure></li><li><p><code>utils.form.py</code> - 用于bootstrap美化models</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DOUProjectForm</span>(<span class="hljs-title class_ inherited__">BootStrapModelForm</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.DOU_project_basic_information_list<br>        fields = <span class="hljs-string">&quot;__all__&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_test_center_DOU</span>(<span class="hljs-params">request</span>):<br>    DOU_project_form = DOUProjectForm()<br>    data_list = DOU_project_basic_information_list.objects.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;data_list&#x27;</span>, data_list)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;ppc_test_center_DOU.html&quot;</span>, &#123;<span class="hljs-string">&quot;data_list&quot;</span>: data_list&#125;)<br></code></pre></td></tr></table></figure></li><li><p><code>mysql_info_list_test.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>项目基础信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/mysql_model_form_add_test/&quot;</span>&gt;</span>model_form添加信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>项目名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>测试轮次<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>测试时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>硬件版本<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>固件版本<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>APP版本<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        &#123;% for singo_data_list in data_list%&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;singo_data_list.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;singo_data_list.project_name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;singo_data_list.test_rounds&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;singo_data_list.test_time&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;singo_data_list.hardware_version&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;singo_data_list.firmware_version&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;singo_data_list.app_version&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/mysql_delete_test/?nid=&#123;&#123; singo_data_list.id &#125;&#125;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="3-添加信息"><a href="#3-添加信息" class="headerlink" title="3. 添加信息"></a>3. 添加信息</h2><p>因为添加信息的列表头部分，已经在models.py文件中写入，以下方法较为简便调用</p><ol><li><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModelForm</span>(forms.ModelForm):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.DOU_project_basic_information_list<br>        <span class="hljs-comment"># 选择数据库中的所有字段</span><br>        fields = <span class="hljs-string">&quot;__all__&quot;</span><br>        <span class="hljs-comment"># 选择数据库中的某些字段</span><br>        <span class="hljs-comment"># fields = [&#x27;project_name&#x27;, &#x27;test_rounds&#x27;, &#x27;test_time&#x27;, &#x27;hardware_version&#x27;, &#x27;firmware_version&#x27;, &#x27;app_version&#x27;]</span><br>        <span class="hljs-comment"># 选择数据库中除了某字段</span><br>        <span class="hljs-comment"># exclude = [&#x27;project_name&#x27;]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_test_center_DOU_add_project_basic_information</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># return render(request, &quot;ppc_test_center_DOU_add_project_basic_information.html&quot;)</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        form = UserModelForm()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;ppc_test_center_DOU_add_project_basic_information.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        form = UserModelForm(data=request.POST)<br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            form.save()<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/ppc_test_center/DOU/&#x27;</span>)<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/ppc_test_center/DOU/&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>url.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;ppc_test_center/DOU/add_project_basic_information/&#x27;</span>, views.ppc_test_center_DOU_add_project_basic_information),<br></code></pre></td></tr></table></figure></li><li><p><code>ppc_test_center_DOU_add_project_basic_information.html</code></p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% load staticfiles %&#125;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;&#123;% static &quot;plugins/bootstrap-3.4.1/css/bootstrap.css&quot; %&#125;&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;&#123;% static &quot;plugins/bootstrap-3.4.1/js/bootstrap.js&quot; %&#125;&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;&#123;% static &quot;plugins/font-awesome-4.7.0/css/font-awesome.css&quot; %&#125;&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span><br>        &#123;% csrf_token %&#125;<br><br>        &#123;% for field in form %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; field.label &#125;&#125; : &#123;&#123; field &#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span> &gt;</span>&#123;&#123; field.errors.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/ppc_test_center/DOU/&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-编辑信息"><a href="#4-编辑信息" class="headerlink" title="4. 编辑信息"></a>4. 编辑信息</h2><ol><li><p><code>url.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;ppc_test_center/DOU/edit_project_basic_information/&#x27;</span>, views.ppc_test_center_DOU_edit_project_basic_information),<br></code></pre></td></tr></table></figure></li><li><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModelForm</span>(forms.ModelForm):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.DOU_project_basic_information_list<br>        <span class="hljs-comment"># 选择数据库中的所有字段</span><br>        fields = <span class="hljs-string">&quot;__all__&quot;</span><br>        <span class="hljs-comment"># 选择数据库中的某些字段</span><br>        <span class="hljs-comment"># fields = [&#x27;project_name&#x27;, &#x27;test_rounds&#x27;, &#x27;test_time&#x27;, &#x27;hardware_version&#x27;, &#x27;firmware_version&#x27;, &#x27;app_version&#x27;]</span><br>        <span class="hljs-comment"># 选择数据库中除了某字段</span><br>        <span class="hljs-comment"># exclude = [&#x27;project_name&#x27;]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_test_center_DOU_edit_project_basic_information</span>(<span class="hljs-params">request</span>):<br>    nid = request.GET.get(<span class="hljs-string">&#x27;nid&#x27;</span>)<br>    row_object = DOU_project_basic_information_list.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;  编辑用户 &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># 根据ID去数据库获取要编译的那一行数据（对象）</span><br>        form = UserModelForm(instance=row_object)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;ppc_test_center_DOU_edit_project_basic_information.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        form = UserModelForm(data=request.POST, instance=row_object)<br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            form.save()<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/ppc_test_center/DOU/&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/ppc_test_center/DOU/&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>ppc_test_center_DOU_edit_project_basic_information.html</code></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% load staticfiles %&#125;<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> href=<span class="hljs-string">&#x27;&#123;% static &quot;plugins/bootstrap-3.4.1/css/bootstrap.css&quot; %&#125;&#x27;</span>&gt;<br>    &lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> href=<span class="hljs-string">&#x27;&#123;% static &quot;plugins/bootstrap-3.4.1/js/bootstrap.js&quot; %&#125;&#x27;</span>&gt;<br>    &lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> href=<span class="hljs-string">&#x27;&#123;% static &quot;plugins/font-awesome-4.7.0/css/font-awesome.css&quot; %&#125;&#x27;</span>&gt;<br><br><br>    &lt;style&gt;<br><br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;form method=<span class="hljs-string">&quot;post&quot;</span> novalidate&gt;<br>        &#123;% csrf_token %&#125;<br><br>        &#123;% <span class="hljs-keyword">for</span> field <span class="hljs-keyword">in</span> form %&#125;<br>            &lt;div&gt;&#123;&#123; field.label &#125;&#125; : &#123;&#123; field &#125;&#125; &lt;span style=<span class="hljs-string">&quot;color: red&quot;</span> &gt;&#123;&#123; field.errors<span class="hljs-number">.0</span> &#125;&#125;&lt;/span&gt;&lt;/div&gt;<br>        &#123;% endfor %&#125;<br>    &lt;button&gt;&lt;a href=<span class="hljs-string">&quot;/ppc_test_center/DOU/&quot;</span>&gt;取消&lt;/a&gt;&lt;/button&gt;<br>    &lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;更改&quot;</span>&gt;<br>    &lt;/form&gt;<br></code></pre></td></tr></table></figure><h2 id="4-调用不同数据库位置"><a href="#4-调用不同数据库位置" class="headerlink" title="4. 调用不同数据库位置"></a>4. 调用不同数据库位置</h2><div style="text-align:center">    <img src="/img/mysql_advance_pic/10.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/mysql_advance_pic/11.jpg" alt="图片描述"></div><h2 id="5-删除信息"><a href="#5-删除信息" class="headerlink" title="5. 删除信息"></a>5. 删除信息</h2><ol><li><p><code>url.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;ppc_test_center/DOU/delete_project_basic_information/&#x27;</span>, views.ppc_test_center_DOU_delete_project_basic_information),<br></code></pre></td></tr></table></figure></li><li><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_test_center_DOU_delete_project_basic_information</span>(<span class="hljs-params">request</span>):<br>    nid = request.GET.get(<span class="hljs-string">&#x27;nid&#x27;</span>)<br>    DOU_project_basic_information_list.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).delete()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/ppc_test_center/DOU/&quot;</span>)<br></code></pre></td></tr></table></figure><p>删除界面html同基础展示界面<code>htmlmysql_info_list_test.html</code></p></li></ol><h2 id="6-搜索"><a href="#6-搜索" class="headerlink" title="6. 搜索"></a>6. 搜索</h2><div style="text-align:center">    <img src="/img/mysql_advance_pic/12.jpg" alt="图片描述"></div><ol><li><p>html</p><div style="text-align:center"> <img src="/img/mysql_advance_pic/13.jpg" alt="图片描述"></div></li><li><p>views</p><div style="text-align:center"> <img src="/img/mysql_advance_pic/14.jpg" alt="图片描述"></div></li></ol><h2 id="7-分页"><a href="#7-分页" class="headerlink" title="7. 分页"></a>7. 分页</h2><ol><li>分页的基本实现<div style="text-align:center"> <img src="/img/mysql_advance_pic/15.jpg" alt="图片描述"></div></li></ol><div style="text-align:center">    <img src="/img/mysql_advance_pic/16.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/mysql_advance_pic/17.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/mysql_advance_pic/18.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/mysql_advance_pic/19.jpg" alt="图片描述"></div><ol start="2"><li>分页的封装<div style="text-align:center"> <img src="/img/mysql_advance_pic/20.jpg" alt="图片描述"></div></li></ol><h2 id="8-管理员"><a href="#8-管理员" class="headerlink" title="8. 管理员"></a>8. 管理员</h2><ol><li><p>建表</p><div style="text-align:center"> <img src="/img/mysql_advance_pic/21.jpg" alt="图片描述"></div></li><li><p>样式</p><div style="text-align:center"> <img src="/img/mysql_advance_pic/22.jpg" alt="图片描述"></div></li><li><p>管理员添加</p><div style="text-align:center"> <img src="/img/mysql_advance_pic/23.jpg" alt="图片描述"></div></li></ol><div style="text-align:center">    <img src="/img/mysql_advance_pic/24.jpg" alt="图片描述"></div><ol start="4"><li>md5加密 - 非明文数据存入数据库<div style="text-align:center"> <img src="/img/mysql_advance_pic/25.jpg" alt="图片描述"></div></li></ol><ul><li><code>views</code><div style="text-align:center">  <img src="/img/mysql_advance_pic/26.jpg" alt="图片描述"></div></li></ul><h2 id="9-弹出框"><a href="#9-弹出框" class="headerlink" title="9. 弹出框"></a>9. 弹出框</h2><ul><li><p><code>.html</code></p><div style="text-align:center">  <img src="/img/mysql_advance_pic/27.jpg" alt="图片描述"></div></li><li><p><code>views.py</code></p><div style="text-align:center">  <img src="/img/mysql_advance_pic/28.jpg" alt="图片描述"></div></li><li><p><code> 保存</code></p><div style="text-align:center">  <img src="/img/mysql_advance_pic/29.jpg" alt="图片描述"></div></li><li><p><code>views.py</code><br>免除csrf认证</p><div style="text-align:center">  <img src="/img/mysql_advance_pic/30.jpg" alt="图片描述"></div></li></ul><div style="text-align:center">    <img src="/img/mysql_advance_pic/31.jpg" alt="图片描述"></div><h1 id="四、tips"><a href="#四、tips" class="headerlink" title="四、tips"></a>四、tips</h1><h2 id="1-设置数据库元素允许非空"><a href="#1-设置数据库元素允许非空" class="headerlink" title="1. 设置数据库元素允许非空"></a>1. 设置数据库元素允许非空</h2><ol><li>email字段被定义为非必填字段。</li><li>null&#x3D;True：数据库中该字段可以为空</li><li>blank&#x3D;True：表单中该字段可以为空<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyModel</span>(models.Model):     <br>       <br>    email = models.EmailField(null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>)  <span class="hljs-comment">#非必填字段</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="2-建立父、子表单，并将子表单的某值固定设置，为其对应的parent-id"><a href="#2-建立父、子表单，并将子表单的某值固定设置，为其对应的parent-id" class="headerlink" title="2. 建立父、子表单，并将子表单的某值固定设置，为其对应的parent_id"></a>2. 建立父、子表单，并将子表单的某值固定设置，为其对应的parent_id</h2><ol><li>在子页面get请求，获取子表中，所有含有parent_id的元素</li><li>在子页面post请求，提交表单，将parent_id设为对应父表的nid</li></ol><ul><li><p><code>子表 models</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DOU_model_list</span>(models.Model):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;DOU 模型表 (子表1)&#x27;&#x27;&#x27;</span><br>    parent_id = models.CharField(verbose_name=<span class="hljs-string">&#x27;父表id&#x27;</span>, max_length=<span class="hljs-number">8</span>, null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>)  <br>    test_scene = models.CharField(verbose_name=<span class="hljs-string">&#x27;测试场景&#x27;</span>, max_length=<span class="hljs-number">64</span>)<br>    typical_test_time = models.CharField(verbose_name=<span class="hljs-string">&#x27;典型场景测试次数&#x27;</span>, max_length=<span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>子表 views</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_DOU_base_model</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;获取父表的nid&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;nid&#x27;</span>, nid)<br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;获取子表中，所有含有父表id的元素&#x27;&#x27;&#x27;</span><br>    data_list = DOU_model_list.objects.<span class="hljs-built_in">filter</span>(parent_id=nid).<span class="hljs-built_in">all</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;data_list_nid&#x27;</span>, data_list)<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-string">&#x27;&#x27;&#x27;根据数据库信息，获取子表要编译的数据（对象）&#x27;&#x27;&#x27;</span><br>        form = UserModelForm2()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;get_form&#x27;</span>, form)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;ppc_DOU_base_model.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form, <span class="hljs-string">&#x27;nid&#x27;</span>: nid, <span class="hljs-string">&#x27;data_list&#x27;</span>: data_list&#125;)<br><br><br>    <span class="hljs-string">&#x27;&#x27;&#x27; 向数据库中添加信息 &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        form = UserModelForm2(data=request.POST, initial=&#123;<span class="hljs-string">&#x27;父表id&#x27;</span>: nid&#125;)<br>        <span class="hljs-string">&#x27;&#x27;&#x27;此时子表中的 parent_id 应对应为空&#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;post_form1&#x27;</span>, form)<br><br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            form = form.save(commit=<span class="hljs-literal">False</span>)<br>            <span class="hljs-string">&#x27;&#x27;&#x27;将 nid设为 parent_id 后一起提交至mysql&#x27;&#x27;&#x27;</span><br>            form.parent_id = nid  <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;post_form2&#x27;</span>, form)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;form.parent_id&#x27;</span>, form.parent_id)<br>            form.save()<br>            <br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/ppc_test_center/DOU/&#123;&#125;/base_model/&#x27;</span>.<span class="hljs-built_in">format</span>(nid))<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/ppc_test_center/DOU/&#123;&#125;/base_model/&#x27;</span>.<span class="hljs-built_in">format</span>(nid))<br></code></pre></td></tr></table></figure></li><li><p><code>子表 html</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;form method=<span class="hljs-string">&quot;post&quot;</span> novalidate&gt;<br>    &#123;% csrf_token %&#125;<br><br>    &#123;% <span class="hljs-keyword">for</span> field <span class="hljs-keyword">in</span> form %&#125;<br>        <br>        &lt;!-- 父表<span class="hljs-built_in">id</span>在post提交表单后，直接赋值nid --&gt;<br>        &#123;% <span class="hljs-keyword">if</span> field.label != <span class="hljs-string">&#x27;父表id&#x27;</span> %&#125;<br>            &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>                &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;&#123;&#123; field.label &#125;&#125; : &#123;&#123; field &#125;&#125; &lt;/label&gt;<br>                &lt;span style=<span class="hljs-string">&quot;color: red&quot;</span>&gt;&#123;&#123; field.errors<span class="hljs-number">.0</span> &#125;&#125;&lt;/span&gt;<br>            &lt;/div&gt;<br>        &#123;% endif %&#125;<br>    &#123;% endfor %&#125;<br><br>    &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;<br>        &lt;button <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> data-dismiss=<span class="hljs-string">&quot;modal&quot;</span>&gt;取消&lt;/button&gt;<br>        &lt;button <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;提交&lt;/button&gt;<br>    &lt;/div&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-mysql-前端下拉框，设置表单输入的信息"><a href="#3-mysql-前端下拉框，设置表单输入的信息" class="headerlink" title="3. mysql 前端下拉框，设置表单输入的信息"></a>3. mysql 前端下拉框，设置表单输入的信息</h2><ol><li><code>models.py</code><ol><li>下拉选择：<code>choices=level_choices</code></li><li>默认结果为…：<code>default=1</code></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrettyNum</span>(models.Model):<br>    <br>    level_choices = (<br>        (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;一级&#x27;</span>),<br>        (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;二级&#x27;</span>),<br>        (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;三级&#x27;</span>),<br>    )<br>    level = models.CharField(verbose_name=<span class="hljs-string">&#x27;级别&#x27;</span>, choices=level_choices, default=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><div style="text-align:center">    <img src="/img/mysql_advance_pic/32.jpg" alt="图片描述"></div><h2 id="4-makemigrations-migrate"><a href="#4-makemigrations-migrate" class="headerlink" title="4. makemigrations &amp; migrate"></a>4. makemigrations &amp; migrate</h2><ol><li>彻底删除数据库中的内容<br>参考链接：<a href="https://blog.csdn.net/pythonstrat">https://blog.csdn.net/pythonstrat</a></li></ol><div style="text-align:center">    <img src="/img/mysql_advance_pic/33.jpg" alt="图片描述"></div><h2 id="5-前端展示数据库的标签"><a href="#5-前端展示数据库的标签" class="headerlink" title="5. 前端展示数据库的标签"></a>5. 前端展示数据库的标签</h2><ul><li><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">basic_score_singo_model</span>(<span class="hljs-params">request,modelName</span>):<br>    model_message_form = audioScoreForm()<br></code></pre></td></tr></table></figure></li><li><p><code>html</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> singo_model_form <span class="hljs-keyword">in</span> model_message_form %&#125;<br>    &#123;&#123; singo_model_form.label &#125;&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-数据库-后端-前端传值思路"><a href="#6-数据库-后端-前端传值思路" class="headerlink" title="6. 数据库-后端-前端传值思路"></a>6. 数据库-后端-前端传值思路</h2><ul><li><p><code>后端views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;此表单内的所有数值&#x27;&#x27;&#x27;</span><br>model_list = score_list.objects.<span class="hljs-built_in">all</span>()<br><br><span class="hljs-keyword">for</span> singo_list <span class="hljs-keyword">in</span> model_list:<br>    all_dict[singo_list.<span class="hljs-built_in">id</span>] = [singo_list.audio_project_name, singo_list.audio_test_rounds]<br></code></pre></td></tr></table></figure></li><li><p><code>前端html</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> all_dict.items %&#125;<br><br>    &lt;tr&gt;<br>        &lt;td&gt;&#123;&#123; key &#125;&#125;&lt;/td&gt;<br>        &#123;% <span class="hljs-keyword">for</span> singo_value <span class="hljs-keyword">in</span> value %&#125;<br>            &lt;td&gt;&#123;&#123; singo_value &#125;&#125;&lt;/td&gt;<br>    <br>        &#123;% endfor %&#125;<br>    &lt;/tr&gt;<br><br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="7-数据库内容处理"><a href="#7-数据库内容处理" class="headerlink" title="7. 数据库内容处理"></a>7. 数据库内容处理</h2><ol><li>字典形式调用</li><li>getattr形式取值</li><li>列表形式填值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> audio_score_list, touch_score_list, display_score_list, bluetooth_score_list, NFC_score_list, performance_score_list, DOU_score_list<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">clean_for_basic_score_board</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;清洗by模块天梯图数据&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_for_model_ladder_board</span>(<span class="hljs-params">self, model_ladder_select_device</span>):<br>        database_first = &#123;<span class="hljs-string">&#x27;音频&#x27;</span>: audio_score_list, <span class="hljs-string">&#x27;触控&#x27;</span>: touch_score_list, <span class="hljs-string">&#x27;显示&#x27;</span>: display_score_list, <span class="hljs-string">&#x27;蓝牙&#x27;</span>: bluetooth_score_list,<br>                                   <span class="hljs-string">&#x27;NFC&#x27;</span>: NFC_score_list, <span class="hljs-string">&#x27;性能&#x27;</span>: performance_score_list, <br>                                   <span class="hljs-string">&#x27;功耗&#x27;</span>: DOU_score_list&#125;<br>        database_second = &#123;audio_score_list: [<span class="hljs-string">&#x27;audio_project_name&#x27;</span>, <span class="hljs-string">&#x27;audio_test_rounds&#x27;</span>, <br>        <span class="hljs-string">&#x27;audio_communicate_by_telephone&#x27;</span>, <span class="hljs-string">&#x27;audio_alarm_clock&#x27;</span>,<span class="hljs-string">&#x27;audio_countdown&#x27;</span>, <br>        <span class="hljs-string">&#x27;audio_recorder&#x27;</span>, <span class="hljs-string">&#x27;audio_find_my_phone&#x27;</span>, <span class="hljs-string">&#x27;audio_stopwatch&#x27;</span>, <span class="hljs-string">&#x27;audio_music_control&#x27;</span>,<br>        <span class="hljs-string">&#x27;audio_voice_assistant&#x27;</span>]&#125;<br><br>        select_score_list = database_correspondence_first[model_ladder_select_device]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;select_score_list&#x27;</span>, select_score_list)<br><br>        select_basic_score_list = database_correspondence_second[select_score_list]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;select_basic_score_list&#x27;</span>, select_basic_score_list)<br><br>        <span class="hljs-string">&#x27;&#x27;&#x27;进入dou项目基础信息数据库 获取数据&#x27;&#x27;&#x27;</span><br>        all_select_device = select_score_list.objects.<span class="hljs-built_in">filter</span>().<span class="hljs-built_in">all</span>()<br><br>        <span class="hljs-comment"># Create an empty list to store the data</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;打印每个记录的字段值&#x27;&#x27;&#x27;</span><br>        all_database_correspondence_message = []<br>        <span class="hljs-keyword">for</span> singo_select_device <span class="hljs-keyword">in</span> all_select_device:<br>            <span class="hljs-comment"># Create a new list for each record</span><br>            record = []<br>            <span class="hljs-keyword">for</span> singo_select_basic_score_list <span class="hljs-keyword">in</span> select_basic_score_list:<br>                value = <span class="hljs-built_in">getattr</span>(singo_select_device, singo_select_basic_score_list)<br>                record.append(value)<br><br>            all_database_correspondence_message.append(record)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;all_database_correspondence_message&#x27;</span>, all_database_correspondence_message)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>后端</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
      <tag>后端</tag>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2023/12/05/MySQL/"/>
    <url>/2023/12/05/MySQL/</url>
    
    <content type="html"><![CDATA[<ul><li>学习链接：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=6&vd_source=4cf7b60c223a665538a4d958765c91a5">https://www.bilibili.com/video/BV1Kr4y1i7ru?</a></li></ul><h1 id="一、MySQL的安装-配置"><a href="#一、MySQL的安装-配置" class="headerlink" title="一、MySQL的安装&amp;配置"></a>一、MySQL的安装&amp;配置</h1><ol><li><p>下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p></li><li><p>下载补丁文件</p><ol><li>vcredist_x64.exe：<a href="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=40784">https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=40784</a></li><li>dxwebsetup.exe：<a href="https://www.pcsoft.com.cn/soft/121449.html">https://www.pcsoft.com.cn/soft/121449.html</a></li><li>安装此补丁时，不用勾选下载tools</li></ol></li><li><p>下载mysql<br>注：可以选择5.7.31版本，既支持windows也支持mac</p><div style="text-align:center"> <img src="/img/mysql_base_pic/2.jpg" alt="图片描述" style="zoom:60%;"></div></li><li><p>配置</p><ol><li>解压之后，在此目录下创建my.ini配置文件</li><li>编写配置文件，如图所示<div style="text-align:center;gap:5px"> <img src="/img/mysql_base_pic/3.jpg" alt="图片描述" style="zoom:45%;"> <img src="/img/mysql_base_pic/4.jpg" alt="图片描述"></div></li></ol></li><li><p>后续内容可参考此文档：<a href="https://blog.csdn.net/m0_72755989/article/details/127388356">https://blog.csdn.net/m0_72755989/article/details/127388356</a></p></li><li><p>出现此页面代表链接成功，第一次登录无密码</p><div style="text-align:center"> <img src="/img/mysql_base_pic/5.jpg" alt="图片描述"></div></li><li><p>登录后设置密码set password &#x3D; password(“Pooh_0505”)</p></li></ol><h1 id="二、-MySQL基础语句"><a href="#二、-MySQL基础语句" class="headerlink" title="二、 MySQL基础语句"></a>二、 MySQL基础语句</h1><h2 id="1-通用语法"><a href="#1-通用语法" class="headerlink" title="1. 通用语法"></a>1. 通用语法</h2><ol><li>SQL语句可以单行或多行书写，以分号结尾</li><li>SQL语句可以使用空格&#x2F;缩进，来增强语句的可读性</li><li>MYSQL数据库的SQL语句不区分大小写，关键字建议使用大写</li><li>注释：<ol><li>单行注释：– 注释内容 或 # 注释内容</li><li>多行注释：&#x2F;* 注释内容 *&#x2F;</li></ol></li></ol><h2 id="2-数据定义语言-ddl"><a href="#2-数据定义语言-ddl" class="headerlink" title="2. 数据定义语言 - ddl"></a>2. 数据定义语言 - ddl</h2><ul><li>用来定义数据库对象（数据库，表，字段）</li></ul><h3 id="1-数据库-操作"><a href="#1-数据库-操作" class="headerlink" title="1. 数据库 - 操作"></a>1. 数据库 - 操作</h3><ol><li>查询<ol><li>查询所有数据库：<mark><code>SHOW DATABASES;</code></mark></li><li>查询当前数据库：<code>SELECT DATABASE();</code></li></ol></li><li>创建数据库：<code>CREATE DATABASE 数据库名称</code></li><li>删除数据库：<code>DROP DATABASE 数据库名称</code></li><li>使用数据库：<mark><code>USE 数据库名称</code></mark></li></ol><h3 id="2-数据表-查询"><a href="#2-数据表-查询" class="headerlink" title="2. 数据表 - 查询"></a>2. 数据表 - 查询</h3><ol><li>查询<ol><li>查询当前数据库所有表：<mark><code>SHOW TABLES;</code></mark></li><li><mark>查询表结构：</mark><code>DESC 表名;</code><ol><li>DESC是describe的缩写，用于获取表的结构信息。</li></ol></li><li>查询指定表的建表语句：<code>SHOW CREATE TABLE 表名;</code></li></ol></li></ol><h3 id="3-数据表-创建"><a href="#3-数据表-创建" class="headerlink" title="3. 数据表 - 创建"></a>3. 数据表 - 创建</h3><ol><li><p>创建表中最后一个字段后面没有逗号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE 表名(<br>字段1 字段1类型[COMMENT 字段1注释],<br>字段2 字段2类型[COMMENT 字段2注释],<br>...<br>字段n 字段n类型[COMMENT 字段n注释]<br>) [COMMENT 表注释];<br></code></pre></td></tr></table></figure></li><li><p>「是否为空」的设计</p><ol><li><p><code>NULL</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `gifshow`.`无标题`  (<br>  `entrance_ksn` varchar(255) NULL COMMENT &#x27;链路入口KSN&#x27;,<br>);<br></code></pre></td></tr></table></figure></li></ol></li><li><p>示例1：</p></li></ol><table><thead><tr><th align="left">id</th><th align="left">name</th><th align="left">age</th><th>gender</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">令狐冲</td><td align="left">28</td><td>男</td></tr><tr><td align="left">2</td><td align="left">风清扬</td><td align="left">68</td><td>男</td></tr><tr><td align="left">3</td><td align="left">东方不败</td><td align="left">32</td><td>男</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tb_user(<br>id int comment&#x27;编号&#x27;,<br>name varchar(50) comment&#x27;姓名&#x27;,<br>age int comment&#x27;年龄&#x27;,<br>gender varchar(1) comment&#x27;性别&#x27;<br>) comment&#x27;用户表&#x27;;<br></code></pre></td></tr></table></figure><ol start="4"><li><p>示例2：</p><p>设计一张员工信息表，要求如下：</p><ol><li>编号（纯数字）</li><li>员工工号（字符串类型，长度不超过10位）</li><li>员工姓名（字符串类型，长度不超过10位）</li><li>性别（男&#x2F;女，存储一个汉字）</li><li>年龄（正常人年龄，不可能存储负数）</li><li>身份证号（18位数，结尾可能是x）</li><li>入职时间（取值年月日即可）</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table emp(<br>id int,<br>workno varchar(10),<br>name varchar(10),<br>gender char(1),<br>age tinyint unsigned,<br>idcard char(18),<br>entrydate date<br>) ;<br></code></pre></td></tr></table></figure><h3 id="3-数据表-修改-删除"><a href="#3-数据表-修改-删除" class="headerlink" title="3. 数据表 - 修改&amp;删除"></a>3. 数据表 - 修改&amp;删除</h3><ol><li><p><mark>添加字段</mark>：<code>alter table 表名 add 字段名 类型（长度） [comment注释][约束]</code></p><ol><li><p><code>alter</code>：改变</p></li><li><p>示例：为emp表添加一个新的字段“昵称”为nickname，类型为varchar(20)</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">add</span> nickname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure></li><li><p>修改数据类型：<code>alter table 表名 modify 字段名 新数据类型（长度）</code></p><ol><li><code>modify</code>：改变</li></ol></li><li><p><mark>修改字段名和字段类型</mark>：<code>alter table 表名 change 旧字段名 新字段名 类型（长度） [comment注释][约束]</code></p><ol><li><code>change</code>：改变</li><li>示例：将emp表的nickname字段修改为username，类型为varchar(30)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table emp change nickname username varchar(30);<br></code></pre></td></tr></table></figure></li><li><p><mark>删除字段</mark>：<code>alter table 表名 drop 字段名</code></p><ol><li><code>drop</code>：删除</li><li>示例：将emp表的字段username删除</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table emp drop username;<br></code></pre></td></tr></table></figure></li><li><p><mark>修改表名</mark>：<code>alter table 表名 rename to 新表名</code></p><ol><li>示例：将emp表的表名修改为employee</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table emp rename to employee;<br></code></pre></td></tr></table></figure></li><li><p><mark>删除表</mark>：<code>drop table 表名;</code></p></li></ol><h2 id="3-数据操作语言"><a href="#3-数据操作语言" class="headerlink" title="3. 数据操作语言"></a>3. 数据操作语言</h2><ul><li>用来对数据库中表的数据记录进行增删改操作</li></ul><ol><li><p><mark>添加数据 - insert into…value</mark></p><ol><li>给指定字段添加数据：<code>insert into 表名(字段名1, 字段名2, ... ) values (值1, 值2, ... );</code></li><li>给全部字段添加数据：<code>insert into 表名 values (值1, 值2, ... );</code></li><li>批量添加数据：<ol><li><code>insert into 表名(字段名1, 字段名2, ... ) values (值1, 值2, ... ),(值1, 值2, ... ),(值1, 值2, ... );</code></li><li><code>insert into 表名 values (值1, 值2, ... ),(值1, 值2, ... ),(值1, 值2, ... );</code></li></ol></li><li>示例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 添加指定字段<br>insert into emplee(id, workno, name, gender, age, idcread, entrydate) values (1, &#x27;2&#x27;, &#x27;Itcast&#x27;, &#x27;男&#x27;， 10, &#x27;123456789012345678&#x27;, &#x27;2000-03-07&#x27;);<br><br># 添加全部字段<br>insert into emplee values (1, &#x27;2&#x27;, &#x27;Itcast&#x27;, &#x27;男&#x27;， 10, &#x27;123456789012345678&#x27;, &#x27;2000-03-07&#x27;);<br><br># 批量添加数据<br>insert into emplee values (1, &#x27;2&#x27;, &#x27;Itcast&#x27;, &#x27;男&#x27;， 10, &#x27;123456789012345678&#x27;, &#x27;2000-03-07&#x27;), (1, &#x27;2&#x27;, &#x27;Itcast&#x27;, &#x27;男&#x27;， 10, &#x27;123456789012345678&#x27;, &#x27;2000-03-07&#x27;);<br></code></pre></td></tr></table></figure></li><li><p><mark>修改数据  - update…set</mark></p><ol><li>修改数据：<code>update 表名 set 字段1=值1, 字段2=值2, ... [where 条件]; </code></li></ol><ul><li>注：修改语句的条件不是必要的。如果没有条件，则会修改整张表的所有数据</li></ul><ol start="2"><li>示例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 修改id为1的数据，将name修改为itheima<br>update employee set name=&quot;itheima&quot; where id=1;<br><br># 修改id为1的数据，将name修改为小明，gender修改为女<br>update employee set name=&quot;itheima&quot;,gender=&quot;女&quot; where id=1;<br><br># 将所有的员工入职日期修改为2000-01-01<br>update employee set entrydate=&quot;2000-01-01&quot;;<br></code></pre></td></tr></table></figure></li><li><p><mark>删除数据 - delete from</mark></p><ol><li>删除数据：<code>delete from 表名[where 条件]</code></li></ol><ul><li>注：修改语句的条件不是必要的。如果没有条件，则会修改整张表的所有数据</li><li>注：delete语句不能删除某一个字段的值，可以使用update将数据设为none</li></ul><ol start="2"><li>示例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 删除gender为女的员工<br>delete from employee where gender=&quot;女&quot;;<br><br># 删除所有员工<br>delete from employee;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-数据查询语言"><a href="#4-数据查询语言" class="headerlink" title="4. 数据查询语言 *"></a>4. 数据查询语言 *</h2><ul><li>用来查询数据库中表的记录</li></ul><h3 id="1-基本查询"><a href="#1-基本查询" class="headerlink" title="1. 基本查询"></a>1. 基本查询</h3><ol><li>查询多个字段<ol><li><code>select 字段1, 字段2, 字段3, ... from 表名;</code></li><li><code>select * from 表名;</code></li></ol></li><li>设置别名：<code>select 字段1[as 别名1], 字段2[as 别名2], ... from 表名;</code></li><li><mark>去除重复记录：<code>select distinct 字段列表 from 表名;</code></mark></li><li>示例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询指定字段 name，workno，age 返回<br>select name,workno,age from emp;<br><br># 查询所有字段返回<br>select * from emp;<br><br># 查询所有员工的工作地址，并起别名<br>select workdress as &#x27;工作地址&#x27; from emp;<br><br># 查询公司员工的上班地址（不要重复）<br>select distinct workdress as &#x27;工作地址&#x27; from emp;<br></code></pre></td></tr></table></figure><h3 id="2-条件查询-where"><a href="#2-条件查询-where" class="headerlink" title="2. 条件查询 - where"></a>2. 条件查询 - where</h3><ol><li>条件查询：<code>select 字段列表 from 表名 where 条件列表;</code></li><li>条件：</li></ol><table><thead><tr><th align="left">比较运算符</th><th align="left">功能</th><th align="left">逻辑运算法</th><th>功能</th></tr></thead><tbody><tr><td align="left">&lt;&gt; 或 !&#x3D;</td><td align="left">不等于</td><td align="left">and 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td align="left">between … and …</td><td align="left">在某个范围之内（含最大值，最小值）</td><td align="left">or 或 ||</td><td>或者（多个条件任意一个成立）</td></tr><tr><td align="left">in(…)</td><td align="left">在in之后的列表中的值，多选一</td><td align="left">not 或 ！</td><td>非，不是</td></tr><tr><td align="left"><mark>like 占位符</mark></td><td align="left"><mark>模糊匹配（_匹配单个字符，%匹配任意个字符）</mark></td><td align="left"></td><td></td></tr><tr><td align="left">is null</td><td align="left">是NULL</td><td align="left"></td><td></td></tr></tbody></table><ol start="3"><li>示例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询没有身份证号的员工信息<br>select * from emp where idcard is null;<br><br># 查询有身份证号的员工信息<br>select * from emp where idcard is not null;<br><br># 查询年龄不等于88的员工信息<br>select * from emp where age != 88;<br><br># 查询年龄在15岁到20岁之间的员工信息<br>select * from emp where age &gt;= 15 and age &lt;=20;<br>select * from emp where age between 15 and 20;<br><br># 查询年龄等于18或20或40的员工信息<br>select * from emp where age = 18 or age = 20 or age = 40；<br>select * from emp where age in (18,20,40);<br><br># 查询姓名为两个字的员工信息<br>select * from emp where name like &#x27;__&#x27;;<br><br># 查询身份证号最后一位是x的员工信息<br>select * from emp where name like &#x27;%x&#x27;;<br>select * from emp where name like &#x27;______________x&#x27;;<br></code></pre></td></tr></table></figure><h3 id="3-聚合函数-count、max、min、avg、sum"><a href="#3-聚合函数-count、max、min、avg、sum" class="headerlink" title="3. 聚合函数 - count、max、min、avg、sum"></a>3. 聚合函数 - count、max、min、avg、sum</h3><ol><li>介绍：将一列数据作为一个整体，尽行纵向计算</li><li>语法：<code>select 聚合函数(字段列表) from 表名;</code></li><li>常见的聚合函数：</li></ol><table><thead><tr><th align="left">函数</th><th align="left">功能</th><th align="left">函数</th><th>功能</th></tr></thead><tbody><tr><td align="left">count</td><td align="left">统计数量</td><td align="left">max</td><td>最大值</td></tr><tr><td align="left">min</td><td align="left">最小值</td><td align="left">avg</td><td>平均值</td></tr><tr><td align="left">sum</td><td align="left">求和</td><td align="left"></td><td></td></tr></tbody></table><ul><li>注：所有null值不参与聚合函数计算</li></ul><ol start="4"><li>示例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 统计该企业员工数量<br>select count(*) from emp;<br>select count(idcard) from emp;<br><br># 统计该企业员工的平均年龄<br>select avg(age) from emp;<br><br># 统计西安地区员工的年龄之和<br>select sum(age) from emp where workdress = &#x27;西安&#x27;<br></code></pre></td></tr></table></figure><h3 id="4-分组查询-group-by"><a href="#4-分组查询-group-by" class="headerlink" title="4. 分组查询 - group by"></a>4. 分组查询 - group by</h3><ol><li>查询方法：<code>select 字段列表 from 表名 [where 条件] group by 分组字段名[having 分组后过滤条件];</code></li><li>where 和 having 区别<ol><li>执行时机不同：where是分组之前进行过滤，不满足where条件的，不参与分组；而having是分组之后对结果进行过滤</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以</li></ol></li><li>注意：<ol><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组函数，查询其他字段无任何意义</li></ol></li><li>示例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 根据性别分组，统计男性员工和女性员工的数量<br>select gender,count(*) from emp group by gender;<br><br># 根据性别分组，统计男性员工和女性员工的平均年龄<br>select gender,avg(age) from emp group by gender;<br><br># 查询年龄小于45的员工，并根据工作地址分组，获取员工数量大于等于3的工作地址<br>select workaddress,count(*) as address_count from emp where age&lt;45 group by workaddress having address_count&gt;=3;<br></code></pre></td></tr></table></figure><h3 id="5-排序查询-order-by"><a href="#5-排序查询-order-by" class="headerlink" title="5. 排序查询 - order by"></a>5. 排序查询 - order by</h3><ol><li>查询方法：<code>select 字段列表 from 表名 order by 字段1 排序方式1, 字段2 排序方式2;</code></li><li>排序方式<ol><li>asc：升序（默认值）</li><li>desc：降序</li></ol></li><li>注意：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</li><li>示例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 根据年龄对公司的员工进行升序排序<br>select * from emp order by age;<br>select * from emp order by age asc;<br><br># 根据入职时间，对员工进行降序排序<br>select * from emp order by age desc;<br><br># 根据年龄对公司的员工进行升序排序，年龄相同，再按照入职时间进行降序排序<br>select * from emp order by age asc, entrydate desc;<br></code></pre></td></tr></table></figure><h3 id="6-分页查询-limit"><a href="#6-分页查询-limit" class="headerlink" title="6. 分页查询 - limit"></a>6. 分页查询 - limit</h3><ol><li>查询方法：<code>select 字段列表 from 表名 limit 起始索引, 查询记录数</code></li><li>注意：<ol><li>起始索引从0开始，起始索引&#x3D;（查询页码-1）*每页显示记录数</li><li>分页查询是数据库的方式，不同的数据库有不同的实现，MySQL是limit</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为limit 10</li></ol></li><li>示例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询第1页员工数据，每页展示10条记录<br>select * from emp limit 0,10;<br>select * from emp limit 10;<br><br># 查询第2页员工数据，每页展示10条记录<br>select * from emp limit 10,10;<br></code></pre></td></tr></table></figure><h3 id="7-案例练习"><a href="#7-案例练习" class="headerlink" title="7. 案例练习"></a>7. 案例练习</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询年龄为20,21,22,23岁的女性员工信息<br>select * from emp where age in (20,21,22,23) and gender=&#x27;女&#x27;;<br><br># 查询性别为男，并且年龄在20-40岁之内的姓名为三个字的员工<br>select * from emp where (age between 20 and 40) and gender=&#x27;男&#x27; and name like &#x27;___&#x27;;<br><br># 统计员工表中，年龄小于60岁，男性员工和女性员工的人数<br>select gender, count(*) from emp where age&lt;60 group by gender;<br><br># 查询所有年龄小于等于35岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排列<br>select name, age from emp where age&lt;=35 order by age, entrydate desc;<br><br># 查询性别为男，且年龄在20-40岁以内的前5个员工信息，对查询的结果按年龄升序排序，年龄相同按入职时间升序排序<br>select * from emp where gender=&#x27;男&#x27; and age between 20 and 40 order by age,entrydate limit 0,5;<br></code></pre></td></tr></table></figure><h1 id="三、-高频应用"><a href="#三、-高频应用" class="headerlink" title="三、 高频应用"></a>三、 高频应用</h1><h2 id="0-mysql的启动和关闭"><a href="#0-mysql的启动和关闭" class="headerlink" title="0. mysql的启动和关闭"></a>0. mysql的启动和关闭</h2><ol><li>启动服务器：net start mysql</li><li>服务停止命令：net stop mysql  </li><li>退出mysql：exit；</li><li>终止此行语句：ctrl + c</li></ol><h2 id="1-进入mysql"><a href="#1-进入mysql" class="headerlink" title="1. 进入mysql"></a>1. 进入mysql</h2><ol><li>访问mysql：mysql -u root -p</li><li>重置密码：set password &#x3D; password(“Pooh_0505”)</li></ol><h2 id="2-对mysql中文件夹操作"><a href="#2-对mysql中文件夹操作" class="headerlink" title="2. 对mysql中文件夹操作"></a>2. 对mysql中文件夹操作</h2><ol><li>查看mysql目录下文件夹：show databases;</li><li>创建数据库：create database 数据库名字 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</li><li>删除数据库：drop database 数据库名字;</li><li>进入数据库：use 数据库名字;</li><li>查看文件夹下所有的数据表：show tables;</li></ol><div style="text-align:center">    <img src="/img/mysql_base_pic/6.jpg" alt="图片描述"></div><h2 id="3-对具体文件操作"><a href="#3-对具体文件操作" class="headerlink" title="3. 对具体文件操作"></a>3. 对具体文件操作</h2><ol><li>创建表：<code>create table 表的名称（列名称 类型，列名称 类型，列名称 类型）default charset=utf8;</code></li><li>删除表：<code>drop table 表的名称;</code></li><li>查看表的格式：<code>desc 表的名称;</code></li><li>插入数据：<code>insert into 表的名称（列1名称，列2名称） values (列1数据，列2数据），(列1数据，列2数据）;</code></li><li>查看表中的数据：<code>select * from 表的名称;</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">create table tb1(<br>id int not null auto_increment primary key，  --内部维护，自增；主键（不允许为空，不允许重复）<br>name varchar(16)，    --字符串数据，最多不能超过16位<br>age int，   --int类型数据<br>age int not null，   --不能为空<br>age int null，   --可以为空<br>age int default 3   --如果没有插入数据，则age列的默认值为3<br>) default charset=utf8;<br></code></pre></td></tr></table></figure><p class="note note-warning"> 注：主键一般用于表示当前行的数据的编号最后一行列表不能加'，'</p><h2 id="4-数据行操作"><a href="#4-数据行操作" class="headerlink" title="4. 数据行操作"></a>4. 数据行操作</h2><ol><li><p>新增数据：<code>insert into 表的名称（列1名称，列2名称） values(列1数据，列2数据），(列1数据，列2数据），(列1数据，列2数据）;</code></p></li><li><p>删除数据</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名；  <span class="hljs-comment">--  列表内容全部删除</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> id &gt;= <span class="hljs-number">3</span>;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> id = <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> = &quot;11&quot;;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> id = <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> <span class="hljs-type">name</span> = &quot;11&quot;;<br></code></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 列<span class="hljs-operator">=</span>值；  <span class="hljs-comment">-- 把列表中的此列全部更改为某值</span><br><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 列<span class="hljs-operator">=</span>值，列<span class="hljs-operator">=</span>值；<br><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 列<span class="hljs-operator">=</span>值 <span class="hljs-keyword">where</span> 条件； <span class="hljs-comment">-- 把符合条件的所有列更改为某值</span><br></code></pre></td></tr></table></figure></li><li><p><mark>查询数据</mark></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表的名称;<br><span class="hljs-keyword">select</span> 列名称 <span class="hljs-keyword">from</span> 表的名称;<br><span class="hljs-keyword">select</span> 列名称 <span class="hljs-keyword">from</span> 表的名称 <span class="hljs-keyword">where</span> 条件;<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-其他指令"><a href="#5-其他指令" class="headerlink" title="5. 其他指令"></a>5. 其他指令</h2><ol><li>显示目前已有的用户名：<code>select user from mysql.user;</code></li></ol><ul><li>用户名默认是root<div style="text-align:center">  <img src="/img/mysql_base_pic/7.jpg" alt="图片描述"></div></li></ul><ol start="2"><li>查看当前mysql数据库的版本：<code>select version();</code></li></ol><h1 id="四、常用的数据类型"><a href="#四、常用的数据类型" class="headerlink" title="四、常用的数据类型"></a>四、常用的数据类型</h1><h2 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1. 数值类型"></a>1. 数值类型</h2><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">有符号（signed）范围</th><th>无符号（unsigned）范围</th><th>描述</th></tr></thead><tbody><tr><td align="left"><mark>tinyint</mark></td><td align="left">1 byte</td><td align="left">(-128, 127)</td><td>(0, 255)</td><td>小整数值</td></tr><tr><td align="left">smallint</td><td align="left">2</td><td align="left">(-32768, 32767)</td><td>(0, 65535)</td><td>大整数值</td></tr><tr><td align="left">mediumint</td><td align="left">3</td><td align="left">(-8388608, 8388607)</td><td>(0, 16777215)</td><td>大整数值</td></tr><tr><td align="left"><mark>int</mark> 或 <mark>integer</mark></td><td align="left">4</td><td align="left">(-2147483648, 2147483647)</td><td>(0, 4294967295)</td><td>大整数值</td></tr><tr><td align="left">biting</td><td align="left">8</td><td align="left">(-2<sup>63</sup>, 2<sup>63</sup>-1)</td><td>(0, 2<sup>64</sup>-1)</td><td>极大整数值</td></tr><tr><td align="left"><mark>float</mark></td><td align="left">4</td><td align="left">(-3.4 E+38, 3.4 E+38)</td><td>0 和 (1.1 E-38, 3.4 E+38)</td><td>单精度浮点数值</td></tr><tr><td align="left">double</td><td align="left">8</td><td align="left">(-1.8 E+308, 1.8 E+308)</td><td>0 和 (2.2 E-308, 1.8 E+308)</td><td>双精度浮点数值</td></tr><tr><td align="left">decimal</td><td align="left"></td><td align="left">依赖于M(精度)和D(标度)的值</td><td>依赖于M(精度)和D(标度)的值</td><td>小数值（精确定点数）</td></tr></tbody></table><ul><li>示例</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">age</span> tinyint           <span class="hljs-comment"># 有符号范围</span><br>age tinyint unsigned  <span class="hljs-comment"># 无符号范围</span><br></code></pre></td></tr></table></figure><h2 id="2-字符串类型"><a href="#2-字符串类型" class="headerlink" title="2. 字符串类型"></a>2. 字符串类型</h2><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><mark>char</mark></td><td align="left">0-255 bytes</td><td align="left"><mark>定长字符串</mark></td></tr><tr><td align="left"><mark>varchar</mark></td><td align="left">0-65535 bytes</td><td align="left"><mark>变长字符串</mark></td></tr><tr><td align="left">tinyblob</td><td align="left">0-255 bytes</td><td align="left">不超过255个字符的二进制数据</td></tr><tr><td align="left">tinytext</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">blob</td><td align="left">0-65535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">text</td><td align="left">0-65535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">mediumblob</td><td align="left">0-16777215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">mediumtext</td><td align="left">0-16777215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">longblob</td><td align="left">0-4294967295 bytes</td><td align="left">二级制形式的极大文本数据</td></tr><tr><td align="left">longtext</td><td align="left">0-4294967295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><ul><li>示例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mobile char(11)     # 固定使用11个字符串进行存储，哪怕没有11个<br>mobile varchar(11)  # 真实数据有多长，就会存储多长<br></code></pre></td></tr></table></figure><h2 id="3-日期时间类型"><a href="#3-日期时间类型" class="headerlink" title="3. 日期时间类型"></a>3. 日期时间类型</h2><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">格式</th><th>描述</th></tr></thead><tbody><tr><td align="left"><mark>DATE</mark></td><td align="left">3</td><td align="left">YYYY-MM-DD</td><td>日期值</td></tr><tr><td align="left"><mark>TIME</mark></td><td align="left">3</td><td align="left">HH-MM-SS</td><td>时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">YYYY</td><td>年份值</td></tr><tr><td align="left"><mark>DATETIME</mark></td><td align="left">8</td><td align="left">YYYY-MM-DD HH-MM-SS</td><td>混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">YYYY-MM-DD HH-MM-SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><hr><h1 id="五、数据库迁移"><a href="#五、数据库迁移" class="headerlink" title="五、数据库迁移"></a>五、数据库迁移</h1><h2 id="1-windows数据库迁出"><a href="#1-windows数据库迁出" class="headerlink" title="1. windows数据库迁出"></a>1. windows数据库迁出</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1.打开终端</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.执行： <span class="hljs-built_in">cd</span> 要导出到的目录</span>  <br>cd /d E:<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3.执行：mysqldump -u root -p 要导出的数据库名 &gt; 所保存为的名字.sql（sql类型文件）</span><br>mysqldump -u root -p ppc &gt; sql_name.sql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4.输入数据库密码</span><br>Enter password：*********<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">此时，会在规定的路径（E：）中发现已经导出的.sql文件：sql_name.sql。</span><br></code></pre></td></tr></table></figure><h2 id="2-mac数据迁入"><a href="#2-mac数据迁入" class="headerlink" title="2. mac数据迁入"></a>2. mac数据迁入</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 启动数据库</span><br>mysql -u root -p<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.输入数据库密码</span><br>Enter password：*********<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3.创建数据库：create database name;</span><br>create database ppc;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4.进入数据库：use name;</span><br>use name;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">5.导入数据：<span class="hljs-built_in">source</span> 『将.sql文件直接拖拽至终端，自动补全其文件目录』</span><br><span class="hljs-meta prompt_">mysql&gt;</span><span class="language-bash"><span class="hljs-built_in">source</span> d/:name.sql</span><br></code></pre></td></tr></table></figure><h1 id="六、数据库管理工具-Navicat"><a href="#六、数据库管理工具-Navicat" class="headerlink" title="六、数据库管理工具 - Navicat"></a>六、数据库管理工具 - Navicat</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>1.简介：是一款功能强大的数据库管理工具，能够同时连接多种主流数据库，用户可以方便地管理和同步多个数据库的内容</p><p>2.破解版下载链接：压缩包比较庞大，无法上传，存在个人本地电脑中</p><h2 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h2><p>1.连接数据库</p><div style="text-align:center">    <img src="/img/mysql_base_pic/8.png" alt="图片描述" style="zoom:20%;"></div><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xquery">例：此图连接信息为<br>连接名：ZC<br>主机：localhost<br>端口：<span class="hljs-number">3306</span><br>用户名<span class="hljs-built_in">：root</span><br>密码：Pooh_0505<br></code></pre></td></tr></table></figure><p>2.创建数据表</p><div style="text-align:center">    <img src="/img/mysql_base_pic/9.png" alt="图片描述" style="zoom:40%;"></div><p>3.数据库查询</p><div style="text-align:center">    <img src="/img/mysql_base_pic/10.png" alt="图片描述" style="zoom:30%;"></div>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>后端</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>后端</tag>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
      <tag>终端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask Web框架</title>
    <link href="/2023/12/03/Flask%20Web%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/12/03/Flask%20Web%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Flask安装"><a href="#一、Flask安装" class="headerlink" title="一、Flask安装"></a>一、Flask安装</h1><p>安装flask：<code>pip install flask</code></p><h1 id="二、第一个项目"><a href="#二、第一个项目" class="headerlink" title="二、第一个项目"></a>二、第一个项目</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><br><span class="hljs-comment"># 创建了网址 /show/info 和 函数index的对应关系</span><br><span class="hljs-comment"># 以后用户在浏览器上访问 /show/info，网站自动执行index</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/show/info&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;zczczc&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/flask_pic/2.jpg" alt="图片描述" style="zoom:55%;">    <img src="/img/flask_pic/3.jpg" alt="图片描述" style="zoom:55%;"></div><h1 id="三、flask-html差异点"><a href="#三、flask-html差异点" class="headerlink" title="三、flask + html差异点"></a>三、flask + html差异点</h1><h2 id="1-html引入flask"><a href="#1-html引入flask" class="headerlink" title="1. html引入flask"></a>1. html引入flask</h2><ol><li>会默认去当前项目目录，中的templates文件夹中寻找html文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template<br><br>app = Flask(__name__)<br><br><br><span class="hljs-comment"># 创建了网址 /show/info 和 函数index的对应关系</span><br><span class="hljs-comment"># 以后用户在浏览器上访问 /show/info，网站自动执行index</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/show/info&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>)  <span class="hljs-comment">#命名主机名和端口号</span><br></code></pre></td></tr></table></figure><div style="text-align:center"> <img src="/img/flask_pic/4.jpg" alt="图片描述"></div></li></ol><h2 id="2-提交数据"><a href="#2-提交数据" class="headerlink" title="2. 提交数据"></a>2. 提交数据</h2><ol><li><code>&lt;form&gt;</code>表单容器<ol><li><p>必须submit按钮传输表单信息</p></li><li><p>表单标签需包含name属性，否则对应不上后端传入的信息</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"># action:服务器地址  name:所生成的表单，提交到对应链接的位置<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get|post&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myform&quot;</span>&gt;</span><br>    <br>    # 必须含有submit才能提交表单<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>method中get和post的区别</p><ol><li>数据提交方式，get提交的数据在url中可以看到，post看不到</li><li>get一般用于提交少量数据，post用来提交大量数据</li></ol></li><li><p>输入标签相关，如果是用户需要实际写入的数据不用特殊标注。如果是用户需要选择的标签，需要在后台定义好他的value</p></li><li><p>读取用户输入的信息</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取user对应的单一信息</span><br>user = request.form.get(<span class="hljs-string">&quot;user&quot;</span>)<br><br><span class="hljs-comment"># 读取hobby对应的列表信息</span><br>hobby_list = request.form.getlist(<span class="hljs-string">&quot;hobby&quot;</span>)<br><br><span class="hljs-comment"># 读取表单的所有信息</span><br>form_message = request_form<br></code></pre></td></tr></table></figure></li></ol><ul><li>打印返回的数据<code>print(request.args)</code></li></ul></li></ol><h2 id="3-图片标签"><a href="#3-图片标签" class="headerlink" title="3. 图片标签 &lt;img src&gt;"></a>3. 图片标签 <code>&lt;img src&gt;</code></h2><ul><li>使用方法<code>&lt;img src=&quot;图片地址&quot; /&gt;</code>，与html基础使用方法相同，差异点在传入本地化图片地址，会默认去当前项目目录，中的static文件夹中寻找图片文件<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/图片名称&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="4-案例"><a href="#4-案例" class="headerlink" title="4. 案例"></a>4. 案例</h2><h3 id="1-案例1"><a href="#1-案例1" class="headerlink" title="1. 案例1"></a>1. 案例1</h3><ol><li><form>需要包裹提交的数据标签 1. 提交方式：method=”get” 2. 提交的地址：action=“/xxx/xx” 2.必须包含一个submit标签 4. 每个input项都需要有对应的name</li></ol><ul><li><p>表单文件 + get跳转界面，request.args获得表单信息</p><div style="text-align:center;gap:5px">  <img src="/img/flask_pic/5.jpg" alt="图片描述" style="zoom:45%;">  <img src="/img/flask_pic/6.jpg" alt="图片描述" style="zoom:40%;"></div></li><li><p>表单文件 + post跳转界面，request.form获得表单信息</p><div style="text-align:center;display:flex;gap:5px">  <img src="/img/flask_pic/7.jpg" alt="图片描述" style="zoom:45%;">  <img src="/img/flask_pic/8.jpg" alt="图片描述" style="zoom:45%;"></div></li></ul><h3 id="2-案例2"><a href="#2-案例2" class="headerlink" title="2. 案例2"></a>2. 案例2</h3><p>当html与flask共同使用时，可以在html中添加特殊占位符 </p><div style="text-align:center">    <img src="/img/flask_pic/9.jpg" alt="图片描述"></div><h3 id="3-案例3"><a href="#3-案例3" class="headerlink" title="3. 案例3"></a>3. 案例3</h3><p><code>.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<br><br>app = Flask(__name__)<br><br><br><span class="hljs-comment"># 创建了网址 /show/info 和 函数index的对应关系</span><br><span class="hljs-comment"># 以后用户在浏览器上访问 /show/info，网站自动执行index</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/show/info&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;frontend.html&quot;</span>)<br>    <span class="hljs-comment"># return &quot;zc的web测试&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/do/reg&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">do_register</span>():<br>    <span class="hljs-built_in">print</span>(request.args)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;注册成功&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br>    <span class="hljs-comment"># app.run(host=&#x27;0.0.0.0&#x27;, port=5000)</span><br></code></pre></td></tr></table></figure><p><code>.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../static/plugins/bootstrap-3.4.1/css/bootstrap.css&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.c1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>:<span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>:<span class="hljs-number">350px</span>;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">200px</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.c1</span> <span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>:center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/do/reg&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;form method=&quot;get&quot; action=&quot;/show/info&quot;&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>张辰web测试<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputName2&quot;</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;exampleInputName2&quot; placeholder=&quot;Name&quot;&gt;--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputName2&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;exampleInputPassword1&quot; placeholder=&quot;Password&quot;&gt;--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;登录&lt;/button&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center">    <img src="/img/flask_pic/10.jpg" alt="图片描述"></div><h1 id="四、Flask-MySQL"><a href="#四、Flask-MySQL" class="headerlink" title="四、Flask + MySQL"></a>四、Flask + MySQL</h1><ol><li><p><code>flask</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<br><br><span class="hljs-keyword">import</span> pymysql<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/add/user&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_user</span>():<br>    <span class="hljs-comment"># 使用同一连接，仅改动请求方式，实现不同的返回值</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;add_user.html&quot;</span>)<br>    <span class="hljs-built_in">print</span>(request.form)<br><br>    username = request.form.get(<span class="hljs-string">&quot;user&quot;</span>)<br>    password = request.form.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>    mobile = request.form.get(<span class="hljs-string">&quot;mobile&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;username&#x27;</span>, username)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;password&#x27;</span>, password)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;mobile&#x27;</span>, mobile)<br><br>    <span class="hljs-comment"># 1.连接MySQL</span><br>    conn = pymysql.connect(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">3306</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, passwd=<span class="hljs-string">&quot;Pooh_0505&quot;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>, db=<span class="hljs-string">&#x27;mysqltest&#x27;</span>)<br>    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br>    <span class="hljs-comment"># 2.发送指令</span><br>    sql = <span class="hljs-string">&quot;insert into admin(username,password,mobile) values(%s, %s, %s)&quot;</span><br>    cursor.execute(sql, [username, password, mobile])<br>    conn.commit()<br><br>    <span class="hljs-comment"># 3.关闭连接</span><br>    cursor.close()<br>    conn.close()<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;填写成功&#x27;</span><br><br>    <span class="hljs-comment"># if request.method == &quot;POST&quot;:</span><br>    <span class="hljs-comment">#     print(request.form)</span><br><br><br><br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure></li><li><p><code>html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>添加用户信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-comment">&lt;!--&lt;form method=&quot;post&quot; action=&quot;/do/reg&quot;&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/add/user&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mobile&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提 交&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="五、Tips"><a href="#五、Tips" class="headerlink" title="五、Tips"></a>五、Tips</h1><ol><li>Flask无法访问(127.0.0.1:5000)的问题解决方法<br>参考视频：<a href="https://blog.csdn.net/numberonotwo">https://blog.csdn.net/numberonotwo</a></li></ol><p>Flask默认开启的ip地址是：<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a><br>但在运行时可能存在无法访问的问题，特别是当我们在linux服务器上搭建flask时，此时需要将代码修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>, debug = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>主要是将host地址修改为“0.0.0.0”，后面两项参数可以自行修改，运行后如下：</p><div style="text-align:center">    <img src="/img/flask_pic/11.jpg" alt="图片描述"></div><p>window端访问不是“<a href="http://0.0.0.0:5000/%E2%80%9D%EF%BC%8C%E8%80%8C%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%9C%AC%E6%9C%BA%E5%B1%80%E5%9F%9F%E7%BD%91ip%E5%9C%B0%E5%9D%80%EF%BC%8C%E6%9C%AC%E4%BA%BA%E7%9A%84%E4%B8%BAhttp://192.168.0.101:5000/">http://0.0.0.0:5000/”，而是服务器的本机局域网ip地址，本人的为http://192.168.0.101:5000/</a><br>因此访问界面如下：</p><div style="text-align:center">    <img src="/img/flask_pic/12.jpg" alt="图片描述"></div>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>Web框架</tag>
      
      <tag>Python</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FontAwesome 前端库</title>
    <link href="/2023/12/01/FontAwesome%20%E5%89%8D%E7%AB%AF%E5%BA%93/"/>
    <url>/2023/12/01/FontAwesome%20%E5%89%8D%E7%AB%AF%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="一、FontAwesome介绍"><a href="#一、FontAwesome介绍" class="headerlink" title="一、FontAwesome介绍"></a>一、FontAwesome介绍</h1><ol><li>因为bootstrap所提供的图标数量并不多，不足以支持web开发使用。FontAwesome是一个图标字体库，它包含了大量的矢量图标，可以通过CSS样式来使用这些图标。</li></ol><h1 id="二、FontAwesome的安装"><a href="#二、FontAwesome的安装" class="headerlink" title="二、FontAwesome的安装"></a>二、FontAwesome的安装</h1><ol><li><p>下载地址：<a href="https://fontawesome.dashgame.com/">https://fontawesome.dashgame.com/</a></p><div style="text-align:center"> <img src="/img/fontawesome_pic/2.jpg" alt="图片描述"></div></li><li><p>后续步骤与BootStrap相同。建立static - plugins目录，将解压好的FontAwesome放到plugins中。并引入css文件</p><div style="text-align:center"> <img src="/img/fontawesome_pic/3.jpg" alt="图片描述"></div></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../static/plugins/font-awesome-4.7.0/css/font-awesome.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>插件样式说明：<a href="https://fontawesome.dashgame.com/#google_vignette">https://fontawesome.dashgame.com/#google_vignette</a></li></ol><h1 id="三、高频的插件内容"><a href="#三、高频的插件内容" class="headerlink" title="三、高频的插件内容"></a>三、高频的插件内容</h1><ol><li>居中：container</li><li>平铺居中：container-fluid</li><li>面板、表单、按钮、图标</li><li>清除浮动：clearfix</li></ol>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>前端</tag>
      
      <tag>前端图标字体库</tag>
      
      <tag>FontAwesome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LayUI 前端框架</title>
    <link href="/2023/12/01/LayUI%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/12/01/LayUI%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、LayUI的安装与使用"><a href="#一、LayUI的安装与使用" class="headerlink" title="一、LayUI的安装与使用"></a>一、LayUI的安装与使用</h1><h2 id="1-LayUI的介绍"><a href="#1-LayUI的介绍" class="headerlink" title="1. LayUI的介绍"></a>1. LayUI的介绍</h2><ol><li><p>优势</p><p>提供了很多好看、方便的样式，并且基本拿来即用，和Bootstrap有些相似，但改框架有个极大的好处，就是定义了很多前后端交互的样式接口。如分页表格，只需在前端配置好接口，后端则按照定义好的接口规则返回数据，即可完成页面的展示，<mark>极大减少了后端人员的开发成本</mark>。</p></li><li><p>视频学习链接：<a href="https://www.bilibili.com/video/BV19V411b7sx/?spm_id_from=333.337.search-card.all.click&vd_source=4cf7b60c223a665538a4d958765c91a5">https://www.bilibili.com/video/BV19V411b7sx</a></p></li><li><p>框架下载地址：<a href="http://layui.apixx.net/">http://layui.apixx.net/</a></p></li><li><p>api文档：<a href="http://layui.apixx.net/demo/index.html">http://layui.apixx.net/demo/index.html</a></p></li></ol><h2 id="2-LayUI的特点"><a href="#2-LayUI的特点" class="headerlink" title="2. LayUI的特点"></a>2. LayUI的特点</h2><ol><li>layui属于轻量级框架，简单美观。适用于开发后端模式，他在服务器页面上有非常好的效果</li><li>layui是提供给后端开发人员的ui框架，基于DOM驱动</li></ol><h2 id="3-使用LayUI"><a href="#3-使用LayUI" class="headerlink" title="3. 使用LayUI"></a>3. 使用LayUI</h2><ul><li>将<code>LayUI</code>的<code>css</code>和<code>js</code>引入到项目中</li></ul><div style="text-align:center;gap:5px">    <img src="/img/layUI_pic/2.jpg" alt="图片描述"></div><h1 id="二、具体应用"><a href="#二、具体应用" class="headerlink" title="二、具体应用"></a>二、具体应用</h1><h2 id="1-栅格网格系统"><a href="#1-栅格网格系统" class="headerlink" title="1. 栅格网格系统"></a>1. 栅格网格系统</h2><p>无优势，建议使用bootstrap</p><h2 id="2-按钮"><a href="#2-按钮" class="headerlink" title="2. 按钮"></a>2. 按钮</h2><p>可参考：<a href="http://layui.apixx.net/doc/element/button.html">http://layui.apixx.net/doc/element/button.html</a></p><h2 id="3-导航"><a href="#3-导航" class="headerlink" title="3. 导航"></a>3. 导航</h2><p>无优势，建议自己画</p><h2 id="4-选项卡"><a href="#4-选项卡" class="headerlink" title="4. 选项卡"></a>4. 选项卡</h2><p>可参考：<a href="http://layui.apixx.net/doc/element/tab.html">http://layui.apixx.net/doc/element/tab.html</a></p><h2 id="5-表格"><a href="#5-表格" class="headerlink" title="5. 表格"></a>5. 表格</h2><p>无优势，建议使用bootstrap</p><h2 id="6-表单"><a href="#6-表单" class="headerlink" title="6. 表单"></a>6. 表单</h2><p>可参考：<a href="http://layui.apixx.net/doc/element/form.html">http://layui.apixx.net/doc/element/form.html</a></p><h2 id="7-弹出层"><a href="#7-弹出层" class="headerlink" title="7. 弹出层"></a>7. 弹出层</h2><p>重点学习：<a href="http://layui.apixx.net/doc/modules/layer.html">http://layui.apixx.net/doc/modules/layer.html</a></p><h3 id="1-信息框"><a href="#1-信息框" class="headerlink" title="1. 信息框"></a>1. 信息框</h3><div style="text-align:center;gap:5px">    <img src="/img/layUI_pic/3.png" alt="图片描述" style="zoom:52%">    <img src="/img/layUI_pic/4.png" alt="图片描述" style="zoom:35%"></div><h3 id="2-图标"><a href="#2-图标" class="headerlink" title="2. 图标"></a>2. 图标</h3><div style="text-align:center;gap:5px">    <img src="/img/layUI_pic/5.png" alt="图片描述" style="zoom:35%">    <img src="/img/layUI_pic/6.png" alt="图片描述" style="zoom:25%"></div><h1 id="三、Tips"><a href="#三、Tips" class="headerlink" title="三、Tips"></a>三、Tips</h1><h2 id="1-创建一个”正在加载中“的弹出框，当后端业务结束后，弹出框自动销毁"><a href="#1-创建一个”正在加载中“的弹出框，当后端业务结束后，弹出框自动销毁" class="headerlink" title="1. 创建一个”正在加载中“的弹出框，当后端业务结束后，弹出框自动销毁"></a>1. <mark>创建一个”正在加载中“的弹出框，当后端业务结束后，弹出框自动销毁</mark></h2><ol><li>使用<code>layer.msg</code>方法来创建一个弹出框，并设置了<code>time</code>参数为0，表示弹出框不会自动关闭。</li><li>在模拟后端业务执行时间的代码中，使用了<code>layer.close</code>方法来关闭弹出框，并在关闭后弹出一个“加载完成”的提示框。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>正在加载中<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/layui/2.5.6/css/layui.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>点击加载<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/layui/2.5.6/layui.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;#btn&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> index = layer.<span class="hljs-title function_">msg</span>(<span class="hljs-string">&#x27;正在加载中&#x27;</span>, &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">icon</span>: <span class="hljs-number">16</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">shade</span>: <span class="hljs-number">0.01</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">time</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 模拟后端业务执行时间</span></span><br><span class="language-javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          layer.<span class="hljs-title function_">close</span>(index);</span><br><span class="language-javascript">          layer.<span class="hljs-title function_">msg</span>(<span class="hljs-string">&#x27;加载完成&#x27;</span>);</span><br><span class="language-javascript">        &#125;, <span class="hljs-number">3000</span>);</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-前端动态添加表单行，进行多表单提交验证"><a href="#2-前端动态添加表单行，进行多表单提交验证" class="headerlink" title="2.前端动态添加表单行，进行多表单提交验证"></a>2.前端动态添加表单行，进行多表单提交验证</h2><div style="text-align:center;gap:5px">    <img src="/img/layUI_pic/7.png" alt="图片描述" style="zoom:35%"></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>form表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;renderer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;webkit&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.layuicdn.com/layui/css/layui.css&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/layui/2.6.8/layui.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.myTable</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> <span class="hljs-number">#eee</span> double; <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.t-header</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>; <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">justify-content</span>: flex-end; <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.t-main</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>; <span class="hljs-attribute">display</span>: flex; <span class="hljs-attribute">align-items</span>: center; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eee</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.myTable</span> <span class="hljs-selector-class">.t-main</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">16%</span>; <span class="hljs-attribute">display</span>: inline-block; <span class="hljs-attribute">box-sizing</span>: border-box; <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>; <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.myTable</span> <span class="hljs-selector-class">.layui-input</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">16%</span>;<span class="hljs-attribute">display</span>: inline-block; <span class="hljs-attribute">box-sizing</span>: border-box; <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">5px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.delItem</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.t-footer</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>; <span class="hljs-attribute">overflow</span>: auto;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;myTable&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 按钮 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;t-header&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn subBtn&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn addBtn&quot;</span>&gt;</span>新增<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 表头 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;t-main&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>房号<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>面积<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>基准价<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>单位<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>能源套餐<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 模板 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;t-section&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;resourceName&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;area&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;unitrice&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pricingUnit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;setId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-primary layui-border-red delItem&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;delrow(this)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-hide subItem&quot;</span> <span class="hljs-attr">lay-submit</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">lay-filter</span>=<span class="hljs-string">&quot;subItem&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 表单 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;t-footer&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form&quot;</span> <span class="hljs-attr">lay-filter</span>=<span class="hljs-string">&quot;f0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;resourceName&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;area&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;unitrice&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pricingUnit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;setId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-primary layui-border-red delItem&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;delrow(this)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-hide subItem&quot;</span> <span class="hljs-attr">lay-submit</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">lay-filter</span>=<span class="hljs-string">&quot;subItem&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form&quot;</span> <span class="hljs-attr">lay-filter</span>=<span class="hljs-string">&quot;f1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;resourceName&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;area&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;unitrice&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pricingUnit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;setId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-primary layui-border-red delItem&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;delrow(this)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-hide subItem&quot;</span> <span class="hljs-attr">lay-submit</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">lay-filter</span>=<span class="hljs-string">&quot;subItem&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    layui.<span class="hljs-title function_">use</span>([<span class="hljs-string">&#x27;element&#x27;</span>, <span class="hljs-string">&#x27;form&#x27;</span>, <span class="hljs-string">&#x27;table&#x27;</span>, <span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-string">&#x27;laydate&#x27;</span>, <span class="hljs-string">&#x27;util&#x27;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> form = layui.<span class="hljs-property">form</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> table = layui.<span class="hljs-property">table</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> layer = layui.<span class="hljs-property">layer</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> laydate = layui.<span class="hljs-property">laydate</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> element = layui.<span class="hljs-property">element</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">//监听提交</span></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">      form.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;submit(subItem)&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        sum++</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> length = $(<span class="hljs-string">&quot;.t-footer form&quot;</span>).<span class="hljs-property">length</span>; <span class="hljs-comment">//当前条数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (sum == length) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> formData = []</span><br><span class="language-javascript">          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="language-javascript">            formData = formData.<span class="hljs-title function_">concat</span>(form.<span class="hljs-title function_">val</span>(<span class="hljs-string">`f<span class="hljs-subst">$&#123;i&#125;</span>`</span>))</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;formData: &#x27;</span>, formData);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 提交全部</span></span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;.subBtn&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        sum = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;.t-footer .subItem&#x27;</span>).<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;click&#x27;</span>);</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 添加行</span></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> maxCount = <span class="hljs-number">10</span>; <span class="hljs-comment">//最大行数</span></span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;.addBtn&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> length = $(<span class="hljs-string">&quot;.t-footer form&quot;</span>).<span class="hljs-property">length</span>; <span class="hljs-comment">//当前条数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (length &lt; maxCount) &#123; <span class="hljs-comment">//点击时候，如果当前的数字小于递增结束的条件</span></span><br><span class="language-javascript">          $(<span class="hljs-string">&quot;.t-section form&quot;</span>).<span class="hljs-title function_">clone</span>().<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;.t-footer&quot;</span>); <span class="hljs-comment">//在表格后面添加一行</span></span><br><span class="language-javascript">          <span class="hljs-title function_">changeIndex</span>()</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">          layer.<span class="hljs-title function_">msg</span>(<span class="hljs-string">`最多只能添加<span class="hljs-subst">$&#123;maxCount&#125;</span>行`</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 删除行</span></span><br><span class="language-javascript">      delrow = <span class="hljs-keyword">function</span> (<span class="hljs-params">row</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> length = $(<span class="hljs-string">&quot;.t-footer form&quot;</span>).<span class="hljs-property">length</span>; <span class="hljs-comment">//当前条数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (length &lt;= <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;至少保留一行&quot;</span>);</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">          $(row).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">remove</span>(); <span class="hljs-comment">//移除当前行</span></span><br><span class="language-javascript">          <span class="hljs-title function_">changeIndex</span>();</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-comment">// 改变序列号</span></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeIndex</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> n = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;.t-footer form&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;lay-filter&#x27;</span>, <span class="hljs-string">`f<span class="hljs-subst">$&#123;n++&#125;</span>`</span>)</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>前端</tag>
      
      <tag>前端框架</tag>
      
      <tag>LayUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础</title>
    <link href="/2023/12/01/Python/"/>
    <url>/2023/12/01/Python/</url>
    
    <content type="html"><![CDATA[<h2 id="1-字典"><a href="#1-字典" class="headerlink" title="1. 字典"></a><font color=#1E90FF>1. 字典</font></h2><h3 id="1-通过key和value相互索引"><a href="#1-通过key和value相互索引" class="headerlink" title="1. 通过key和value相互索引"></a><font color=#1E90FF>1. 通过key和value相互索引</font></h3><ol><li><p>通过key取value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&#x27;apple&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;banana&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;orange&#x27;</span>: <span class="hljs-number">3</span>&#125;<br><br><span class="hljs-comment"># 方法1</span><br><span class="hljs-built_in">print</span>(my_dict.get(<span class="hljs-string">&#x27;apple&#x27;</span>))  <span class="hljs-comment"># 1</span><br><span class="hljs-comment"># 方法2</span><br><span class="hljs-built_in">print</span>(my_dict[<span class="hljs-string">&#x27;apple&#x27;</span>])      <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure></li><li><p>通过value取key</p><ul><li><mark>通过循环表达式：</mark></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&quot;a&quot;</span>&#125;<br>k = [k <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.items() <span class="hljs-keyword">if</span> v == <span class="hljs-string">&quot;a&quot;</span>]<br><span class="hljs-built_in">print</span>(k)     <span class="hljs-comment"># [0, 3]</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-字典的合并-update"><a href="#2-字典的合并-update" class="headerlink" title="2. 字典的合并 update() **"></a><font color=#1E90FF>2. 字典的合并 <code>update() **</code></font></h3><ol><li>方法1：<code>&#123;**dic1, **dic2&#125;</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dic1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>dic2 = &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">4</span>&#125;<br>dic3 = &#123;**dic1, **dic2&#125;<br><span class="hljs-built_in">print</span>(dic3)   <span class="hljs-comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>方法2：<code>dic1.update(dic2)</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dic1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>dic2 = &#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">4</span>&#125;<br>dic1.update(dic2)<br><span class="hljs-built_in">print</span> dic1    <span class="hljs-comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-清空字典-clear"><a href="#3-清空字典-clear" class="headerlink" title="3. 清空字典  clear()"></a><font color=#1E90FF>3. 清空字典  <code>clear()</code></font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dic = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>&#125;<br>dic.clear()<br><span class="hljs-built_in">print</span> dic  <span class="hljs-comment"># &#123;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-字典循环-items"><a href="#4-字典循环-items" class="headerlink" title="4. 字典循环 items() "></a><font color=#1E90FF>4. 字典循环 <mark><code>items()</code></mark> </font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">test_result = &#123;(<span class="hljs-string">&#x27;通话功耗&#x27;</span>): [<span class="hljs-number">10</span>, <span class="hljs-number">10</span>], (<span class="hljs-string">&#x27;待机通话功耗&#x27;</span>): [<span class="hljs-number">20</span>, <span class="hljs-number">20</span>]&#125;<br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> test_result.items():<br>    <span class="hljs-built_in">print</span>(key, value)<br></code></pre></td></tr></table></figure><h3 id="5-统计列表中出现一次的数"><a href="#5-统计列表中出现一次的数" class="headerlink" title="5. 统计列表中出现一次的数"></a><font color=#1E90FF>5. 统计列表中出现一次的数</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = [<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]<br>num_dict = &#123;&#125;<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>    <span class="hljs-keyword">if</span> num <span class="hljs-keyword">in</span> num_dict:<br>        num_dict[num] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        num_dict[num] = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(num_dict)<br><br>result = []<br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> num_dict.items():<br>    <span class="hljs-keyword">if</span> v == <span class="hljs-number">1</span>:<br>        result.append(k)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="6-字典排序"><a href="#6-字典排序" class="headerlink" title="6. 字典排序"></a><font color=#1E90FF>6. 字典排序</font></h3><ul><li>字典进行排序后，会变为列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">24</span>, <span class="hljs-string">&#x27;g&#x27;</span>:<span class="hljs-number">52</span>, <span class="hljs-string">&#x27;i&#x27;</span>:<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;k&#x27;</span>:<span class="hljs-number">33</span>&#125;<br>dict1 = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">dict</span>.items(), key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(dict1, <span class="hljs-built_in">type</span>(dict1))          <span class="hljs-comment"># [(&#x27;i&#x27;, 12), (&#x27;a&#x27;, 24), (&#x27;k&#x27;, 33), (&#x27;g&#x27;, 52)] &lt;class &#x27;list&#x27;&gt;</span><br>dict2 = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">dict</span>.items(), key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(dict2, <span class="hljs-built_in">type</span>(dict2))          <span class="hljs-comment"># [(&#x27;g&#x27;, 52), (&#x27;k&#x27;, 33), (&#x27;a&#x27;, 24), (&#x27;i&#x27;, 12)] &lt;class &#x27;list&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-列表"><a href="#2-列表" class="headerlink" title="2. 列表"></a><font color=#1E90FF>2. 列表</font></h2><h3 id="1-列表中元素个数"><a href="#1-列表中元素个数" class="headerlink" title="1. 列表中元素个数"></a><font color=#1E90FF>1. 列表中元素个数</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">z = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>y = [(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>),(<span class="hljs-number">7</span>,<span class="hljs-number">8</span>),(<span class="hljs-number">9</span>,<span class="hljs-number">0</span>)]<br><br>a = <span class="hljs-built_in">len</span>(z)  <span class="hljs-comment"># 9</span><br>b = <span class="hljs-built_in">len</span>(y)  <span class="hljs-comment"># 5</span><br></code></pre></td></tr></table></figure><h3 id="2-获取列表元素索引-enumerate"><a href="#2-获取列表元素索引-enumerate" class="headerlink" title="2. 获取列表元素索引 enumerate"></a><font color=#1E90FF>2. 获取列表元素索引 enumerate</font></h3><ul><li>将一个可迭代对象转换为一个索引序列，同时返回每个元素的索引和对应的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]<br>d = <span class="hljs-built_in">enumerate</span>(a)<br><span class="hljs-built_in">print</span>(d)<br><br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> d:<br>    <span class="hljs-built_in">print</span>(k,v)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;enumerate <span class="hljs-selector-tag">object</span> at <span class="hljs-number">0</span>x7fc8d0115370&gt;<br><span class="hljs-number">0</span> <span class="hljs-selector-tag">a</span><br><span class="hljs-number">1</span> <span class="hljs-selector-tag">b</span><br><span class="hljs-number">2</span> c<br><span class="hljs-number">3</span> d<br></code></pre></td></tr></table></figure><h3 id="3-统计列表中各元素的个数-转回为列表"><a href="#3-统计列表中各元素的个数-转回为列表" class="headerlink" title="3. 统计列表中各元素的个数-转回为列表"></a><font color=#1E90FF>3. 统计列表中各元素的个数-转回为列表</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br><span class="hljs-comment">#建立字典</span><br>a = &#123;<span class="hljs-string">&#x27;开箱检查&#x27;</span>: [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>]&#125;<br><span class="hljs-comment">#计算列表中元素个数</span><br>b = Counter([<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>])<br>a_list = &#123;<span class="hljs-string">&#x27;开箱检查&#x27;</span>: b&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b&#x27;</span>,b)    <span class="hljs-comment">#b Counter(&#123;&#x27;1&#x27;: 9, &#x27;2&#x27;: 2, &#x27;4&#x27;: 1&#125;)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))  <span class="hljs-comment">#&lt;class &#x27;collections.Counter&#x27;&gt;</span><br><br><span class="hljs-comment">#将collections.Counter类型转为dict类型</span><br>b_dict = <span class="hljs-built_in">dict</span>(b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b_dict&#x27;</span>,b_dict)  <span class="hljs-comment">#b_dict &#123;&#x27;1&#x27;: 9, &#x27;4&#x27;: 1, &#x27;2&#x27;: 2&#125;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b_dict))     <span class="hljs-comment">#&lt;class &#x27;dict&#x27;&gt;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a_list&#x27;</span>,a_list)  <span class="hljs-comment">#list &#123;&#x27;开箱检查&#x27;: Counter(&#123;&#x27;1&#x27;: 9, &#x27;2&#x27;: 2, &#x27;4&#x27;: 1&#125;)&#125;</span><br><br><span class="hljs-comment">#通过values取keys</span><br>b_key=<span class="hljs-built_in">list</span>(a_list.keys())[<span class="hljs-built_in">list</span>(a_list.values()).index(b)]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b_key&#x27;</span>,b_key)    <span class="hljs-comment">#开箱检查</span><br></code></pre></td></tr></table></figure><h3 id="4-sort-列表排序"><a href="#4-sort-列表排序" class="headerlink" title="4. sort 列表排序"></a><font color=#1E90FF>4. sort 列表排序</font></h3><h4 id="1-由小到大排序"><a href="#1-由小到大排序" class="headerlink" title="1. 由小到大排序 "></a><font color=#1E90FF>1. 由小到大排序 </font></h4><ul><li><mark>int类型和str类型数据，都可以进行数据排列</mark></li></ul><ol><li><code>list.sort()</code> 方法会对原列表进行排序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>]<br>l1.sort()<br><span class="hljs-built_in">print</span>(l1)<br></code></pre></td></tr></table></figure><ol start="2"><li>如果想要得到一个新的排序后的列表，可以使用 <code>sorted()</code> 函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>]<br>l2 = <span class="hljs-built_in">sorted</span>(l1)<br><span class="hljs-built_in">print</span>(l2)<br></code></pre></td></tr></table></figure><ol start="3"><li><mark>对字符串进行排序</mark></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;ab&#x27;</span>]<br>l1.sort()<br><span class="hljs-built_in">print</span>(l1)   <span class="hljs-comment"># [&#x27;a&#x27;, &#x27;aa&#x27;, &#x27;ab&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span><br></code></pre></td></tr></table></figure><h4 id="2-制定规则排序"><a href="#2-制定规则排序" class="headerlink" title="2. 制定规则排序"></a><font color=#1E90FF>2. 制定规则排序</font></h4><ol><li>示例1</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">a_dict = &#123;<span class="hljs-string">&#x27;aa&#x27;</span>:<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;bb&#x27;</span>:<span class="hljs-number">12</span>&#125;<br>b_dict = &#123;<span class="hljs-string">&#x27;aa&#x27;</span>:<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;bb&#x27;</span>:<span class="hljs-number">13</span>&#125;<br>c_dict = &#123;<span class="hljs-string">&#x27;aa&#x27;</span>:<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;bb&#x27;</span>:<span class="hljs-number">15</span>&#125;<br>d_list = [a_dict,b_dict,c_dict]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原始的数据&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d_list))     <span class="hljs-comment"># [&#123;&#x27;aa&#x27;: 10, &#x27;bb&#x27;: 12&#125;, &#123;&#x27;aa&#x27;: 8, &#x27;bb&#x27;: 13&#125;, &#123;&#x27;aa&#x27;: 9, &#x27;bb&#x27;: 15&#125;]</span><br><br>d_list.sort(key=<span class="hljs-keyword">lambda</span> stu:stu[<span class="hljs-string">&#x27;aa&#x27;</span>])  <span class="hljs-comment"># 以&#x27;aa&#x27;元素排序，正向排序不用标注</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;由小到大排序&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d_list))   <span class="hljs-comment"># [&#123;&#x27;aa&#x27;: 8, &#x27;bb&#x27;: 13&#125;, &#123;&#x27;aa&#x27;: 9, &#x27;bb&#x27;: 15&#125;, &#123;&#x27;aa&#x27;: 10, &#x27;bb&#x27;: 12&#125;]</span><br><br>d_list.sort(key=<span class="hljs-keyword">lambda</span> stu:stu[<span class="hljs-string">&#x27;aa&#x27;</span>], reverse=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 反向排序，需要特殊标注</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;由大到小排序&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d_list))   <span class="hljs-comment"># [&#123;&#x27;aa&#x27;: 10, &#x27;bb&#x27;: 12&#125;, &#123;&#x27;aa&#x27;: 9, &#x27;bb&#x27;: 15&#125;, &#123;&#x27;aa&#x27;: 8, &#x27;bb&#x27;: 13&#125;]</span><br></code></pre></td></tr></table></figure><ol start="2"><li>示例2</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">name_count=&#123;<span class="hljs-string">&#x27;赖堂琴&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;徐深圳&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;付高锋&#x27;</span>: <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;杨梦瑶&#x27;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&#x27;雷子聪&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;班奥涵&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;肖学霖&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;刘显赫&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;彭鸿美&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;宋朝阳&#x27;</span>: <span class="hljs-number">4</span>,<span class="hljs-string">&#x27;谭进云&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;连俊辛&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;宋志贤&#x27;</span>: <span class="hljs-number">3</span>&#125;<br><br><span class="hljs-comment"># 数据由大到小排序</span><br>sorted_name_count = <span class="hljs-built_in">sorted</span>(name_count.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br><br><span class="hljs-built_in">print</span>(sorted_name_count)<br><span class="hljs-comment">#[(&#x27;杨梦瑶&#x27;, 11), (&#x27;班奥涵&#x27;, 10), (&#x27;彭鸿美&#x27;, 10), (&#x27;付高锋&#x27;, 9), (&#x27;肖学霖&#x27;, 7), (&#x27;谭进云&#x27;, 7), (&#x27;赖堂琴&#x27;, 5), (&#x27;刘显赫&#x27;, 5), (&#x27;雷子聪&#x27;, 4), (&#x27;宋朝阳&#x27;, 4), (&#x27;连俊辛&#x27;, 4), (&#x27;徐深圳&#x27;, 3)]</span><br></code></pre></td></tr></table></figure><h3 id="5-两个列表的交集、并集、差集"><a href="#5-两个列表的交集、并集、差集" class="headerlink" title="5. 两个列表的交集、并集、差集"></a><font color=#1E90FF>5. 两个列表的交集、并集、差集</font></h3><ol><li><p>交集</p><div style="text-align:center;gap:5px">    <img src="/img/python_pic/9.png" alt="图片描述" style="zoom:80%;"></div></li><li><p>并集</p><div style="text-align:center;gap:5px">    <img src="/img/python_pic/10.png" alt="图片描述" style="zoom:80%;"></div></li><li><p>差集</p><div style="text-align:center;gap:5px">    <img src="/img/python_pic/11.png" alt="图片描述" style="zoom:80%;"></div></li></ol><h3 id="6-添加元素-append"><a href="#6-添加元素-append" class="headerlink" title="6. 添加元素 .append()"></a><font color=#1E90FF>6. 添加元素 <code>.append()</code></font></h3><ul><li><code>[a]+[b]+[c] =[[a],[b],[c]]</code></li><li><code>&#39;a&#39;+&#39;b&#39;+&#39;c&#39;=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">b = []<br>b.append(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(b)   <span class="hljs-comment">#[1]</span><br></code></pre></td></tr></table></figure><h3 id="7-列表按制定规则进行排序-sort"><a href="#7-列表按制定规则进行排序-sort" class="headerlink" title="7. 列表按制定规则进行排序 - sort"></a><font color=#1E90FF>7. 列表按制定规则进行排序 - sort</font></h3><ol><li>多规则排序</li></ol><ul><li>依据自行制定的排序规则,对列表或字典进行多条件排序</li><li>实际需求:某一大列表中有许多小列表。小列表[0]有两个可能’New Issue’和’Known Issue’,小列表[3]有四个可能”Blocker”, “Critical”, “Major”, “Minor”。按照两两组合的重要程度对所有小列表进行排序。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python">all_data_bug_list = [<br>    [<span class="hljs-string">&#x27;Known Issue&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;实际7&#x27;</span>, <span class="hljs-string">&#x27;Major&#x27;</span>],<br>    [<span class="hljs-string">&#x27;New Issue&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;实际3&#x27;</span>, <span class="hljs-string">&#x27;Major&#x27;</span>],<br>    [<span class="hljs-string">&#x27;Known Issue&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;实际5&#x27;</span>, <span class="hljs-string">&#x27;Blocker&#x27;</span>],<br>    [<span class="hljs-string">&#x27;New Issue&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;实际2&#x27;</span>, <span class="hljs-string">&#x27;Critical&#x27;</span>],<br>    [<span class="hljs-string">&#x27;New Issue&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;实际4&#x27;</span>, <span class="hljs-string">&#x27;Minor&#x27;</span>],<br>    [<span class="hljs-string">&#x27;Known Issue&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;实际8&#x27;</span>, <span class="hljs-string">&#x27;Minor&#x27;</span>],<br>    [<span class="hljs-string">&#x27;New Issue&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;实际1&#x27;</span>, <span class="hljs-string">&#x27;Blocker&#x27;</span>],<br>    [<span class="hljs-string">&#x27;Known Issue&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;实际6&#x27;</span>, <span class="hljs-string">&#x27;Critical&#x27;</span>],<br>    [<span class="hljs-string">&#x27;New Issue&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;实际3&#x27;</span>, <span class="hljs-string">&#x27;Major&#x27;</span>], ]<br><br>cass_status_sorting_rules = &#123;<span class="hljs-string">&#x27;New Issue&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Known Issue&#x27;</span>: <span class="hljs-number">2</span>, &#125;<br>cass_level_sorting_rules = &#123;<span class="hljs-string">&quot;Blocker&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;Critical&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;Major&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;Minor&quot;</span>: <span class="hljs-number">4</span>&#125;<br><br><span class="hljs-string">&#x27;&#x27;&#x27;哪个规则在前,哪个规则就更重要。此时以rules 1为第一优先级&#x27;&#x27;&#x27;</span><br>all_data_bug_list.sort(key=<span class="hljs-keyword">lambda</span> x: (cass_status_sorting_rules[x[<span class="hljs-number">0</span>]], <br>cass_level_sorting_rules[x[<span class="hljs-number">3</span>]]))<br><span class="hljs-comment"># print(&#x27;all_data_bug_list&#x27;,all_data_bug_list)</span><br><span class="hljs-keyword">for</span> singo_data_bug_list <span class="hljs-keyword">in</span> all_data_bug_list:<br>    <span class="hljs-built_in">print</span>(singo_data_bug_list)<br>     <br><span class="hljs-comment"># [&#x27;New Issue&#x27;, &#x27;7&#x27;, &#x27;实际1&#x27;, &#x27;Blocker&#x27;]</span><br><span class="hljs-comment"># [&#x27;New Issue&#x27;, &#x27;4&#x27;, &#x27;实际2&#x27;, &#x27;Critical&#x27;]</span><br><span class="hljs-comment"># [&#x27;New Issue&#x27;, &#x27;2&#x27;, &#x27;实际3&#x27;, &#x27;Major&#x27;]</span><br><span class="hljs-comment"># [&#x27;New Issue&#x27;, &#x27;2&#x27;, &#x27;实际3&#x27;, &#x27;Major&#x27;]</span><br><span class="hljs-comment"># [&#x27;New Issue&#x27;, &#x27;5&#x27;, &#x27;实际4&#x27;, &#x27;Minor&#x27;]</span><br><span class="hljs-comment"># [&#x27;Known Issue&#x27;, &#x27;3&#x27;, &#x27;实际5&#x27;, &#x27;Blocker&#x27;]</span><br><span class="hljs-comment"># [&#x27;Known Issue&#x27;, &#x27;8&#x27;, &#x27;实际6&#x27;, &#x27;Critical&#x27;]</span><br><span class="hljs-comment"># [&#x27;Known Issue&#x27;, &#x27;1&#x27;, &#x27;实际7&#x27;, &#x27;Major&#x27;]</span><br><span class="hljs-comment"># [&#x27;Known Issue&#x27;, &#x27;6&#x27;, &#x27;实际8&#x27;, &#x27;Minor&#x27;]</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;此时以rules 2为第一优先级&#x27;&#x27;&#x27;</span><br>all_data_bug_list.sort(key=<span class="hljs-keyword">lambda</span> x: ( cass_level_sorting_rules[x[<span class="hljs-number">3</span>]], <br>cass_status_sorting_rules[x[<span class="hljs-number">0</span>]],))<br><span class="hljs-comment"># print(&#x27;all_data_bug_list&#x27;,all_data_bug_list)</span><br><span class="hljs-keyword">for</span> singo_data_bug_list <span class="hljs-keyword">in</span> all_data_bug_list:<br>    <span class="hljs-built_in">print</span>(singo_data_bug_list)<br>    <br>    <br><span class="hljs-comment"># [&#x27;New Issue&#x27;, &#x27;7&#x27;, &#x27;实际1&#x27;, &#x27;Blocker&#x27;]</span><br><span class="hljs-comment"># [&#x27;Known Issue&#x27;, &#x27;3&#x27;, &#x27;实际5&#x27;, &#x27;Blocker&#x27;]</span><br><span class="hljs-comment"># [&#x27;New Issue&#x27;, &#x27;4&#x27;, &#x27;实际2&#x27;, &#x27;Critical&#x27;]</span><br><span class="hljs-comment"># [&#x27;Known Issue&#x27;, &#x27;8&#x27;, &#x27;实际6&#x27;, &#x27;Critical&#x27;]</span><br><span class="hljs-comment"># [&#x27;New Issue&#x27;, &#x27;2&#x27;, &#x27;实际3&#x27;, &#x27;Major&#x27;]</span><br><span class="hljs-comment"># [&#x27;New Issue&#x27;, &#x27;2&#x27;, &#x27;实际3&#x27;, &#x27;Major&#x27;]</span><br><span class="hljs-comment"># [&#x27;Known Issue&#x27;, &#x27;1&#x27;, &#x27;实际7&#x27;, &#x27;Major&#x27;]</span><br><span class="hljs-comment"># [&#x27;New Issue&#x27;, &#x27;5&#x27;, &#x27;实际4&#x27;, &#x27;Minor&#x27;]</span><br><span class="hljs-comment"># [&#x27;Known Issue&#x27;, &#x27;6&#x27;, &#x27;实际8&#x27;, &#x27;Minor&#x27;]</span><br></code></pre></td></tr></table></figure><ol start="2"><li>规则数量大于列表元素数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [[<span class="hljs-string">&#x27;场景8&#x27;</span>], [<span class="hljs-string">&#x27;场景1&#x27;</span>], [<span class="hljs-string">&#x27;场景3&#x27;</span>], [<span class="hljs-string">&#x27;场景2&#x27;</span>], [<span class="hljs-string">&#x27;场景4&#x27;</span>], [<span class="hljs-string">&#x27;场景6&#x27;</span>]]<br>list_rules = &#123;<span class="hljs-string">&#x27;场景1&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;场景2&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;场景3&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;场景4&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;场景5&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;场景6&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;场景7&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;场景8&#x27;</span>: <span class="hljs-number">8</span>&#125;<br><br><br><span class="hljs-built_in">list</span>.sort(key=<span class="hljs-keyword">lambda</span> x: (list_rules[x[<span class="hljs-number">0</span>]]))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br></code></pre></td></tr></table></figure><ol start="3"><li>字符串排序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">all_test_rounds_list_clean = [<span class="hljs-string">&#x27;ST3&#x27;</span>, <span class="hljs-string">&#x27;ST1&#x27;</span>, <span class="hljs-string">&#x27;ST2&#x27;</span>, <span class="hljs-string">&#x27;OTA1&#x27;</span>]<br>test_rounds_rules = &#123;<span class="hljs-string">&quot;ST1&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;ST2&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;ST3&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;OTA1&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;OTA2&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;OTA3&quot;</span>: <span class="hljs-number">6</span>&#125;<br>all_test_rounds_list_clean.sort(key=<span class="hljs-keyword">lambda</span> x: (test_rounds_rules[x]))<br><span class="hljs-built_in">print</span>(all_test_rounds_list_clean)<br></code></pre></td></tr></table></figure><h3 id="8-remove-pop-del-删除列表中的元素"><a href="#8-remove-pop-del-删除列表中的元素" class="headerlink" title="8. remove &amp; pop &amp; del 删除列表中的元素"></a><font color=#1E90FF>8. remove &amp; pop &amp; del 删除列表中的元素</font></h3><ol><li>remove: 删除单个元素，删除首个符合条件的元素，按值删除</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>]<br><span class="hljs-built_in">str</span>.remove(<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)    <span class="hljs-comment"># [1, 3, 4, 5, 2, 6]</span><br></code></pre></td></tr></table></figure><ol start="2"><li>pop: 删除单个或多个元素，按位删除(根据索引删除)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">str2=[<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;bcd&#x27;</span>,<span class="hljs-string">&#x27;dce&#x27;</span>]<br>str2.pop(<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">print</span>(str2)   <span class="hljs-comment"># [&#x27;abc&#x27;, &#x27;bcd&#x27;]</span><br></code></pre></td></tr></table></figure><ol start="3"><li>del：它是根据索引(元素所在位置)来删除</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">str2=[<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;bcd&#x27;</span>,<span class="hljs-string">&#x27;dce&#x27;</span>]<br><span class="hljs-keyword">del</span> str2[<span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span>(str2)   <span class="hljs-comment"># [&#x27;abc&#x27;, &#x27;dce&#x27;]</span><br></code></pre></td></tr></table></figure><p>除此之外，del还可以删除指定范围内的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-keyword">del</span> <span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] <span class="hljs-comment">#删除从第2个元素开始，到第4个为止的元素(但是不包括尾部元素)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)  <span class="hljs-comment"># [0, 1, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><h3 id="9-判断两个列表的一致率"><a href="#9-判断两个列表的一致率" class="headerlink" title="9. 判断两个列表的一致率"></a><font color=#1E90FF>9. 判断两个列表的一致率</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>] <br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>] <br><br><span class="hljs-comment"># 使用zip函数将两个列表中的元素一一对应起来，形成一个元组的列表 </span><br>pairs = <span class="hljs-built_in">zip</span>(list1, list2) <br><br><span class="hljs-comment"># 使用列表推导式计算两个列表中对应元素相等的数量 </span><br>equal_count = <span class="hljs-built_in">sum</span>([<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> pair <span class="hljs-keyword">in</span> pairs <span class="hljs-keyword">if</span> pair[<span class="hljs-number">0</span>] == pair[<span class="hljs-number">1</span>]]) <br><br><span class="hljs-comment"># 计算一致率 </span><br>consistency = equal_count / <span class="hljs-built_in">len</span>(list1) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一致率为：&quot;</span>, consistency)  <span class="hljs-comment"># 0.6</span><br></code></pre></td></tr></table></figure><h3 id="10-列表生成式"><a href="#10-列表生成式" class="headerlink" title="10. 列表生成式 *"></a><font color=#1E90FF>10. 列表生成式 *</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 基础列表生成式</span><br>li1 = [x*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>)]<br><span class="hljs-built_in">print</span>(li1)    <span class="hljs-comment"># [1,4,9,16,25,36,49,64,81,100]</span><br><br><span class="hljs-comment"># 循环后进行判断</span><br>li2 = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>) <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(li2)    <span class="hljs-comment"># [2,4,6,8,10]</span><br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>list2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br>[list1.append(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list2 <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> list1]<br><span class="hljs-built_in">print</span>(list1)     <span class="hljs-comment"># [1, 2, 3, 4]</span><br><br><span class="hljs-comment"># 双层循环，生成全排列（基本不使用）</span><br>li3 = [m+n <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;AB&quot;</span> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;12&quot;</span>]<br><span class="hljs-built_in">print</span>(li3)       <span class="hljs-comment"># [A1,A2,B1,B2]</span><br></code></pre></td></tr></table></figure><h2 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3. 字符串"></a><font color=#1E90FF>3. 字符串</font></h2><h3 id="1-添加元素-join"><a href="#1-添加元素-join" class="headerlink" title="1. 添加元素 .join()"></a><font color=#1E90FF>1. 添加元素 <code>.join()</code></font></h3><ul><li>对于可迭代对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;</span>.join(singo_str)<br></code></pre></td></tr></table></figure><ul><li>对于链表等不可迭代对象的拼接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">lk_str = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> lk:<br>    lk_str += <span class="hljs-built_in">str</span>(lk.item)<br>    lk = lk.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><h3 id="2-字符串开头元素-startswith"><a href="#2-字符串开头元素-startswith" class="headerlink" title="2. 字符串开头元素 startswith"></a><font color=#1E90FF>2. 字符串开头元素 <code>startswith</code></font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;http://www.example.com&#x27;</span><br><span class="hljs-keyword">if</span> s.startswith(<span class="hljs-string">&#x27;http&#x27;</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;字符串以http开头&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;字符串不以http开头&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-去除头尾指定字符串-strip"><a href="#3-去除头尾指定字符串-strip" class="headerlink" title="3. 去除头尾指定字符串 strip"></a><font color=#1E90FF>3. 去除头尾指定字符串 strip</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">case_list = [<span class="hljs-string">&#x27;[]&#x27;</span>, <span class="hljs-string">&#x27;[]&#x27;</span>, <span class="hljs-string">&#x27;[&quot;19158&quot;]&#x27;</span>, <span class="hljs-string">&#x27;[]&#x27;</span>,<span class="hljs-string">&#x27;[&quot;18695&quot;]&#x27;</span>, <span class="hljs-string">&#x27;[]&#x27;</span>]<br>fail_case = <span class="hljs-built_in">set</span>(case_list)<br><br><span class="hljs-comment">#去除头和尾的一种字符串</span><br>singo_jira_url = fail_case.strip(<span class="hljs-string">&#x27;[&quot;&#x27;</span>)<br><span class="hljs-built_in">print</span>(singo_jira_url)  <span class="hljs-comment"># 19158&quot;]，18695&quot;]</span><br><br><span class="hljs-comment">#去除头和尾的两种字符串</span><br>singo_jira_url = fail_case.strip(<span class="hljs-string">&#x27;[&quot;&#x27;</span>).strip(<span class="hljs-string">&#x27;&quot;]&#x27;</span>)<br><span class="hljs-built_in">print</span>(singo_jira_url)  <span class="hljs-comment"># 19158，18695</span><br></code></pre></td></tr></table></figure><h3 id="4-字符串替换-replace"><a href="#4-字符串替换-replace" class="headerlink" title="4. 字符串替换 replace "></a><font color=#1E90FF>4. 字符串替换 replace </font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;i like python!&quot;</span><br><br><span class="hljs-comment">#普通字符串相互替换 后面的代替前面的</span><br>str_change = <span class="hljs-built_in">str</span>.replace(<span class="hljs-string">&quot;i&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>)<br>pring(str_change)    <span class="hljs-comment"># &quot;a lake python!&quot;</span><br><br><span class="hljs-comment">#字符串相互替换个数</span><br>str_change = <span class="hljs-built_in">str</span>.replace(<span class="hljs-string">&quot;i&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>)  <br>pring(str_change)    <span class="hljs-comment"># &quot;a lake python!&quot;</span><br><br><span class="hljs-comment">#多组字符串相互替换</span><br>str_change = <span class="hljs-built_in">str</span>.replace(<span class="hljs-string">&quot;i&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>).replace(<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>)  <br>pring(str_change)    <span class="hljs-comment"># &quot;a lake pytcon!&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-字符串分割-split"><a href="#5-字符串分割-split" class="headerlink" title="5. 字符串分割 split"></a><font color=#1E90FF>5. 字符串分割 split</font></h3><ul><li>经过分割后，字符串会变为列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">path = <span class="hljs-string">&#x27;http://10.221.113.135:8000&amp;target_email=zhangchen31@xiaomi.com&#x27;</span><br>path_change = path.split(<span class="hljs-string">&#x27;&amp;&#x27;</span>)[<span class="hljs-number">0</span>]<br><br><span class="hljs-built_in">print</span>(path_change)    <span class="hljs-comment"># http://10.221.113.135:8000</span><br></code></pre></td></tr></table></figure><h3 id="6-字符串插入元素-format"><a href="#6-字符串插入元素-format" class="headerlink" title="6. 字符串插入元素 format "></a><font color=#1E90FF>6. 字符串插入元素 format </font></h3><ol><li>方法1</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">message = &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;https://jira.n.xiaomi.com/browse/HUAQIN-19158&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;HUAQIN-19158&#x27;</span>&#125;<br><br>a_url = <span class="hljs-string">&quot;&lt;a href=&#123;&#125;&gt;&#123;&#125;&lt;/a&gt;&quot;</span>.<span class="hljs-built_in">format</span>(message[<span class="hljs-string">&#x27;id&#x27;</span>], message[<span class="hljs-string">&#x27;name&#x27;</span>])<br><span class="hljs-built_in">print</span>(a_url)     <span class="hljs-comment"># &lt;a href=https://jira.n.xiaomi.com/browse/HUAQIN-19158&gt;HUAQIN-19158&lt;/a&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>方法2</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">message = &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;https://jira.n.xiaomi.com/browse/HUAQIN-19158&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;HUAQIN-19158&#x27;</span>&#125;<br><br>a_url = <span class="hljs-string">f&quot;&lt;a href=<span class="hljs-subst">&#123;message[<span class="hljs-string">&#x27;id&#x27;</span>]&#125;</span>&gt;<span class="hljs-subst">&#123;message[<span class="hljs-string">&#x27;name&#x27;</span>]&#125;</span>&lt;/a&gt;&quot;</span><br><span class="hljs-built_in">print</span>(a_url)<br></code></pre></td></tr></table></figure><h3 id="7-字符串大小写转换-upper-lower"><a href="#7-字符串大小写转换-upper-lower" class="headerlink" title="7. 字符串大小写转换 upper &amp; lower "></a><font color=#1E90FF>7. 字符串大小写转换 upper &amp; lower </font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;aSdF&#x27;</span><br>str2 = str1.upper()    <span class="hljs-comment"># str2 = ASDF</span><br>str3 = str1.lower()    <span class="hljs-comment"># str3 = asdf</span><br></code></pre></td></tr></table></figure><h3 id="8-字符串切片"><a href="#8-字符串切片" class="headerlink" title="8. 字符串切片[::]"></a><font color=#1E90FF>8. 字符串切片<code>[::]</code></font></h3><ul><li><p><code>[start: end : step]</code>，也就是<code>[ 起始下标 : 终止下标 : 间隔距离 ]</code></p></li><li><p>字符串翻转</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;249&#x27;</span><br><span class="hljs-built_in">print</span>(a[::-<span class="hljs-number">1</span>])  <span class="hljs-comment"># 942</span><br></code></pre></td></tr></table></figure><h3 id="9-字符串遍历"><a href="#9-字符串遍历" class="headerlink" title="9. 字符串遍历"></a><font color=#1E90FF>9. 字符串遍历</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;asdf&#x27;</span><br><span class="hljs-keyword">for</span> singo_a <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-built_in">print</span>(singo_a)    <span class="hljs-comment"># a s d f </span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a_str = <span class="hljs-string">&#x27;[&quot;aaa&quot;]&#x27;</span><br>a_change_str = a_str[<span class="hljs-number">2</span>:-<span class="hljs-number">2</span>]<br><br><span class="hljs-built_in">print</span>(a_change_str)   <span class="hljs-comment"># aaa</span><br></code></pre></td></tr></table></figure><h2 id="4-链表"><a href="#4-链表" class="headerlink" title="4. 链表"></a><font color=#1E90FF>4. 链表</font></h2><h3 id="1-链表的定义"><a href="#1-链表的定义" class="headerlink" title="1. 链表的定义"></a><font color=#1E90FF>1. 链表的定义</font></h3><ul><li>介绍：链表是由一系列节点组成的元素集合。每个节点包含两部分，<mark>数据域item和指向下一个节点的指针next</mark>。通过节点之间的相互连接，最终串联成一个链表</li><li>节点代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-comment"># 数据域</span><br>        self.item = item<br>        <span class="hljs-comment"># 节点</span><br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><ul><li>示例：</li></ul><div style="text-align:center;gap:5px">    <img src="/img/python_pic/69.png" alt="图片描述" style="zoom:60%;"></div><h3 id="2-链表的创建和遍历"><a href="#2-链表的创建和遍历" class="headerlink" title="2. 链表的创建和遍历"></a><font color=#1E90FF>2. 链表的创建和遍历</font></h3><ol><li><p>创建</p><ol><li>头插法</li></ol><div style="text-align:center;gap:5px">    <img src="/img/python_pic/70.png" alt="图片描述" style="zoom:60%;"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, item</span>):<br>        self.item = item<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 头插法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">creat_linklist_head</span>(<span class="hljs-params">li</span>):<br>    head = Node(li[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> li[<span class="hljs-number">1</span>:]:<br>        <span class="hljs-comment"># 将需要插入的元素变为节点</span><br>        node = Node(element)<br>        <span class="hljs-comment"># 插入元素的指针指向，当前的头结点</span><br>        node.<span class="hljs-built_in">next</span> = head<br>        <span class="hljs-comment"># 将头结点变为插入元素</span><br>        head = node<br>    <span class="hljs-keyword">return</span> head<br><br><span class="hljs-comment"># 打印链表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_lonklist</span>(<span class="hljs-params">lk</span>):<br>    <span class="hljs-keyword">while</span> lk:<br>        <span class="hljs-built_in">print</span>(lk.item, end=<span class="hljs-string">&#x27;,&#x27;</span>)<br>        lk = lk.<span class="hljs-built_in">next</span><br><br>lk = creat_linklist_head([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br>print_lonklist(lk)      <span class="hljs-comment"># 3,2,1,</span><br></code></pre></td></tr></table></figure><ol start="2"><li>尾插法</li></ol><div style="text-align:center;gap:5px">    <img src="/img/python_pic/71.png" alt="图片描述" style="zoom:60%;"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, item</span>):<br>        self.item = item<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 尾差法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">creat_linklist_tail</span>(<span class="hljs-params">li</span>):<br>    <span class="hljs-comment"># 需要同时确定头结点和尾节点</span><br>    head = Node(li[<span class="hljs-number">0</span>])<br>    tail = head<br>    <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> li[<span class="hljs-number">1</span>:]:<br>        node = Node(element)<br>        tail.<span class="hljs-built_in">next</span> = node<br>        tail = node<br>    <span class="hljs-keyword">return</span> head<br><br><span class="hljs-comment"># 打印链表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_lonklist</span>(<span class="hljs-params">lk</span>):<br>    <span class="hljs-keyword">while</span> lk:<br>        <span class="hljs-built_in">print</span>(lk.item, end=<span class="hljs-string">&#x27;,&#x27;</span>)<br>        lk = lk.<span class="hljs-built_in">next</span><br><br>lk = creat_linklist_tail([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br>print_lonklist(lk)      <span class="hljs-comment"># 1,2,3,</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="3-插入"><a href="#3-插入" class="headerlink" title="3. 插入"></a><font color=#1E90FF>3. 插入</font></h3><div style="text-align:center;gap:5px">    <img src="/img/python_pic/72.png" alt="图片描述" style="zoom:60%;"></div><ul><li>注：插入元素时，需先连接待插入元素的尾部，再连接待插入元素的头部；如先将待插入元素的头部插入，原始数据的断开部分将消失</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, item</span>):<br>        self.item = item<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 尾差法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">creat_linklist_tail</span>(<span class="hljs-params">li</span>):<br>    head = Node(li[<span class="hljs-number">0</span>])<br>    tail = head<br>    <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> li[<span class="hljs-number">1</span>:]:<br>        node = Node(element)<br>        tail.<span class="hljs-built_in">next</span> = node<br>        tail = node<br>    <span class="hljs-keyword">return</span> head<br><br><span class="hljs-comment"># 中间插入</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert_linklist</span>(<span class="hljs-params">lk, element</span>):<br>    node = Node(element)<br>    <span class="hljs-comment"># 先连接待插入元素的尾部，再连接待插入元素的头部</span><br>    node.<span class="hljs-built_in">next</span> = lk.<span class="hljs-built_in">next</span><br>    lk.<span class="hljs-built_in">next</span> = node<br>    <span class="hljs-keyword">return</span> lk<br><br><span class="hljs-comment"># 打印链表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_lonklist</span>(<span class="hljs-params">lk</span>):<br>    <span class="hljs-keyword">while</span> lk:<br>        <span class="hljs-built_in">print</span>(lk.item, end=<span class="hljs-string">&#x27;,&#x27;</span>)<br>        lk = lk.<span class="hljs-built_in">next</span><br><br>lk = creat_linklist_tail([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br>lk = insert_linklist(lk, <span class="hljs-number">4</span>)<br>print_lonklist(lk)    <span class="hljs-comment"># 1,4,2,3,</span><br></code></pre></td></tr></table></figure><h3 id="4-删除"><a href="#4-删除" class="headerlink" title="4. 删除"></a><font color=#1E90FF>4. 删除</font></h3><div style="text-align:center;gap:5px">    <img src="/img/python_pic/73.png" alt="图片描述" style="zoom:60%;"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, item</span>):<br>        self.item = item<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 尾差法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">creat_linklist_tail</span>(<span class="hljs-params">li</span>):<br>    head = Node(li[<span class="hljs-number">0</span>])<br>    tail = head<br>    <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> li[<span class="hljs-number">1</span>:]:<br>        node = Node(element)<br>        tail.<span class="hljs-built_in">next</span> = node<br>        tail = node<br>    <span class="hljs-keyword">return</span> head<br><br><span class="hljs-comment"># 删除链表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delect_linklist</span>(<span class="hljs-params">lk</span>):<br>    element = lk.<span class="hljs-built_in">next</span><br>    lk.<span class="hljs-built_in">next</span> = element.<span class="hljs-built_in">next</span><br>    <span class="hljs-keyword">return</span> lk<br><br><span class="hljs-comment"># 打印链表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_lonklist</span>(<span class="hljs-params">lk</span>):<br>    <span class="hljs-keyword">while</span> lk:<br>        <span class="hljs-built_in">print</span>(lk.item, end=<span class="hljs-string">&#x27;,&#x27;</span>)<br>        lk = lk.<span class="hljs-built_in">next</span><br><br>lk = creat_linklist_tail([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br>lk = delect_linklist(lk)<br>print_lonklist(lk)   <span class="hljs-comment"># 1,3,</span><br></code></pre></td></tr></table></figure><h3 id="5-练习"><a href="#5-练习" class="headerlink" title="5. 练习"></a><font color=#1E90FF>5. 练习</font></h3><ol><li>反转链表</li></ol><ul><li>需求：当输入链表<code>&#123;1,2,3&#125;</code>时，经反转后，原链表变为<code>&#123;3,2,1&#125;</code></li><li>解决思路：<ul><li>把当前节点的next存起来，<code>next = curr.next</code></li><li>把当前节点的next指向前一个节点，<code>curr.next = prev</code>，第一次时<code>prev</code>为空</li><li>前指针后移 <code>prev = curr</code></li><li>当前指针后移<code>curr = next</code></li><li>当循环到最后时，返回前指针<code>prev</code></li></ul></li></ul><div style="text-align:center;gap:5px">    <img src="/img/python_pic/74.png" alt="图片描述" style="zoom:60%;"></div><ul><li>代码书写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, item</span>):<br>        self.item = item<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 创建链表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_link_list</span>(<span class="hljs-params">li</span>):<br>    head = Node(li[<span class="hljs-number">0</span>])<br>    tail = head<br>    <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> li[<span class="hljs-number">1</span>:]:<br>        node = Node(element)<br>        tail.<span class="hljs-built_in">next</span> = node<br>        tail = node<br>    <span class="hljs-keyword">return</span> head<br><br><span class="hljs-comment"># 反转链表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_link_list</span>(<span class="hljs-params">lk</span>):<br>    prev = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">while</span> lk:<br>        <span class="hljs-built_in">next</span> = lk.<span class="hljs-built_in">next</span>    <span class="hljs-comment"># 把当前节点的next存起来</span><br>        lk.<span class="hljs-built_in">next</span> = prev    <span class="hljs-comment"># 把当前节点的next指向前一个节点</span><br>        prev = lk         <span class="hljs-comment"># 前指针后移</span><br>        lk = <span class="hljs-built_in">next</span>         <span class="hljs-comment"># 当前指针后移</span><br>    <span class="hljs-keyword">return</span> prev<br><br><span class="hljs-comment"># 打印链表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_link_list</span>(<span class="hljs-params">lk</span>):<br>    <span class="hljs-keyword">while</span> lk:<br>        <span class="hljs-built_in">print</span>(lk.item, end=<span class="hljs-string">&#x27;,&#x27;</span>)<br>        lk = lk.<span class="hljs-built_in">next</span><br><br>lk = make_link_list([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br>lk = change_link_list(lk)<br>print_link_list(lk)      <span class="hljs-comment"># 3,2,1,</span><br></code></pre></td></tr></table></figure><h2 id="5-数字"><a href="#5-数字" class="headerlink" title="5. 数字"></a><font color=#1E90FF>5. 数字</font></h2><h3 id="1-结果保留x位小数-round"><a href="#1-结果保留x位小数-round" class="headerlink" title="1. 结果保留x位小数 round %"></a><font color=#1E90FF>1. 结果保留x位小数 round %</font></h3><ul><li>会自动对结尾数据进行四舍五入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 保留两位小数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%.2f&#x27;</span> % <span class="hljs-number">1.2653</span>)   <span class="hljs-comment"># 1.27</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">1.2653</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 1.27</span><br></code></pre></td></tr></table></figure><h3 id="2-判断是否为纯数字-isdigit"><a href="#2-判断是否为纯数字-isdigit" class="headerlink" title="2. 判断是否为纯数字 isdigit()"></a><font color=#1E90FF>2. 判断是否为纯数字 <code>isdigit()</code></font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">char1 = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-built_in">print</span>(char1.isdigit())  <span class="hljs-comment">#True</span><br><br>char2 = <span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-built_in">print</span>(char2.isdigit())   <span class="hljs-comment">#False</span><br><br>str1 = <span class="hljs-string">&quot;21345&quot;</span><br><span class="hljs-built_in">print</span>(str1.isdigit())   <span class="hljs-comment">#True</span><br><br>str2 = <span class="hljs-string">&quot;2134a&quot;</span><br><span class="hljs-built_in">print</span>(str2.isdigit())   <span class="hljs-comment">#False</span><br></code></pre></td></tr></table></figure><h3 id="3-除法-和-运算符的区别"><a href="#3-除法-和-运算符的区别" class="headerlink" title="3. 除法 &#x2F;&#x2F; 和 &#x2F; 运算符的区别"></a><font color=#1E90FF>3. 除法 &#x2F;&#x2F; 和 &#x2F; 运算符的区别</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">180</span><br>i = <span class="hljs-number">2</span><br><br><span class="hljs-comment"># /：保留计算结果的完整数值</span><br>b = a/i<br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># 90.0</span><br><br><span class="hljs-comment"># // ：只保留计算结果的整数部分</span><br>c = a//i<br><span class="hljs-built_in">print</span>(c)  <span class="hljs-comment"># 90</span><br></code></pre></td></tr></table></figure><h3 id="4-计算n次方"><a href="#4-计算n次方" class="headerlink" title="4. 计算n次方 **"></a><font color=#1E90FF>4. 计算n次方 **</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br>a = <span class="hljs-number">7</span><br>b = a**<span class="hljs-number">0.5</span><br><span class="hljs-built_in">print</span>(b, <span class="hljs-built_in">round</span>(b,<span class="hljs-number">10</span>))    <span class="hljs-comment"># 2.6457513110645907 2.6457513111</span><br><br>c=math.sqrt(a)<br><span class="hljs-built_in">print</span>(c, <span class="hljs-built_in">round</span>(c,<span class="hljs-number">10</span>))    <span class="hljs-comment"># 2.6457513110645907 2.6457513111</span><br></code></pre></td></tr></table></figure><h3 id="5-向上取整-向下取整-四舍五入"><a href="#5-向上取整-向下取整-四舍五入" class="headerlink" title="5. 向上取整 向下取整 四舍五入"></a><font color=#1E90FF>5. 向上取整 向下取整 四舍五入</font></h3><ol><li>向上取整： <code>math.ceil()</code></li><li>向下取整： <code>math.floor()</code></li><li>四舍五入： <code>round()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><br>x = <span class="hljs-number">3.14</span><br>y = math.ceil(x)<br><span class="hljs-built_in">print</span>(y)   <span class="hljs-comment"># 4</span><br><br>y = math.floor(x)<br><span class="hljs-built_in">print</span>(y)   <span class="hljs-comment"># 3</span><br><br>y =<span class="hljs-built_in">round</span>(y)<br><span class="hljs-built_in">print</span>(y)   <span class="hljs-comment"># 3</span><br></code></pre></td></tr></table></figure><h3 id="6-求最值-max"><a href="#6-求最值-max" class="headerlink" title="6. 求最值 max()"></a><font color=#1E90FF>6. 求最值 <code>max()</code></font></h3><ul><li>注：不要使用<code>if</code>做判断</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">max_len = <span class="hljs-built_in">max</span>(max_len, s_len)<br></code></pre></td></tr></table></figure><h2 id="6-数据类型转化"><a href="#6-数据类型转化" class="headerlink" title="6. 数据类型转化"></a><font color=#1E90FF>6. 数据类型转化</font></h2><h3 id="1-set-清除列表重复元素"><a href="#1-set-清除列表重复元素" class="headerlink" title="1. set 清除列表重复元素"></a><font color=#1E90FF>1. set 清除列表重复元素</font></h3><ol><li>list -&gt; set -&gt; list</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name = [<span class="hljs-string">&#x27;李雪&#x27;</span>,<span class="hljs-string">&#x27;李雪&#x27;</span>,<span class="hljs-string">&#x27;张辰&#x27;</span>]<br>name_set = <span class="hljs-built_in">set</span>(name)<br><span class="hljs-built_in">print</span>(name_set)  <span class="hljs-comment">#&#123;&#x27;张辰&#x27;, &#x27;李雪&#x27;&#125;</span><br><br>name_list = <span class="hljs-built_in">list</span>(name_set)<br><span class="hljs-built_in">print</span>(name_list)  <span class="hljs-comment">#[&#x27;张辰&#x27;, &#x27;李雪&#x27;]</span><br></code></pre></td></tr></table></figure><ol start="2"><li>list -&gt; set -&gt; str</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">case_list = [<span class="hljs-string">&#x27;[]&#x27;</span>, <span class="hljs-string">&#x27;[]&#x27;</span>, <span class="hljs-string">&#x27;[&quot;19158&quot;]&#x27;</span>, <span class="hljs-string">&#x27;[]&#x27;</span>,<span class="hljs-string">&#x27;[&quot;18695&quot;]&#x27;</span>, <span class="hljs-string">&#x27;[]&#x27;</span>]<br>fail_case = <span class="hljs-built_in">set</span>(case_list)  <br><br><span class="hljs-keyword">for</span> singo_set_list <span class="hljs-keyword">in</span> fail_case<br><br><span class="hljs-comment">#singo_set_list  ---  &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-comment">#fail_case  ---  &lt;class &#x27;set&#x27;&gt; </span><br></code></pre></td></tr></table></figure><h3 id="2-list-与-str-相互转换"><a href="#2-list-与-str-相互转换" class="headerlink" title="2. list 与 str 相互转换"></a><font color=#1E90FF>2. list 与 str 相互转换</font></h3><ol><li><p>list -&gt; str</p><ol><li>通过循环逐一提取</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">lis = [<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>]<br><br><span class="hljs-built_in">print</span>(lis[<span class="hljs-number">0</span>], <span class="hljs-built_in">type</span>(lis[<span class="hljs-number">0</span>]))  <span class="hljs-comment"># aaa &lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>将整个列表转为字符串</li></ol><ul><li>使用map函数,将列表内部元素转换成字符串格式，然后使用join拼接字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a_list = [a,b,c]<br>a_str = <span class="hljs-string">&quot;,&quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, a_list))<br><br><span class="hljs-built_in">print</span>(a_str)  <span class="hljs-comment"># 1,2,3</span><br></code></pre></td></tr></table></figure></li><li><p>str -&gt; list</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;baidu, nihao, kugou&quot;</span><br>b = a.split(<span class="hljs-string">&#x27;, &#x27;</span>)<br><br><span class="hljs-built_in">print</span>(b,<span class="hljs-built_in">type</span>(b))  <span class="hljs-comment"># [&#x27;baidu&#x27;, &#x27;nihao&#x27;, &#x27;kugou&#x27;] &lt;class &#x27;list&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-aaa-bbb-‘str’-转化为-‘list’-—-eval"><a href="#3-aaa-bbb-‘str’-转化为-‘list’-—-eval" class="headerlink" title="3.&#39;[[&quot;aaa&quot;],[&quot;bbb&quot;]]&#39; ‘str’ 转化为 ‘list’  — eval "></a><font color=#1E90FF>3.<code>&#39;[[&quot;aaa&quot;],[&quot;bbb&quot;]]&#39;</code> ‘str’ 转化为 ‘list’  — eval </font></h3><p>常用于django接收到用户数据，django默认将所有数据类型转为str形式，我们后台再手动转为list形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">test_a = [[<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-number">2</span>],[<span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-number">5</span>],[<span class="hljs-string">&#x27;云南&#x27;</span>,<span class="hljs-number">1</span>]]<br>test_b = <span class="hljs-built_in">str</span>(test_a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test_a&#x27;</span>,test_a,<span class="hljs-built_in">type</span>(test_a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test_b&#x27;</span>,test_b,<span class="hljs-built_in">type</span>(test_b))<br><br>test_b_list = <span class="hljs-built_in">eval</span>(test_b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test_b_list&#x27;</span>,test_b_list,<span class="hljs-built_in">type</span>(test_b_list))<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/python_pic/15.png" alt="图片描述" style="zoom:80%;"></div><h3 id="4-str-list转为datetime-date形式"><a href="#4-str-list转为datetime-date形式" class="headerlink" title="4. str &amp; list转为datetime.date形式"></a><font color=#1E90FF>4. str &amp; list转为datetime.date形式</font></h3><ul><li>datetime.date可以进行时间比较</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime,timedelta<br><br>bug_creation_date_list = [<span class="hljs-string">&#x27;2023-02-10&#x27;</span>]<br>bug_creation_date_str = <span class="hljs-string">&#x27;2023-02-10&#x27;</span><br><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(bug_creation_date_list) == <span class="hljs-built_in">list</span>:<br>    bug_creation_date_list_datetime = datetime.strptime(bug_creation_date_list[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>).date() <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;bug_creation_date_list_datetime&#x27;</span>,bug_creation_date_list_datetime,<span class="hljs-built_in">type</span>(bug_creation_date_list_datetime))<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(bug_creation_date_str) == <span class="hljs-built_in">str</span>:<br>    bug_creation_date_str_datetime = datetime.strptime(bug_creation_date_str, <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>).date()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;bug_creation_date_str_datetime&#x27;</span>,bug_creation_date_str_datetime,<span class="hljs-built_in">type</span>(bug_creation_date_str_datetime))<br></code></pre></td></tr></table></figure><h3 id="5-tumple-转-list"><a href="#5-tumple-转-list" class="headerlink" title="5. tumple 转 list"></a><font color=#1E90FF>5. tumple 转 list</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">tup = (<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">11</span>, <span class="hljs-number">46</span>, <span class="hljs-number">18</span>)<br><span class="hljs-built_in">print</span>(tup)   <span class="hljs-comment"># (21, 19, 11, 46, 18)</span><br><br>lt = <span class="hljs-built_in">list</span>(tup)<br><span class="hljs-built_in">print</span>(lt)   <span class="hljs-comment"># [21, 19, 11, 46, 18]</span><br></code></pre></td></tr></table></figure><h3 id="6-str-转-dict"><a href="#6-str-转-dict" class="headerlink" title="6. str 转 dict"></a><font color=#1E90FF>6. str 转 dict</font></h3><p>推荐<code>literal_eval</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ast<br>user = <span class="hljs-string">&#x27;&#123;&quot;name&quot; : &quot;john&quot;, &quot;gender&quot; : &quot;male&quot;, &quot;age&quot;: 28&#125;&#x27;</span><br>user_dict = ast.literal_eval(user)<br><br><span class="hljs-built_in">print</span>(user_dict)   <span class="hljs-comment"># &#123;&#x27;gender&#x27;: &#x27;male&#x27;, &#x27;age&#x27;: 28, &#x27;name&#x27;: &#x27;john&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="7-datetime-转str-，毫秒级别转换"><a href="#7-datetime-转str-，毫秒级别转换" class="headerlink" title="7. datetime 转str ，毫秒级别转换"></a><font color=#1E90FF>7. datetime 转str ，毫秒级别转换</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime <br><br>now = datetime.datetime.now() <br>str_now = now.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S.%f&quot;</span>)[:-<span class="hljs-number">3</span>] <br><span class="hljs-built_in">print</span>(str_now) <br><br><span class="hljs-comment"># 2021-10-20 14:30:00.123 </span><br></code></pre></td></tr></table></figure><ol><li><code>strftime()</code>方法将当前时间转换为一个字符串，格式为<code>%Y-%m-%d %H:%M:%S.%f</code>，其中<code>%f</code>表示毫秒。</li><li>由于<code>strftime()</code>方法输出的毫秒是6位数，因此我们使用<code>[:-3]</code>来截取前面的13位，以获得3位毫秒。</li></ol><h3 id="8-float转百分比"><a href="#8-float转百分比" class="headerlink" title="8. float转百分比"></a><font color=#1E90FF>8. float转百分比</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">0.75</span> <br>percent = <span class="hljs-string">&quot;&#123;:.2%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(num) <br><span class="hljs-built_in">print</span>(percent)  <span class="hljs-comment"># 75.00%</span><br></code></pre></td></tr></table></figure><h3 id="9-99-str类型，转换为0-99-float类型"><a href="#9-99-str类型，转换为0-99-float类型" class="headerlink" title="9.99% str类型，转换为0.99 float类型"></a><font color=#1E90FF>9.<code>99%</code> str类型，转换为<code>0.99</code> float类型</font></h3><ol><li><code>strip()</code> 方法去掉字符串中的百分号。</li><li>将结果转换为浮点数类型，并将其除以 100，得到所需的浮点数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">percent_str = <span class="hljs-string">&#x27;99%&#x27;</span> <br>percent_float = <span class="hljs-built_in">float</span>(percent_str.strip(<span class="hljs-string">&#x27;%&#x27;</span>)) / <span class="hljs-number">100</span> <br><span class="hljs-built_in">print</span>(percent_float)<br></code></pre></td></tr></table></figure><h3 id="10-list-转为-dict-类型-fromkeys"><a href="#10-list-转为-dict-类型-fromkeys" class="headerlink" title="10. list 转为 dict 类型   fromkeys"></a><font color=#1E90FF>10. list 转为 dict 类型   fromkeys</font></h3><ul><li><p>用于创建包含指定key的字典，如果不指定默认值则为None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#不指定默认值</span><br><span class="hljs-built_in">dict</span>.fromkeys([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]) <br><span class="hljs-comment"># &#123;&#x27;a&#x27;: None, &#x27;b&#x27;: None, &#x27;c&#x27;: None, &#x27;d&#x27;: None&#125;</span><br><br><span class="hljs-comment">#指定默认值</span><br><span class="hljs-built_in">dict</span>.fromkeys([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>], <span class="hljs-number">1</span>)<br>&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span> <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="11-int类型与str类型相互转换"><a href="#11-int类型与str类型相互转换" class="headerlink" title="11. int类型与str类型相互转换"></a><font color=#1E90FF>11. int类型与str类型相互转换</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1171</span><br>b = <span class="hljs-built_in">str</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b),b)  <span class="hljs-comment">#&lt;class &#x27;str&#x27;&gt; 1171</span><br><br>c = <span class="hljs-string">&#x27;1171&#x27;</span><br>d = <span class="hljs-built_in">int</span>(c)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(d),d)  <span class="hljs-comment">#&lt;class &#x27;int&#x27;&gt; 1171</span><br></code></pre></td></tr></table></figure><h2 id="7-循环-判断"><a href="#7-循环-判断" class="headerlink" title="7. 循环 &#x2F; 判断"></a><font color=#1E90FF>7. 循环 &#x2F; 判断</font></h2><h3 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1. for循环 "></a><font color=#1E90FF>1. for循环 </font></h3><h4 id="1-range"><a href="#1-range" class="headerlink" title="1. range"></a><font color=#1E90FF>1. range</font></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;xxxxxx&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s), <span class="hljs-number">8</span>):<br>    <span class="hljs-built_in">print</span>(s[i:i+<span class="hljs-number">8</span>])<br></code></pre></td></tr></table></figure><h4 id="2-循环表达式"><a href="#2-循环表达式" class="headerlink" title="2. 循环表达式"></a><font color=#1E90FF>2. 循环表达式</font></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">cards = [<span class="hljs-string">&#x27;3B&#x27;</span>,<span class="hljs-string">&#x27;2B&#x27;</span>,<span class="hljs-string">&#x27;1B&#x27;</span>,<span class="hljs-string">&#x27;4B&#x27;</span>,<span class="hljs-string">&#x27;5B&#x27;</span>]<br><br>suits = [card[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> card <span class="hljs-keyword">in</span> cards]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;suits&#x27;</span>, suits)  <span class="hljs-comment"># (&#x27;suits&#x27;, [&#x27;B&#x27;, &#x27;B&#x27;, &#x27;B&#x27;, &#x27;B&#x27;, &#x27;B&#x27;])</span><br></code></pre></td></tr></table></figure><h4 id="3-倒序循环"><a href="#3-倒序循环" class="headerlink" title="3. 倒序循环"></a><font color=#1E90FF>3. 倒序循环</font></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">li = <span class="hljs-string">&#x27;2345&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> li[：：-<span class="hljs-number">1</span>]:<br>    <span class="hljs-built_in">print</span>(li[i])  <span class="hljs-comment">#5432</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">li = <span class="hljs-string">&#x27;2345&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(li)-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(li[i])  <span class="hljs-comment">#5432</span><br></code></pre></td></tr></table></figure><h4 id="4-enumerate"><a href="#4-enumerate" class="headerlink" title="4. enumerate"></a><font color=#1E90FF>4. enumerate</font></h4><p><code>enumerate</code> 可以将一个可迭代对象（如列表、元组、字符串等）组合成一个索引序列，同时列出数据和数据下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>]<br><span class="hljs-keyword">for</span> index, fruit <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(fruits):<br>    <span class="hljs-built_in">print</span>(index, fruit)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0</span> apple<br><span class="hljs-number">1</span> banana<br><span class="hljs-number">2</span> orange<br></code></pre></td></tr></table></figure><ul><li>等价写法为</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fruits)):<br>    <span class="hljs-built_in">print</span>(i, fruits[i])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0</span> apple<br><span class="hljs-number">1</span> banana<br><span class="hljs-number">2</span> orange<br></code></pre></td></tr></table></figure><h3 id="2-while循环"><a href="#2-while循环" class="headerlink" title="2. while循环"></a><font color=#1E90FF>2. while循环</font></h3><p>如果message为空，则跳出while循环</p><div style="text-align:center;gap:5px">    <img src="/img/python_pic/43.png" alt="图片描述" style="zoom:60%;"></div><h3 id="3-if判断"><a href="#3-if判断" class="headerlink" title="3. if判断"></a><font color=#1E90FF>3. if判断</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;待机&#x27;</span>, <span class="hljs-string">&#x27;待机（典型）&#x27;</span>, <span class="hljs-string">&#x27;待机（重度）&#x27;</span>, <span class="hljs-string">&#x27;待机（长续航）&#x27;</span>]:<br>    <span class="hljs-keyword">continue</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;待机&#x27;</span>, <span class="hljs-string">&#x27;待机（典型）&#x27;</span>, <span class="hljs-string">&#x27;待机（重度）&#x27;</span>, <span class="hljs-string">&#x27;待机（长续航）&#x27;</span>]: <br>    <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="8-程序相关"><a href="#8-程序相关" class="headerlink" title="8. 程序相关"></a><font color=#1E90FF>8. 程序相关</font></h2><h3 id="1-相同文件夹下两个py文件相互调用，1或2个函数调用"><a href="#1-相同文件夹下两个py文件相互调用，1或2个函数调用" class="headerlink" title="1. 相同文件夹下两个py文件相互调用，1或2个函数调用"></a><font color=#1E90FF>1. 相同文件夹下两个py文件相互调用，1或2个函数调用</font></h3><ol><li>一个返回值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#get_renlichi_message</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Get_Renlichi_Message</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Renlichi_input_import_message</span>(<span class="hljs-params">self</span>):<br>        balabala<br>        <span class="hljs-keyword">return</span> project_id<br>        <br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    renlichi = Get_Renlichi_message()<br>    renlichi.Renlichi_get_renlichi_title_message()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#get_micase_message</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Get_Micase_Message</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Micase_get_runs_api</span>(<span class="hljs-params">self,project_id</span>):<br>        balabala<br>        <br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    renlichi = Get_Renlichi_Message()<br>    project_id = renlichi.Renlichi_get_renlichi_title_message()<br><br>    micase = Get_Micase_Message()<br>    micase.Micase_get_runs_api(project_id)<br></code></pre></td></tr></table></figure><ol start="2"><li>两个返回值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#get_renlichi_message</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Get_Renlichi_Message</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Renlichi_input_import_message</span>(<span class="hljs-params">self</span>):<br>        balabala<br>        <span class="hljs-keyword">return</span> project_id,plan_id<br>        <br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    renlichi = Get_Renlichi_message()<br>    renlichi.Renlichi_get_renlichi_title_message()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#get_micase_message</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Get_Micase_Message</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Micase_get_runs_api</span>(<span class="hljs-params">self,project_id</span>):<br>        balabala<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Micase_get_plan_api</span>(<span class="hljs-params">self, plan_id</span>):<br>        balabala <br>        <br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment">#主函数中如果只赋一个值，则输出内容为一个元组</span><br>    renlichi = Get_Renlichi_Message()<br>    project_id,plan_id = renlichi.Renlichi_get_renlichi_title_message()<br><br>    micase = Get_Micase_Message()<br>    micase.Micase_get_runs_api(project_id)<br>    micase. Micase_get_plan_api(plan_id)<br></code></pre></td></tr></table></figure><ol start="3"><li>另一种方法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#get_renlichi_message</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Get_Renlichi_Message</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Renlichi_input_import_message</span>(<span class="hljs-params">self</span>):<br>        balabala<br>        <span class="hljs-keyword">return</span> self.project_id<br>        <br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    renlichi = Get_Renlichi_message()<br>    renlichi.Renlichi_get_renlichi_title_message()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#get_micase_message</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Get_Micase_Message</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Micase_get_runs_api</span>(<span class="hljs-params">self,project_id</span>):<br>        balabala<br>        <br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    renlichi = Get_Renlichi_Message()<br>    renlichi.Renlichi_get_renlichi_title_message()<br><br>    micase = Get_Micase_Message()<br>    micase.Micase_get_runs_api(renlichi.project_id)<br></code></pre></td></tr></table></figure><h3 id="2-程序调用"><a href="#2-程序调用" class="headerlink" title="2. 程序调用"></a><font color=#1E90FF>2. 程序调用</font></h3><div style="text-align:center;gap:5px">    <img src="/img/python_pic/36.png" alt="图片描述" style="zoom:85%;">    <img src="/img/python_pic/37.png" alt="图片描述" style="zoom:85%;"></div><h3 id="3-跨文件夹生成文件，以及读取文件"><a href="#3-跨文件夹生成文件，以及读取文件" class="headerlink" title="3. 跨文件夹生成文件，以及读取文件"></a><font color=#1E90FF>3. 跨文件夹生成文件，以及读取文件</font></h3><div style="text-align:center;gap:5px">    <img src="/img/python_pic/17.png" alt="图片描述" style="zoom:60%;"></div><ol><li>生成文件</li></ol><div style="text-align:center;gap:5px">    <img src="/img/python_pic/18.png" alt="图片描述" style="zoom:60%;"></div><ol start="2"><li>读取文件</li></ol><div style="text-align:center;gap:5px">    <img src="/img/python_pic/19.png" alt="图片描述" style="zoom:60%;"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在读文件中,&#x27;.&#x27;写作os.path.abspath(r&quot;.&quot;)</span><br><br>html_path = os.path.abspath(<span class="hljs-string">r&quot;.&quot;</span>) + <span class="hljs-string">&quot;\email_message\&#123;&#125;.html&quot;</span>.<span class="hljs-built_in">format</span>(test_rounds_and_task_feature_list)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;html_path&#x27;</span>,html_path)<br><span class="hljs-comment"># f = open(html_path, &quot;r&quot;, encoding=&#x27;gbk&#x27;)</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(html_path, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    html = f.read()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;html&#x27;</span>, html)<br></code></pre></td></tr></table></figure><h3 id="4-获取文件路径问题"><a href="#4-获取文件路径问题" class="headerlink" title="4. 获取文件路径问题"></a><font color=#1E90FF>4. 获取文件路径问题</font></h3><ol><li>获得当前文件所在位置</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">html_path = os.path.abspath(<span class="hljs-string">r&quot;.&quot;</span>)<br><span class="hljs-comment"># 或</span><br>html_path = os.getcwd()<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/python_pic/20.png" alt="图片描述" style="zoom:60%;"></div><ol start="2"><li>获取上一级文件夹所在位置</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">html_path1 = os.path.dirname(os.getcwd())<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/python_pic/21.png" alt="图片描述" style="zoom:60%;"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">os.getcwd() <span class="hljs-comment"># 获取的是当前工作的目录（运行终端的路径）</span><br><br>os.path.dirname(__file__) <span class="hljs-comment"># 获取的执行脚本的路径</span><br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/python_pic/22.png" alt="图片描述" style="zoom:60%;"></div><h3 id="5-路径调用案例"><a href="#5-路径调用案例" class="headerlink" title="5. 路径调用案例"></a><font color=#1E90FF>5. 路径调用案例</font></h3><ul><li>注：两文件处在同一级，<code>send_email_message</code>无法调用<code>email_iauth</code></li></ul><div style="text-align:center;gap:5px">    <img src="/img/python_pic/23.png" alt="图片描述" style="zoom:60%;"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取当前文件路径，路径最终至此文件夹的名称</span><br><span class="hljs-comment"># E:\pythonProject\djangoProject\app01\logic\send_power_test_email\send_email_message.py</span><br>py_path = os.path.abspath(__file__)<br><br><span class="hljs-comment"># 回到py_path的上三级父路径</span><br><span class="hljs-comment"># E:\pythonProject\djangoProject\app01</span><br>app01_path = os.path.dirname(os.path.dirname(os.path.dirname(py_path)))<br><br><span class="hljs-comment"># 将父亲路径添加到环境目录中，是文件可以查找到此路径</span><br>sys.path.append(app01_path)<br><br><span class="hljs-comment"># 可以顺利调用app01文件</span><br><span class="hljs-keyword">from</span> app01.logic.send_power_test_email.email_iauth <span class="hljs-keyword">import</span> *<br></code></pre></td></tr></table></figure><h2 id="8-matplotlib库绘图"><a href="#8-matplotlib库绘图" class="headerlink" title="8. matplotlib库绘图"></a><font color=#1E90FF>8. matplotlib库绘图</font></h2><h3 id="1-python绘制表格图片"><a href="#1-python绘制表格图片" class="headerlink" title="1. python绘制表格图片"></a><font color=#1E90FF>1. python绘制表格图片</font></h3><p>python生成列表图片。第一行表头是姓名，总计，Blocker，Critical，Major，Minor。下方表单数据，第二行是张辰，1，2，3，4，5第三行是兰兰，5，4，3，2，1。使生成的图片中的汉字可以以正确的方式展示出来。表格内无任何边框，单元格无任何边框。设置单元格的高度和宽度，根据表单中的元素数量，灵活变换图片大小。所有数据在单元格中居中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw, ImageFont<br><br><span class="hljs-comment"># 表格数据</span><br>data = [<br>    [<span class="hljs-string">&#x27;姓名&#x27;</span>, <span class="hljs-string">&#x27;总计&#x27;</span>, <span class="hljs-string">&#x27;Blocker&#x27;</span>, <span class="hljs-string">&#x27;Critical&#x27;</span>, <span class="hljs-string">&#x27;Major&#x27;</span>, <span class="hljs-string">&#x27;Minor&#x27;</span>],<br>    [<span class="hljs-string">&#x27;张辰&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>],<br>    [<span class="hljs-string">&#x27;兰兰&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>]<br>]<br><br><span class="hljs-comment"># 设置单元格宽度和高度</span><br>cell_width = <span class="hljs-number">100</span><br>cell_height = <span class="hljs-number">50</span><br><br><span class="hljs-comment"># 计算表格大小</span><br>table_width = <span class="hljs-built_in">len</span>(data[<span class="hljs-number">0</span>]) * cell_width<br>table_height = <span class="hljs-built_in">len</span>(data) * cell_height<br><br><span class="hljs-comment"># 创建空白图片</span><br>img = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (table_width, table_height), color=<span class="hljs-string">&#x27;white&#x27;</span>)<br><br><span class="hljs-comment"># 创建绘图对象</span><br>draw = ImageDraw.Draw(img)<br><br><span class="hljs-comment"># 设置字体</span><br>font = ImageFont.truetype(<span class="hljs-string">&#x27;simsun.ttc&#x27;</span>, size=<span class="hljs-number">20</span>)<br><br><span class="hljs-comment"># 绘制表格</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data[<span class="hljs-number">0</span>])):<br>        x = j * cell_width<br>        y = i * cell_height<br>        draw.rectangle((x, y, x+cell_width, y+cell_height), outline=<span class="hljs-string">&#x27;white&#x27;</span>)<br>        draw.text((x+cell_width//<span class="hljs-number">2</span>, y+cell_height//<span class="hljs-number">2</span>), data[i][j], font=font, fill=<span class="hljs-string">&#x27;black&#x27;</span>, anchor=<span class="hljs-string">&#x27;mm&#x27;</span>)<br><br><span class="hljs-comment"># 保存图片</span><br>img.save(<span class="hljs-string">&#x27;table.png&#x27;</span>)<br>```<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/python_pic/24.png" alt="图片描述" style="zoom:60%;"></div><h3 id="2-柱状图绘制"><a href="#2-柱状图绘制" class="headerlink" title="2. 柱状图绘制"></a><font color=#1E90FF>2. 柱状图绘制</font></h3><p>python绘制水平方向的柱状图。柱的名字分别是场景，场景2，场景3，场景4。柱状图纵坐标是场景名称，横坐标是功耗实测值。柱的宽度以及相互之间的间距，随着柱子数量而改变。每个柱的中间位置都有柱子对应的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> pylab <span class="hljs-keyword">import</span> mpl<br><br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># 设置中文显示字体</span><br>mpl.rcParams[<span class="hljs-string">&quot;font.sans-serif&quot;</span>] = [<span class="hljs-string">&quot;SimHei&quot;</span>]<br><span class="hljs-comment"># 设置正常显示符号</span><br>mpl.rcParams[<span class="hljs-string">&quot;axes.unicode_minus&quot;</span>] = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 数据</span><br>scenarios = [<span class="hljs-string">&#x27;场景&#x27;</span>, <span class="hljs-string">&#x27;场景2&#x27;</span>, <span class="hljs-string">&#x27;场景3&#x27;</span>, <span class="hljs-string">&#x27;场景4&#x27;</span>,]<br>values = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><br><span class="hljs-comment"># 设置柱子宽度和间距</span><br>bar_width = <span class="hljs-number">0.5</span> / <span class="hljs-built_in">len</span>(scenarios)<br>spacing = <span class="hljs-number">0.5</span> / <span class="hljs-built_in">len</span>(scenarios)<br><br><span class="hljs-comment"># 绘制柱状图，设置图像大小、边距</span><br>fig, ax = plt.subplots(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">6</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(scenarios)):<br>    x = values[i]<br>    y = i<br>    ax.barh(y, x, height=bar_width, align=<span class="hljs-string">&#x27;center&#x27;</span>, color=<span class="hljs-string">&#x27;gray&#x27;</span>)<br>    ax.text(x+<span class="hljs-number">1</span>, y, <span class="hljs-built_in">str</span>(x), ha=<span class="hljs-string">&#x27;center&#x27;</span>, va=<span class="hljs-string">&#x27;center&#x27;</span>, color=<span class="hljs-string">&#x27;black&#x27;</span>, fontsize=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 设置坐标轴标签和范围</span><br>ax.set_xlabel(<span class="hljs-string">&#x27;功耗实测值&#x27;</span>)<br>ax.set_ylabel(<span class="hljs-string">&#x27;场景名称&#x27;</span>)<br>ax.set_yticks(np.arange(<span class="hljs-built_in">len</span>(scenarios)))<br>ax.set_yticklabels(scenarios)<br>ax.set_xlim([<span class="hljs-number">0</span>, <span class="hljs-built_in">max</span>(values)*<span class="hljs-number">1.1</span>])<br><br><span class="hljs-comment"># 显示图形</span><br>plt.show()<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/python_pic/26.png" alt="图片描述" style="zoom:60%;"></div><h3 id="3-雷达图绘制"><a href="#3-雷达图绘制" class="headerlink" title="3. 雷达图绘制"></a><font color=#1E90FF>3. 雷达图绘制</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 中文和负号的正常显示</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>]=[<span class="hljs-string">&#x27;SimHei&#x27;</span>]<br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 使用ggplot的绘图风格</span><br>plt.style.use(<span class="hljs-string">&#x27;ggplot&#x27;</span>)<br><br><span class="hljs-comment"># 构造数据</span><br>values = [<span class="hljs-number">99.9</span>, <span class="hljs-number">99.7</span>, <span class="hljs-number">99.5</span>, <span class="hljs-number">99.1</span>, <span class="hljs-number">99.8</span>]<br>feature = [<span class="hljs-string">&#x27;           P0抬腕识别率(%)&#x27;</span>, <span class="hljs-string">&#x27;P1抬腕识别率(%)&#x27;</span>, <span class="hljs-string">&#x27;P2抬腕识别率(%)        &#x27;</span>, <span class="hljs-string">&#x27;P3抬腕识别率(%)        &#x27;</span>, <span class="hljs-string">&#x27;P1落腕识别率(%)&#x27;</span>]<br><br>N = <span class="hljs-built_in">len</span>(values)<br><span class="hljs-comment"># 设置雷达图的角度，用于平分切开一个圆面</span><br>angles = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> * np.pi, N, endpoint=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 为了使雷达图一圈封闭起来，需要下面的步骤</span><br>values = np.concatenate((values, [values[<span class="hljs-number">0</span>]]))<br>angles = np.concatenate((angles, [angles[<span class="hljs-number">0</span>]]))<br>feature=np.concatenate((feature,[feature[<span class="hljs-number">0</span>]]))   <span class="hljs-comment">#对labels进行封闭</span><br><span class="hljs-comment"># 绘图</span><br>fig = plt.figure()<br><span class="hljs-comment"># 这里一定要设置为极坐标格式</span><br>ax = fig.add_subplot(<span class="hljs-number">111</span>, polar=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 绘制折线图</span><br>ax.plot(angles, values, <span class="hljs-string">&#x27;o-&#x27;</span>, linewidth=<span class="hljs-number">2</span>)<br><span class="hljs-comment"># 填充颜色</span><br>ax.fill(angles, values, alpha=<span class="hljs-number">0.25</span>)<br><br><span class="hljs-comment"># 添加每个特征的标签</span><br>ax.set_thetagrids(angles * <span class="hljs-number">180</span> / np.pi, feature)<br><span class="hljs-comment"># 设置雷达图的范围</span><br>ax.set_ylim(<span class="hljs-number">95</span>, <span class="hljs-number">100</span>)<br><span class="hljs-comment"># 添加标题</span><br>plt.title(<span class="hljs-string">&#x27;V0.3.5抬腕算法能力图&#x27;</span>)<br><span class="hljs-comment"># 添加网格线</span><br>ax.grid(<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 显示图形</span><br>plt.show()<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/python_pic/27.png" alt="图片描述" style="zoom:60%;"></div><h3 id="4-点柱图绘制"><a href="#4-点柱图绘制" class="headerlink" title="4. 点柱图绘制"></a><font color=#1E90FF>4. 点柱图绘制</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> pylab <span class="hljs-keyword">import</span> mpl<br><span class="hljs-comment"># 设置中文显示字体</span><br>mpl.rcParams[<span class="hljs-string">&quot;font.sans-serif&quot;</span>] = [<span class="hljs-string">&quot;SimHei&quot;</span>]<br><span class="hljs-comment"># 设置正常显示符号</span><br>mpl.rcParams[<span class="hljs-string">&quot;axes.unicode_minus&quot;</span>] = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 设置图片大小、边距</span><br>fig, ax = plt.subplots(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">8</span>))<br><br><span class="hljs-comment"># 数据</span><br>x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>y = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># 绘制点状图</span><br>plt.scatter(x, y)<br><br><span class="hljs-comment"># 绘制点状图</span><br>plt.scatter(x, y, color=<span class="hljs-string">&#x27;red&#x27;</span>, s=<span class="hljs-number">25</span>)<br><br><span class="hljs-comment"># 绘制垂线</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(x)):<br>    plt.plot([x[i], x[i]], [y[i]-<span class="hljs-number">0.02</span>, <span class="hljs-number">0</span>], color=<span class="hljs-string">&#x27;gray&#x27;</span>)<br><br><span class="hljs-comment"># 设置坐标轴标签</span><br>plt.xlabel(<span class="hljs-string">&#x27;时间间隔&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;动作&#x27;</span>)<br><br><span class="hljs-comment">#设置坐标轴刻度</span><br>plt.yticks([ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [ <span class="hljs-string">&#x27;抬腕&#x27;</span>, <span class="hljs-string">&#x27;垂腕&#x27;</span>])<br><br><span class="hljs-comment"># 设置y轴范围</span><br>ax.set_ylim([<span class="hljs-number">0</span>, <span class="hljs-literal">None</span>])<br><br><span class="hljs-comment"># 将底部轴脊的位置设置为0</span><br>ax.spines[<span class="hljs-string">&#x27;bottom&#x27;</span>].set_position(<span class="hljs-string">&#x27;zero&#x27;</span>)<br><br><span class="hljs-comment"># 显示图形</span><br>plt.show()<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/python_pic/28.png" alt="图片描述" style="zoom:60%;"></div><h3 id="5-点状图固定圆点大小"><a href="#5-点状图固定圆点大小" class="headerlink" title="5. 点状图固定圆点大小"></a><font color=#1E90FF>5. 点状图固定圆点大小</font></h3><ol><li>生成了50个随机点，并使用scatter函数绘制这些点。</li><li>将<code>s</code>参数设置为100，这将使所有点的大小都为100</li><li>这里的‘s’指的是小球的面积，小球的半径为<code>半径 = sqrt(s / π)</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt <br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><br><span class="hljs-comment"># 生成随机数据 </span><br>x = np.random.rand(<span class="hljs-number">50</span>) <br>y = np.random.rand(<span class="hljs-number">50</span>) <br><br><span class="hljs-comment"># 绘制点状图 </span><br>plt.scatter(x, y, s=<span class="hljs-number">100</span>) <br><br><span class="hljs-comment"># 显示图形 </span><br>plt.show()<br></code></pre></td></tr></table></figure><h3 id="6-点状图右上角标注不同颜色的含义"><a href="#6-点状图右上角标注不同颜色的含义" class="headerlink" title="6. 点状图右上角标注不同颜色的含义"></a><font color=#1E90FF>6. 点状图右上角标注不同颜色的含义</font></h3><ol><li>使用<code>scatter</code>函数创建了两个散点图，分别用红色和蓝色表示不同的阶段</li><li>使用<code>label</code>参数为每个散点图添加标签</li><li>使用<code>legend</code>函数在图例中显示这些标签，并使用<code>loc</code>参数指定图例的位置</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt <br><br>x1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>] <br>y1 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>] <br>x2 = [<span class="hljs-number">1.5</span>, <span class="hljs-number">2.5</span>, <span class="hljs-number">3.5</span>, <span class="hljs-number">4.5</span>, <span class="hljs-number">5.5</span>] <br>y2 = [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>] <br><br>fig, ax = plt.subplots() <br><br>ax.scatter(x1, y1, color=<span class="hljs-string">&#x27;red&#x27;</span>, label=<span class="hljs-string">&#x27;阶段1&#x27;</span>) <br>ax.scatter(x2, y2, color=<span class="hljs-string">&#x27;blue&#x27;</span>, label=<span class="hljs-string">&#x27;阶段2&#x27;</span>) <br><br>ax.legend(loc=<span class="hljs-string">&#x27;upper right&#x27;</span>) <br>plt.show()<br></code></pre></td></tr></table></figure><h3 id="7-图形标题-plt-title-函数"><a href="#7-图形标题-plt-title-函数" class="headerlink" title="7. 图形标题 plt.title()函数"></a><font color=#1E90FF>7. 图形标题 plt.title()函数</font></h3><ul><li>学习链接：<a href="https://blog.csdn.net/wzk4869/article/details/129815245?ops_request_misc=&request_id=&biz_id=102&utm_term=plt.title(%27%E5%BE%85%E6%9C%BA%E5%A4%A9%E6%95%B0%27)&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-129815245.142%5Ev93%5Einsert_down28v1&spm=1018.2226.3001.4187">https://blog.csdn.net/wzk4869/article/</a></li></ul><div style="text-align:center;gap:5px">    <img src="/img/python_pic/29.png" alt="图片描述" style="zoom:60%;"></div><h3 id="8-设置坐标轴刻度"><a href="#8-设置坐标轴刻度" class="headerlink" title="8. 设置坐标轴刻度"></a><font color=#1E90FF>8. 设置坐标轴刻度</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> pylab <span class="hljs-keyword">import</span> mpl<br><br><span class="hljs-comment"># 设置中文显示字体</span><br>mpl.rcParams[<span class="hljs-string">&quot;font.sans-serif&quot;</span>] = [<span class="hljs-string">&quot;SimHei&quot;</span>]<br><span class="hljs-comment"># 设置正常显示符号</span><br>mpl.rcParams[<span class="hljs-string">&quot;axes.unicode_minus&quot;</span>] = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 数据</span><br>x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>y = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># 绘制点状图</span><br>plt.scatter(x, y)<br><br><span class="hljs-comment"># 设置坐标轴标签</span><br>plt.xlabel(<span class="hljs-string">&#x27;时间&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;纵坐标&#x27;</span>)<br><br><span class="hljs-comment">#设置坐标轴刻度</span><br>plt.yticks([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-string">&#x27;抬腕&#x27;</span>, <span class="hljs-string">&#x27;垂腕&#x27;</span>])<br><br><span class="hljs-comment"># 显示图形</span><br>plt.show()<br></code></pre></td></tr></table></figure><h3 id="9-设置图片的大小、边距"><a href="#9-设置图片的大小、边距" class="headerlink" title="9. 设置图片的大小、边距"></a><font color=#1E90FF>9. 设置图片的大小、边距</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置图像大小、边距</span><br>fig, ax = plt.subplots(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><h3 id="10-设置坐标原点处于坐标最下方"><a href="#10-设置坐标原点处于坐标最下方" class="headerlink" title="10. 设置坐标原点处于坐标最下方"></a><font color=#1E90FF>10. 设置坐标原点处于坐标最下方</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置y轴范围</span><br>ax.set_ylim([<span class="hljs-number">0</span>, <span class="hljs-literal">None</span>])<br><br><span class="hljs-comment"># 将底部轴脊的位置设置为0</span><br>ax.spines[<span class="hljs-string">&#x27;bottom&#x27;</span>].set_position(<span class="hljs-string">&#x27;zero&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="11-坐标轴标签距离坐标轴的距离"><a href="#11-坐标轴标签距离坐标轴的距离" class="headerlink" title="11. 坐标轴标签距离坐标轴的距离"></a><font color=#1E90FF>11. 坐标轴标签距离坐标轴的距离</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.xlabel(<span class="hljs-string">&quot;特征&quot;</span>,labelpad=<span class="hljs-number">8.5</span>)<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/python_pic/30.png" alt="图片描述" style="zoom:60%;"></div><h3 id="12-正态分布图"><a href="#12-正态分布图" class="headerlink" title="12. 正态分布图"></a><font color=#1E90FF>12. 正态分布图</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 生成正态分布的数据</span><br>mu = <span class="hljs-number">0</span>  <span class="hljs-comment"># 均值</span><br>sigma = <span class="hljs-number">1</span>  <span class="hljs-comment"># 标准差</span><br>x = np.linspace(mu - <span class="hljs-number">3</span> * sigma, mu + <span class="hljs-number">3</span> * sigma, <span class="hljs-number">100</span>)  <span class="hljs-comment"># 生成100个数据点</span><br><br><span class="hljs-comment"># 计算正态分布的概率密度函数</span><br>y = (<span class="hljs-number">1</span> / (sigma * np.sqrt(<span class="hljs-number">2</span> * np.pi))) * np.exp(-(x - mu) ** <span class="hljs-number">2</span> / (<span class="hljs-number">2</span> * sigma ** <span class="hljs-number">2</span>))<br><br><span class="hljs-comment"># 绘制正态分布图</span><br>plt.plot(x, y)<br>plt.xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Probability Density&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Normal Distribution&#x27;</span>)<br>plt.grid(<span class="hljs-literal">True</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/python_pic/40.png" alt="图片描述" style="zoom:60%;"></div><h2 id="9-处理csv表格数据"><a href="#9-处理csv表格数据" class="headerlink" title="9. 处理csv表格数据"></a><font color=#1E90FF>9. 处理csv表格数据</font></h2><h3 id="1-打开并清洗本地csv表格中的数据"><a href="#1-打开并清洗本地csv表格中的数据" class="headerlink" title="1. 打开并清洗本地csv表格中的数据"></a><font color=#1E90FF>1. 打开并清洗本地csv表格中的数据</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv <br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(algo_tilt_csv_result_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    reader = csv.reader(file)<br><br>    <span class="hljs-comment"># 创建一个集合来存储已经出现过的行</span><br>    seen_rows = <span class="hljs-built_in">set</span>()<br><br>    <span class="hljs-comment"># 创建一个列表来存储清洗后的行</span><br>    cleaned_rows = []<br><br>    <span class="hljs-comment"># 遍历CSV文件中的每一行</span><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>        <span class="hljs-comment"># 如果行为空，则跳过</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> row:<br>            <span class="hljs-keyword">continue</span><br><br>        <span class="hljs-comment"># 将行转换为元组，以便可以将其添加到集合中</span><br>        row_tuple = <span class="hljs-built_in">tuple</span>(row)<br><br>        <span class="hljs-comment"># 如果行已经出现过，则跳过</span><br>        <span class="hljs-keyword">if</span> row_tuple <span class="hljs-keyword">in</span> seen_rows:<br>            <span class="hljs-keyword">continue</span><br><br>        <span class="hljs-comment"># 将行添加到集合和清洗后的行列表中</span><br>        seen_rows.add(row_tuple)<br>        cleaned_rows.append(row)<br>        <br><span class="hljs-comment"># 打印清洗后的行 </span><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> cleaned_rows: <br>    <span class="hljs-built_in">print</span>(row)<br></code></pre></td></tr></table></figure><ol><li>使用<code>csv.reader</code>函数打开CSV文件并创建一个<code>reader</code>对象。</li><li>创建一个空集合<code>seen_rows</code>来存储已经出现过的行，以及一个空列表<code>cleaned_rows</code>来存储清洗后的行。 </li><li>循环遍历CSV文件中的每一行。如果行为空，则跳过。否则，我们将行转换为元组，并检查它是否已经出现过。如果行已经出现过，则跳过。否则，我们将行添加到集合和清洗后的行列表中。</li></ol><h3 id="2-更改CSV表格中某行某列的数据"><a href="#2-更改CSV表格中某行某列的数据" class="headerlink" title="2. 更改CSV表格中某行某列的数据"></a><font color=#1E90FF>2. 更改CSV表格中某行某列的数据</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br>algo_tilt_path_and_status = <span class="hljs-string">r&#x27;algo_tilt_path_and_status.csv&#x27;</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;读取CSV文件&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(algo_tilt_path_and_status, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    reader = csv.reader(file)<br>    data = <span class="hljs-built_in">list</span>(reader)<br><br><span class="hljs-comment"># 整体数据</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;data&#x27;</span>, data)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;修改CSV文件&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 修改数据</span><br>data[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;hello1&#x27;</span>  <span class="hljs-comment"># 第2行第3列</span><br><br><span class="hljs-comment"># 将修改后的数据写回CSV文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(algo_tilt_path_and_status, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    writer = csv.writer(file)<br>    writer.writerows(data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;修改完成&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="10-日期-时间相关"><a href="#10-日期-时间相关" class="headerlink" title="10. 日期 &#x2F; 时间相关"></a><font color=#1E90FF>10. 日期 &#x2F; 时间相关</font></h2><ul><li>统一格式，使用<code>import datetime</code>包</li></ul><h3 id="1-获取今天的日期"><a href="#1-获取今天的日期" class="headerlink" title="1. 获取今天的日期"></a><font color=#1E90FF>1. 获取今天的日期</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><br>today = datetime.date.today()<br><br><span class="hljs-comment"># 将`datetime`类型转为`str`类型</span><br>today_str = today.strftime(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;今天的日期是：&quot;</span>, today_str)<br></code></pre></td></tr></table></figure><h3 id="2-获取明天的日期"><a href="#2-获取明天的日期" class="headerlink" title="2. 获取明天的日期"></a><font color=#1E90FF>2. 获取明天的日期</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><br>today = datetime.date.today()<br>tomorrow = today + datetime.timedelta(days=<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(tomorrow)<br></code></pre></td></tr></table></figure><h3 id="3-获取当前月份第一天的日期"><a href="#3-获取当前月份第一天的日期" class="headerlink" title="3. 获取当前月份第一天的日期"></a><font color=#1E90FF>3. 获取当前月份第一天的日期</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><br>today = datetime.date.today()<br>first_day = today.replace(day=<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(first_day)<br></code></pre></td></tr></table></figure><h3 id="4-datetime变为str类型"><a href="#4-datetime变为str类型" class="headerlink" title="4. datetime变为str类型"></a><font color=#1E90FF>4. <code>datetime</code>变为<code>str</code>类型</font></h3><h3 id="5-str类型变为datetime类型"><a href="#5-str类型变为datetime类型" class="headerlink" title="5. str类型变为datetime类型"></a><font color=#1E90FF>5. <code>str</code>类型变为<code>datetime</code>类型</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><br>time_datetime_date = datetime.datetime.strptime(time_str, <span class="hljs-string">&quot;%Y-%m-%d&quot;</span>).date()<br></code></pre></td></tr></table></figure><h3 id="6-计算两个日期之间工作日的天数"><a href="#6-计算两个日期之间工作日的天数" class="headerlink" title="6. 计算两个日期之间工作日的天数"></a><font color=#1E90FF>6. 计算两个日期之间工作日的天数</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br>start_date = datetime(<span class="hljs-number">2024</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>)<br>end_date = datetime(<span class="hljs-number">2024</span>, <span class="hljs-number">1</span>, <span class="hljs-number">16</span>)<br><br><span class="hljs-comment"># 创建日期范围</span><br>date_range = pd.date_range(start=start_date, end=end_date, freq=<span class="hljs-string">&#x27;B&#x27;</span>)<br><br><span class="hljs-comment"># 计算工作日天数</span><br>num_workdays = <span class="hljs-built_in">len</span>(date_range)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2024年1月5日至2024年1月16日共有&#123;&#125;个工作日。&quot;</span>.<span class="hljs-built_in">format</span>(num_workdays))<br><span class="hljs-comment"># 2024年1月5日至2024年1月16日共有8个工作日。</span><br></code></pre></td></tr></table></figure><h3 id="7-datetime之差"><a href="#7-datetime之差" class="headerlink" title="7. datetime之差"></a><font color=#1E90FF>7. datetime之差</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime <br><br>time1 = datetime(<span class="hljs-number">2021</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <br>time2 = datetime(<span class="hljs-number">2021</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>) <br>delta = time2 - time1 <br><span class="hljs-built_in">print</span>(delta) <br><span class="hljs-comment"># 输出 0:10:00 print(delta.seconds) # 输出 600</span><br></code></pre></td></tr></table></figure><h3 id="8-位数时间戳，毫秒级别时间转换"><a href="#8-位数时间戳，毫秒级别时间转换" class="headerlink" title="8. 位数时间戳，毫秒级别时间转换"></a><font color=#1E90FF>8. 位数时间戳，毫秒级别时间转换</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime <br>timestamp = <span class="hljs-number">1687767185021</span> / <span class="hljs-number">1000</span> <br><span class="hljs-comment"># 将毫秒转换为秒 </span><br>dt_object = datetime.datetime.fromtimestamp(timestamp) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;日期时间对象:&quot;</span>, dt_object) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;日期时间字符串:&quot;</span>, dt_object.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)) <br> <br><span class="hljs-comment"># 日期时间对象: 2023-06-25 08:13:05.021000 </span><br><span class="hljs-comment"># 日期时间字符串: 2023-06-25 08:13:05</span><br></code></pre></td></tr></table></figure><ol><li><code>fromtimestamp()</code> 将时间戳转换为日期时间对象，</li><li><code>strftime()</code> 将日期时间对象转换为指定格式的字符串。</li><li>将时间戳除以1000，以将其转换为秒。</li></ol><h2 id="11-正则表达式"><a href="#11-正则表达式" class="headerlink" title="11. 正则表达式"></a><font color=#1E90FF>11. 正则表达式</font></h2><ul><li>在线正则表达式验证网址：<a href="https://regex101.com/">https://regex101.com/</a></li><li>在表达式的” “之前加上一个r，r” “代表的是原生字符串（raw）</li></ul><h3 id="1-匹配所有字符"><a href="#1-匹配所有字符" class="headerlink" title="1. . - 匹配所有字符"></a><font color=#1E90FF>1. <code>.</code> - 匹配所有字符</font></h3><ul><li><code>.</code>表示要匹配除了换行符之外的，任何<mark>单个字符</mark></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>content = <span class="hljs-string">&#x27;&#x27;&#x27;苹果,是绿色的</span><br><span class="hljs-string">橙子,是橙色的</span><br><span class="hljs-string">香蕉,是黄色的</span><br><span class="hljs-string">乌鸦,是黑色的&#x27;&#x27;&#x27;</span><br><br>rule = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;.色&#x27;</span>)<br>result = rule.findall(content)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># [&#x27;绿色&#x27;, &#x27;橙色&#x27;, &#x27;黄色&#x27;, &#x27;黑色&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="2-重复匹配任意次"><a href="#2-重复匹配任意次" class="headerlink" title="2. * - 重复匹配任意次"></a><font color=#1E90FF>2. <code>*</code> - 重复匹配任意次</font></h3><ul><li><code>*</code>表示匹配前面<mark>字符</mark>的任意次，包含0次</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>content = <span class="hljs-string">&#x27;&#x27;&#x27;苹果,是绿色的</span><br><span class="hljs-string">橙子,是橙色的</span><br><span class="hljs-string">香蕉,是黄色的</span><br><span class="hljs-string">乌鸦,是黑色的&#x27;&#x27;&#x27;</span><br><br>rule = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;,.*&#x27;</span>)<br>result = rule.findall(content)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># [&#x27;,是绿色的&#x27;, &#x27;,是橙色的&#x27;, &#x27;,是黄色的&#x27;, &#x27;,是黑色的&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="3-重复匹配多次"><a href="#3-重复匹配多次" class="headerlink" title="3. + - 重复匹配多次"></a><font color=#1E90FF>3. <code>+</code> - 重复匹配多次</font></h3><ul><li><code>+</code>表示匹配前面<mark>字符</mark>的任意次，不包含0次</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>content = <span class="hljs-string">&#x27;&#x27;&#x27;苹果,是绿色色色色色的</span><br><span class="hljs-string">橙子,是橙色的</span><br><span class="hljs-string">香蕉,是黄色的</span><br><span class="hljs-string">乌鸦,是绿色的</span><br><span class="hljs-string">猴子，绿&#x27;&#x27;&#x27;</span><br><br>rule = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;绿色+&#x27;</span>)<br>result = rule.findall(content)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># [&#x27;绿色色色色色&#x27;, &#x27;绿色&#x27;]</span><br><br>rule = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;绿色*&#x27;</span>)<br>result = rule.findall(content)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># [&#x27;绿色色色色色&#x27;, &#x27;绿色&#x27;, &#x27;绿&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="4-匹配指定次数"><a href="#4-匹配指定次数" class="headerlink" title="4.{} - 匹配指定次数"></a><font color=#1E90FF>4.<code>&#123;&#125;</code> - 匹配指定次数</font></h3><ul><li><code>&#123;&#125;</code>表示前面的字符匹配指定的次数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>content = <span class="hljs-string">&#x27;&#x27;&#x27;红彤彤，</span><br><span class="hljs-string">绿油油</span><br><span class="hljs-string">黑乎乎</span><br><span class="hljs-string">绿油油油油&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 油字出现3-4次</span><br>rule = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;绿油&#123;3,4&#125;&#x27;</span>)<br>result = rule.findall(content)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># [&#x27;绿油油油油&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="5-贪婪匹配与懒惰匹配"><a href="#5-贪婪匹配与懒惰匹配" class="headerlink" title="5. 贪婪匹配与懒惰匹配"></a><font color=#1E90FF>5. 贪婪匹配与懒惰匹配</font></h3><ul><li>贪婪匹配：一次尽可能匹配多个字符 <code>&#39;.*&#39;</code>或<code>&#39;.+&#39;</code></li><li>懒惰匹配：一次尽可能匹配少量字符 <code>&#39;.*?&#39;</code>或<code>&#39;.+?&#39;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>content = <span class="hljs-string">&#x27;&#x27;&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;&#x27;&#x27;&#x27;</span><br><br>rule = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;.*&gt;&#x27;</span>)<br>result = rule.findall(content)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># [&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;&#x27;]</span><br><br>rule = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;.*?&gt;&#x27;</span>)<br>result = rule.findall(content)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># [&#x27;&lt;html&gt;&#x27;, &#x27;&lt;head&gt;&#x27;, &#x27;&lt;title&gt;&#x27;, &#x27;&lt;/title&gt;&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="6-对元字符的转义"><a href="#6-对元字符的转义" class="headerlink" title="6. \ - 对元字符的转义"></a><font color=#1E90FF>6. <code>\</code> - 对元字符的转义</font></h3><ul><li>当要搜索的内容本身就包含元字符时，就可以使用<code>\</code>进行转义</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>content = <span class="hljs-string">&#x27;&#x27;&#x27;苹果.是绿色的</span><br><span class="hljs-string">橙子.是橙色的</span><br><span class="hljs-string">香蕉.是黄色的&#x27;&#x27;&#x27;</span><br><br>rule = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;.*\.&#x27;</span>)<br>result = rule.findall(content)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># [&#x27;苹果.&#x27;, &#x27;橙子.&#x27;, &#x27;香蕉.&#x27;]</span><br><br>rule = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;.*\.&#x27;</span>)<br>result = rule.findall(content)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># [&#x27;苹果.是绿色的&#x27;, &#x27;橙子.是橙色的&#x27;, &#x27;香蕉.是黄色的&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="7-匹配范围内字符之一"><a href="#7-匹配范围内字符之一" class="headerlink" title="7. [] - 匹配范围内字符之一"></a><font color=#1E90FF>7. <code>[]</code> - 匹配范围内字符之一</font></h3><ul><li>匹配任意小写字符：<code>[a-z]</code></li><li>匹配任意文字字符：<code>[a-zA-Z0-9]</code></li><li>匹配任意非文字字符：<code>[^a-zA-Z0-9]</code></li><li><code>[a-d[m-p]]</code>表示a到d，或m到p</li><li><code>[a-z&amp;&amp;[def]]</code>表示a-z和def的交集，为：d，e，f</li><li><code>[a-z&amp;&amp;[^bc]]</code>表示a-z和非bc的交集（等同于[ad-z]）</li><li><code>[a-z&amp;&amp;[^m-p]]</code>表示a-z除了m-p的交集（等同于[a-lg-z]）</li></ul><h3 id="8-抽取括号中的内容"><a href="#8-抽取括号中的内容" class="headerlink" title="8.() - 抽取括号中的内容"></a><font color=#1E90FF>8.<code>()</code> - 抽取括号中的内容</font></h3><ul><li>从正则表达式所匹配的内容中，扣取括号内的部分</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>content = <span class="hljs-string">&#x27;&#x27;&#x27;苹果,是绿色的</span><br><span class="hljs-string">橙子,是橙色的</span><br><span class="hljs-string">香蕉,是黄色的</span><br><span class="hljs-string">乌鸦,是黑色的&#x27;&#x27;&#x27;</span><br><br>rule = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;(.*),&#x27;</span>)<br>result = rule.findall(content)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># [&#x27;苹果&#x27;, &#x27;橙子&#x27;, &#x27;香蕉&#x27;, &#x27;乌鸦&#x27;]</span><br><br>rule = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;.*,&#x27;</span>)<br>result = rule.findall(content)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># [&#x27;苹果,&#x27;, &#x27;橙子,&#x27;, &#x27;香蕉,&#x27;, &#x27;乌鸦,&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="9-使用正则表达式切割字符串"><a href="#9-使用正则表达式切割字符串" class="headerlink" title="9. 使用正则表达式切割字符串*"></a><font color=#1E90FF>9. 使用正则表达式切割字符串*</font></h3><ul><li>注：<code>\s</code>为空格</li><li>其中<code>[，；\s]\s*</code>指定了，分隔符为 分号、逗号、空格 里面的任意一种，并且符号周围可以有不定数量的空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>names = <span class="hljs-string">&#x27;关羽；张飞，赵云，马超， 黄忠 李逵&#x27;</span><br>name_list = re.split(<span class="hljs-string">r&#x27;[，；\s]\s*&#x27;</span>, names)<br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><h2 id="12-Pycharm的使用"><a href="#12-Pycharm的使用" class="headerlink" title="12. Pycharm的使用"></a><font color=#1E90FF>12. Pycharm的使用</font></h2><h3 id="1-快捷键"><a href="#1-快捷键" class="headerlink" title="1. 快捷键"></a>1. 快捷键</h3><ol><li>注释：<code>command + /</code></li><li>缩进：<ol><li>缩进：<code>Tab</code></li><li>取消缩进 ：<code>shift + Tab</code></li></ol></li><li>全局搜索：<code>command + f</code></li><li>复制此行：<code>command + d</code></li><li>批量删除 &#x2F; 修改：<code>command + r</code></li></ol><h3 id="2-光标变粗"><a href="#2-光标变粗" class="headerlink" title="2. 光标变粗"></a>2. 光标变粗</h3><div style="text-align:center;gap:5px">    <img src="/img/python_pic/51.png" alt="图片描述" style="zoom:60%;"></div><h3 id="3-设置代码宽度竖线"><a href="#3-设置代码宽度竖线" class="headerlink" title="3. 设置代码宽度竖线"></a>3. 设置代码宽度竖线</h3><div style="text-align:center;gap:5px">    <img src="/img/python_pic/57.png" alt="图片描述" style="zoom:60%;"></div><h3 id="4-由‘目录’变为‘软件包’"><a href="#4-由‘目录’变为‘软件包’" class="headerlink" title="4. 由‘目录’变为‘软件包’"></a>4. 由‘目录’变为‘软件包’</h3><p>在目录下添加__inint__.py文件</p><div style="text-align:center;gap:5px">    <img src="/img/python_pic/58.png" alt="图片描述" style="zoom:20%;">    <img src="/img/python_pic/59.png" alt="图片描述" style="zoom:20%;">    <img src="/img/python_pic/60.png" alt="图片描述" style="zoom:20%;"></div><h3 id="5-一键规范代码格式"><a href="#5-一键规范代码格式" class="headerlink" title="5. 一键规范代码格式"></a>5. 一键规范代码格式</h3><ul><li>常用于规范从网站直接下载的html文件</li></ul><div style="text-align:center;gap:5px">    <img src="/img/python_pic/62.png" alt="图片描述" style="zoom:60%;"></div><h3 id="6-中文繁体和简体相互转化"><a href="#6-中文繁体和简体相互转化" class="headerlink" title="6. 中文繁体和简体相互转化"></a>6. 中文繁体和简体相互转化</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">ctrl` + `shift` +`f<br></code></pre></td></tr></table></figure><h3 id="7-中文斜体和非斜体相互转化"><a href="#7-中文斜体和非斜体相互转化" class="headerlink" title="7. 中文斜体和非斜体相互转化"></a>7. 中文斜体和非斜体相互转化</h3><p>若def下的第一行为注释，则此注释为斜体</p><div style="text-align:center">    <img src="/img/python_pic/64.png" alt="图片描述" style="zoom:70%;">    <img src="/img/python_pic/65.png" alt="图片描述" style="zoom:70%;"></div><h2 id="13-迭代器"><a href="#13-迭代器" class="headerlink" title="13. 迭代器"></a><font color=#1E90FF>13. 迭代器</font></h2><ol><li>可迭代对象：可以通过for循环进行遍历的元素，如列表、数组、元组、字典等</li><li>迭代器：是一个可以记住遍历的位置的对象，迭代器对象从第一个元素开始访问，直到所有的元素都被访问完成，迭代器只能往前不会往后</li></ol><h3 id="1-可迭代对象的迭代器"><a href="#1-可迭代对象的迭代器" class="headerlink" title="1. 可迭代对象的迭代器"></a><font color=#1E90FF>1. 可迭代对象的迭代器</font></h3><ol><li>通过<code>iter()</code>获得一个可迭代对象的迭代器</li><li>通过<code>next()</code>函数多次提取迭代器中的数据</li></ol><h3 id="2-迭代器与for循环"><a href="#2-迭代器与for循环" class="headerlink" title="2. 迭代器与for循环"></a><font color=#1E90FF>2. 迭代器与for循环</font></h3><ol><li><code>for</code>循环的过程可以通过上面的<code>iter()</code> 和 <code>next()</code>函数来实现</li><li>for循环底层过程<ol><li>先调用<code>iter()</code>，将nums当做实参，得到nums这个可迭代对象的迭代器</li><li>调用<code>next()</code>, 将上一步得到的迭代器进行取值</li><li>将上一步取出来的值，复制给<code>num</code>这个变量</li><li>执行for循环体中的代码，<code>print(num)</code></li><li>接下来重复执行2&#x2F;3&#x2F;4步骤，当nums中的所有数据都获取完毕之后，会在下一次调用next的时候产生StopIteration异常</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 迭代器</span><br>nums = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>]     <span class="hljs-comment"># 可迭代对象</span><br>nums_iter = <span class="hljs-built_in">iter</span>(nums)  <span class="hljs-comment"># 迭代器</span><br><br>num1 = <span class="hljs-built_in">next</span>(nums_iter)  <span class="hljs-comment"># 取列表中第一个值</span><br><span class="hljs-built_in">print</span>(num1)<br>num2 = <span class="hljs-built_in">next</span>(nums_iter)  <span class="hljs-comment"># 取列表中第二个值</span><br><span class="hljs-built_in">print</span>(num2)<br>num3 = <span class="hljs-built_in">next</span>(nums_iter)  <span class="hljs-comment"># 取列表中第三个值</span><br><span class="hljs-built_in">print</span>(num3)<br><br><span class="hljs-comment"># for 循环</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><h3 id="3-一个迭代器"><a href="#3-一个迭代器" class="headerlink" title="3. 一个迭代器"></a><font color=#1E90FF>3. 一个迭代器</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1.定义一个列表</span><br>nums = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br><span class="hljs-comment"># 2.取列表这个可迭代对象的迭代器</span><br>nums_iter = <span class="hljs-built_in">iter</span>(nums)<br><span class="hljs-comment"># 3.循环的方式，调用next取迭代器中的数据</span><br><span class="hljs-keyword">while</span> true:<br>    <span class="hljs-keyword">try</span>:<br>        num = <span class="hljs-built_in">next</span>(nums_iter)   <span class="hljs-comment"># 取迭代器的下一个数据</span><br>        <span class="hljs-built_in">print</span>(num)<br>    <span class="hljs-keyword">except</span> StopIteration <span class="hljs-keyword">as</span> ret:<br>        <span class="hljs-built_in">print</span>(ret)<br>        <span class="hljs-keyword">break</span><br>    <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1.定义一个列表</span><br>nums = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br><span class="hljs-comment"># 2.取列表这个可迭代对象的迭代器</span><br>nums_iter = <span class="hljs-built_in">iter</span>(nums)<br><span class="hljs-comment"># 3.循环的方式，调用next取迭代器中的数据</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(nums):<br>num = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num)<br>i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="14-异常处理和异常回溯-try-except"><a href="#14-异常处理和异常回溯-try-except" class="headerlink" title="14. 异常处理和异常回溯 - try except "></a><font color=#1E90FF>14. 异常处理和异常回溯 - try except </font></h2><h3 id="1-异常处理"><a href="#1-异常处理" class="headerlink" title="1. 异常处理"></a><font color=#1E90FF>1. 异常处理</font></h3><ul><li>当项目运行时，如果某几行代码可能会出现错误，为了不影响其他代码的运行，进行异常处理。当出现异常时，跳过这一部分</li></ul><ol><li>代码正常运行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>value = <span class="hljs-number">8</span> / <span class="hljs-number">4</span><br><span class="hljs-built_in">print</span>(value)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error&#x27;</span>)<br>    <br><span class="hljs-comment"># 2.0</span><br></code></pre></td></tr></table></figure><ol start="2"><li>异常处理 - 不区分问题</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>value = <span class="hljs-number">8</span> / <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(value)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error&#x27;</span>)<br>    <br><span class="hljs-comment"># error</span><br></code></pre></td></tr></table></figure><ol start="3"><li>异常处理 - 区分问题名称</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>value = <span class="hljs-number">8</span> / b<br><span class="hljs-built_in">print</span>(value)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ZeroDivisionError&#x27;</span>)<br><br><span class="hljs-keyword">except</span> NameError:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NameError&#x27;</span>)<br><br><span class="hljs-comment"># NameError</span><br></code></pre></td></tr></table></figure><h3 id="2-异常回溯"><a href="#2-异常回溯" class="headerlink" title="2. 异常回溯"></a><font color=#1E90FF>2. 异常回溯</font></h3><ul><li>跳过程序中异常的部分，继续执行项目的后续代码，并记录问题原因</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> traceback<br><span class="hljs-keyword">try</span>:<br>value = <span class="hljs-number">8</span> / <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(value)<br><span class="hljs-keyword">except</span>:<br>    info = traceback.format_exc()<br><span class="hljs-built_in">print</span>(info)          <span class="hljs-comment"># ....</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(info))    <span class="hljs-comment"># str</span><br></code></pre></td></tr></table></figure><h2 id="16-输入与输出"><a href="#16-输入与输出" class="headerlink" title="16. 输入与输出"></a><font color=#1E90FF>16. 输入与输出</font></h2><ol><li>input输入</li></ol><ul><li>以input形式输入任何内容，在后台都会以<mark><code>str</code></mark>的形式输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">content=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入任意内容：&quot;</span>)     <span class="hljs-comment">#请输入任意内容：hello</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;用户输入的内容：&quot;</span>,content)     <span class="hljs-comment">#用户输入的内容： hello</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入数据的类型：&quot;</span>,<span class="hljs-built_in">type</span>(content))     <span class="hljs-comment">#输入数据的类型： &lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>print输出</p><ol><li><code>print()</code>打印中默认使用的是<code>\n</code>换行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-string">&#x27;I am a boy&#x27;</span>.split(<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> n[::-<span class="hljs-number">1</span>]:<br>    <span class="hljs-built_in">print</span>(i)<br>    <br><span class="hljs-comment"># boy</span><br><span class="hljs-comment"># a</span><br><span class="hljs-comment"># am</span><br><span class="hljs-comment"># I</span><br></code></pre></td></tr></table></figure><ol start="2"><li>可以通过<code>print(xx, end=&#39; &#39;)</code>来调整打印结果的方式</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-string">&#x27;I am a boy&#x27;</span>.split(<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> n[::-<span class="hljs-number">1</span>]:<br>    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <br><span class="hljs-comment"># boy a am I </span><br></code></pre></td></tr></table></figure></li></ol><h2 id="17-set-用法"><a href="#17-set-用法" class="headerlink" title="17. set 用法"></a><font color=#1E90FF>17. set 用法</font></h2><ol><li>清除列表重复元素</li></ol><ul><li>得到的内容为set类型，可以直接转为列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">case_list = [<span class="hljs-string">&#x27;[]&#x27;</span>, <span class="hljs-string">&#x27;[]&#x27;</span>, <span class="hljs-string">&#x27;[&quot;19158&quot;]&#x27;</span>, <span class="hljs-string">&#x27;[]&#x27;</span>,<span class="hljs-string">&#x27;[&quot;18695&quot;]&#x27;</span>, <span class="hljs-string">&#x27;[]&#x27;</span>]<br>fail_case = <span class="hljs-built_in">set</span>(case_list)<br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">type</span>(fail_case), fail_case) <br><span class="hljs-comment"># &lt;class &#x27;set&#x27;&gt; &#x27;[&quot;18695&quot;]&#x27;, &#x27;[&quot;19158&quot;]&#x27;, &#x27;[]&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>取两个列表的差集与交集</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">li = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>li_set = <span class="hljs-built_in">set</span>(li)<br><br><span class="hljs-comment"># 取两个列表的差集</span><br>a_list = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]<br>a_set = <span class="hljs-built_in">set</span>(a_list)<br>set_subtraction = li_set - a_set<br><span class="hljs-built_in">print</span>(set_subtraction)<br><br><span class="hljs-comment"># 取两个列表之间的交集</span><br>a_list = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]<br>a_set = <span class="hljs-built_in">set</span>(a_list)<br>set_and = li_set &amp; a_set<br><span class="hljs-built_in">print</span>(set_and)<br></code></pre></td></tr></table></figure><h2 id="18-get请求与post请求"><a href="#18-get请求与post请求" class="headerlink" title="18. get请求与post请求"></a><font color=#1E90FF>18. get请求与post请求</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#对于post请求</span><br>requests.post(url=url, json=json, auth=(ak, sk))<br><br><span class="hljs-comment">#对于get请求</span><br>url = https://micaseapi.pt.xiaomi.com/api/v1/get_case_fields<br>params = &#123;<span class="hljs-string">&#x27;business_id&#x27;</span>:<span class="hljs-number">5</span>&#125;<br>ak = <span class="hljs-string">&#x27;0ac2b6b1423b46f4935b50bf7a33a7a8&#x27;</span><br>sk = <span class="hljs-string">&#x27;66ab25b8a3f24895aa024c51871ddc43&#x27;</span><br><br>requests.get(url=url, params=params, auth=(ak, sk))<br></code></pre></td></tr></table></figure><h2 id="19-清除字符串中的数字、英文和空格"><a href="#19-清除字符串中的数字、英文和空格" class="headerlink" title="19. 清除字符串中的数字、英文和空格"></a><font color=#1E90FF>19. 清除字符串中的数字、英文和空格</font></h2><ul><li>注：其中的数字、英文、空格也可以分别或一起清除</li></ul><div style="text-align:center;gap:5px">    <img src="/img/python_pic/32.png" alt="图片描述" style="zoom:60%;"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>name = [<span class="hljs-string">&#x27;俞诗睿&#x27;</span>, <span class="hljs-string">&#x27;Jiuzhu1 Dong 董九柱&#x27;</span>, <span class="hljs-string">&#x27;杨雅楠yanan&#x27;</span>]<br><span class="hljs-keyword">for</span> singo_name <span class="hljs-keyword">in</span> name:<br>    temp = re.sub(<span class="hljs-string">r&#x27;[a-zA-Z0-9\s]&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, singo_name)<br>    <span class="hljs-built_in">print</span>(temp)    <span class="hljs-comment"># 俞诗睿 董九柱 杨雅楠</span><br></code></pre></td></tr></table></figure><h2 id="20-utf-8与gbk存储"><a href="#20-utf-8与gbk存储" class="headerlink" title="20. utf-8与gbk存储"></a><font color=#1E90FF>20. utf-8与gbk存储</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file.html&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    html = f.read()<br>    <span class="hljs-keyword">try</span>:<br>        html = html.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>        html = html.decode(<span class="hljs-string">&#x27;gbk&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="21-文本持久化存储"><a href="#21-文本持久化存储" class="headerlink" title="21. 文本持久化存储"></a><font color=#1E90FF>21. 文本持久化存储</font></h2><div style="text-align:center;gap:5px">    <img src="/img/python_pic/35.png" alt="图片描述" style="zoom:60%;"></div><h2 id="22-cookie和session"><a href="#22-cookie和session" class="headerlink" title="22. cookie和session"></a><font color=#1E90FF>22. cookie和session</font></h2><ul><li><strong>Cookie</strong>适合存储一些不敏感的、需要在客户端持久化的小数据，如用户偏好设置。</li><li><strong>Session</strong>适合存储敏感的、需要在服务器端管理的用户状态信息，如登录状态、购物车等。</li></ul><h2 id="23-执行exe文件"><a href="#23-执行exe文件" class="headerlink" title="23. 执行exe文件"></a><font color=#1E90FF>23. 执行exe文件</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><br>subprocess.call([<span class="hljs-string">&#x27;path/to/exe/file.exe&#x27;</span>, <span class="hljs-string">&#x27;arg1&#x27;</span>, <span class="hljs-string">&#x27;arg2&#x27;</span>])<br></code></pre></td></tr></table></figure><ol><li>在上面的代码中，<code>subprocess.call()</code>函数将会在终端中打开指定的exe文件。</li><li>将<code>path/to/exe/file.exe</code>替换为你实际的exe文件路径。</li><li>将<code>arg1</code>和<code>arg2</code>作为参数传递给<code>subprocess.call()</code>函数。</li></ol><h2 id="24-Json字符串的for循环"><a href="#24-Json字符串的for循环" class="headerlink" title="24. Json字符串的for循环 "></a><font color=#1E90FF>24. Json字符串的for循环 </font></h2><div style="text-align:center;gap:5px">    <img src="/img/python_pic/47.png" alt="图片描述" style="zoom:60%;"></div><h2 id="25-后端信息传输给前端"><a href="#25-后端信息传输给前端" class="headerlink" title="25. 后端信息传输给前端"></a><font color=#1E90FF>25. 后端信息传输给前端</font></h2><ul><li>后端</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">env = Environment(loader=FileSystemLoader(\前端界面的\地址))<br>template = env.get_template(<span class="hljs-string">&quot;endurance_report.html&quot;</span>)<br><br>content = template.render(music_list=music_short_list, tester=tester, software=software)<br></code></pre></td></tr></table></figure><ul><li>前端</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123;传入的信息&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="27-glob-模糊匹配文件路径"><a href="#27-glob-模糊匹配文件路径" class="headerlink" title="27.glob 模糊匹配文件路径"></a><font color=#1E90FF>27.<code>glob</code> 模糊匹配文件路径</font></h2><p><code>glob</code> 是 Python 中用于模糊匹配文件路径的模块。它提供了一种简单的方法来查找与特定模式匹配的文件或文件夹。</p><p>在 <code>glob</code> 中，可以使用通配符 <code>*</code> 和 <code>?</code> 来匹配文件名中的任意字符和单个字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># &quot;上下班&quot;这个文件路径下，模糊查找以&quot;便利店&quot;结尾的文件</span><br>Path(<span class="hljs-string">r&quot;上下班&quot;</span>).glob(<span class="hljs-string">&quot;*便利店&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="28-深拷贝与浅拷贝"><a href="#28-深拷贝与浅拷贝" class="headerlink" title="28. 深拷贝与浅拷贝"></a><font color=#1E90FF>28. 深拷贝与浅拷贝</font></h2><ol><li>目的：用拷贝的方法减少对原始数据改动</li><li>浅拷贝：<code>copy()</code>仅拷贝集合的第一层数据，更深层的数据都是和原始列表共用的</li><li>深拷贝：<code>copy.deepcopy()</code>拷贝数据集合的所有数据</li></ol><ul><li><code>crud</code>被拷贝的数据部分不会影响原始数据</li><li><code>crud</code>浅拷贝中的更深层，会改变原始数据</li><li>只有可变元素才有拷贝的功能，如list、dict</li></ul><div style="text-align:center;gap:5px">    <img src="/img/python_pic/68.png" alt="图片描述" style="zoom:40%;"></div><h2 id="29-闭包函数"><a href="#29-闭包函数" class="headerlink" title="29. 闭包函数"></a><font color=#1E90FF>29. 闭包函数</font></h2><h3 id="1-闭包基础"><a href="#1-闭包基础" class="headerlink" title="1. 闭包基础"></a><font color=#1E90FF>1. 闭包基础</font></h3><p><font color=#1E90FF>1. 介绍</font></p><ul><li><p>定义：闭包函数指的是定义在一个函数内部的函数，被外层函数包裹着，其特点是可以访问到外层函数中的名字</p></li><li><p>优点：</p><ul><li><mark>闭包可以保护函数内部的变量不被外部访问和修改，避免污染全局环境</mark></li><li>可以将局部变量永久存储，不会被垃圾回收机制回收</li></ul></li><li><p>缺点：数据长期驻留在内存中，会造成内存浪费，严重情况下会导致内存泄漏</p></li></ul><p><font color=#1E90FF>2. 特点</font></p><ol><li><p>内、外两层函数之间拥有嵌套关系</p></li><li><p>内层的函数使用了外层定义的变量</p></li><li><p>返回值是内层的函数体对象，且没有括号</p></li></ol><p><font color=#1E90FF>3. 闭包的初步实现</font></p><ul><li><p>代码解释</p><ul><li><p>主函数中执行<code>sf = sfloor()</code>时，运行<code>sfloor()</code>函数，打印全局变量<code>msa</code>，不运行<code>tfloor()</code>函数，<mark>sf<code>接收返回值</code>tfloor&#96;，不带括号</mark></p></li><li><p>主函数中执行<code>sf()</code>时，运行<code>tfloor()</code>函数，打印全局变量<code>msa</code></p></li><li><p>如果<code>return</code>的值不是<code>tfloor</code>，则<code>tfloor()</code>方法永远无法被调用</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">msa = <span class="hljs-string">&#x27;aaaa&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sfloor</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1&#x27;</span> + msa)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tfloor</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;2&#x27;</span> + msa)<br>    <span class="hljs-keyword">return</span> tfloor<br><br>sf = sfloor()   <span class="hljs-comment"># 因为return tfloor，相当于调用tfloor的引用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------&#x27;</span>)<br>sf()     <span class="hljs-comment"># 相当于调用tfloor()函数</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">1aaaa<br>----------<br>2aaaa<br></code></pre></td></tr></table></figure><ul><li>代码变形</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">sf = sfloor()<br>sf()<br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sfloor()()<br></code></pre></td></tr></table></figure><p><font color=#1E90FF>4. 闭包的参数说明</font></p><ul><li>正常来说，调用一个函数的时候，这个函数中的所有局部变量+形参，都只会在这个函数执行的过程中才会保留，只要这个函数执行完毕，那么这些局部变量+形参，就会被自动释放</li><li>闭包比普通的函数强大的地方在于，它在外部函数执行完毕之后，这个外部函数中的所有局部变量+形参都不会释放，以便于在调用内部函数的时候可以使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">number</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_in</span>(<span class="hljs-params">number_in</span>):<br>        all_number = number+number_in<br>        <span class="hljs-built_in">print</span>(all_number)<br>        <span class="hljs-keyword">return</span> all_number<br>    <span class="hljs-keyword">return</span> test_in<br><br><span class="hljs-comment"># 给test函数赋值，这个20就是给参数number</span><br>ret = test(<span class="hljs-number">5</span>)<br><span class="hljs-comment"># 赋值number_in为10</span><br>ret(<span class="hljs-number">10</span>)     <span class="hljs-comment"># 15</span><br><span class="hljs-comment"># 赋值number_in为20</span><br>ret(<span class="hljs-number">20</span>)     <span class="hljs-comment"># 25</span><br></code></pre></td></tr></table></figure><h3 id="2-引用"><a href="#2-引用" class="headerlink" title="2. 引用"></a><font color=#1E90FF>2. 引用</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义了一个全局变量，其变量名字是函数的名字，即test</span><br><span class="hljs-comment"># 这个test变量指向了一个代码块，这个代码块是函数</span><br><span class="hljs-comment"># 其实就是说test保存了一个代码块的地址，即引用</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--in test--&quot;</span>)<br><br>test()  <span class="hljs-comment"># 这是调用函数</span><br><br>ret = test    <span class="hljs-comment"># 用另外一个变量 复制了test这个引用，使ret变量也指向那个函数代码块</span><br>ret = test()  <span class="hljs-comment"># 赋值ret1为test()函数的返回值</span><br><br><span class="hljs-comment"># 下面输出的2个地址信息是相同的</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(ret))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(test))<br><br><span class="hljs-comment"># 通过引用调用函数</span><br>ret()<br></code></pre></td></tr></table></figure><h3 id="3-闭包进阶-nonlocal"><a href="#3-闭包进阶-nonlocal" class="headerlink" title="3. 闭包进阶 nonlocal"></a><font color=#1E90FF>3. 闭包进阶 nonlocal</font></h3><ol><li>想要在闭包函数中，修改外部函数中的变量，<mark>需要通过<code>nonlocal</code>在内部修饰这个变量</mark></li><li>多个闭包之间没有任何关系，闭包面向对象编程</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个计数器，当没有给这个方法赋值时，start为0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">start=<span class="hljs-number">0</span></span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_one</span>():<br>        <span class="hljs-keyword">nonlocal</span> start  <span class="hljs-comment"># 添加nonlocal，可以让start在闭包中的内部进行修改，否则会产生异常</span><br>        start += <span class="hljs-number">1</span>      <span class="hljs-comment"># 在闭包中的内部函数中，如果没有用特殊的关键字，来声明外部函数中的变量，则不能对其进行修改</span><br>        <span class="hljs-keyword">return</span> start<br>    <span class="hljs-keyword">return</span> add_one<br><br>c1 = counter(<span class="hljs-number">5</span>)    <span class="hljs-comment"># 创建一个闭包</span><br><span class="hljs-built_in">print</span>(c1())    <span class="hljs-comment"># 6</span><br><span class="hljs-built_in">print</span>(c1())    <span class="hljs-comment"># 7</span><br><br>c2 = counter(<span class="hljs-number">50</span>)   <span class="hljs-comment"># 创建另一个闭包</span><br><span class="hljs-built_in">print</span>(c2())    <span class="hljs-comment"># 51</span><br><span class="hljs-built_in">print</span>(c2())    <span class="hljs-comment"># 52</span><br><br><span class="hljs-comment"># 可以创建多个闭包，多个闭包之间没有任何关系</span><br><span class="hljs-built_in">print</span>(c1())    <span class="hljs-comment"># 8</span><br><span class="hljs-built_in">print</span>(c2())    <span class="hljs-comment"># 53</span><br></code></pre></td></tr></table></figure><ul><li>注：闭包属于轻量级的对象<ul><li>对象：由n个属性 + n个方法组成</li><li>闭包：由n个变量 + 1个函数组成</li></ul></li></ul><h2 id="30-装饰器"><a href="#30-装饰器" class="headerlink" title="30. 装饰器"></a><font color=#1E90FF>30. 装饰器</font></h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a><font color=#1E90FF>1. 介绍</font></h3><ul><li>功能：能够在不修改代码的前提下，给函数添加功能，只能在原函数运行之前或之后添加，不能在运行一半时添加</li><li>装饰器本质是一个闭包函数，是一个返回函数的函数</li><li>装饰器是一种语法糖，需要放到<code>def</code>方法前面</li><li>装饰器与闭包的区别<ul><li>闭包：内部函数将外部函数中的变量，当做数据来用</li><li>装饰器：内部函数将外部函数中的变量，当做函数来调用</li></ul></li></ul><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a><font color=#1E90FF>2. 代码</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sfloor</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tfloor</span>(<span class="hljs-params">arg</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始执行&quot;</span>)<br>        func(arg)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;执行完成&quot;</span>)<br>    <span class="hljs-keyword">return</span> tfloor<br><br><span class="hljs-meta">@sfloor</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">origin</span>(<span class="hljs-params">info</span>):<br>    <span class="hljs-built_in">print</span>(info)<br><br>info = <span class="hljs-string">&quot;实参&quot;</span><br>origin(info)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">开始执行<br>实参<br>执行完成<br></code></pre></td></tr></table></figure><ul><li>原理：执行<code>@sfloor</code>装饰器函数，并将下方的<code>origin</code>当做实参进行传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@sfloor</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">origin</span>(<span class="hljs-params">info</span>):<br></code></pre></td></tr></table></figure><p>等价于如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">origin = sfloor(origin)<br></code></pre></td></tr></table></figure><h3 id="3-装饰器对函数的装饰时间"><a href="#3-装饰器对函数的装饰时间" class="headerlink" title="3. 装饰器对函数的装饰时间"></a><font color=#1E90FF>3. 装饰器对函数的装饰时间</font></h3><ul><li><p>装饰器对方法修饰的时间，不是因为方法的调用，而是在python解释器从上向下解析过程中即开始修饰</p></li><li><p>案例1</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_login</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--1--&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--3--&quot;</span>)<br>        func()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--4--&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--2--&quot;</span>)<br>    <span class="hljs-keyword">return</span> inner<br><br><span class="hljs-meta">@check_login</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f1&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">--<span class="hljs-number">1</span>--<br>--<span class="hljs-number">2</span>--<br></code></pre></td></tr></table></figure><ul><li>案例2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_login</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--1--&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--3--&quot;</span>)<br>        func()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--4--&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--2--&quot;</span>)<br>    <span class="hljs-keyword">return</span> inner<br><br><span class="hljs-meta">@check_login</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f1&#x27;</span>)<br><br>f1()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">--<span class="hljs-number">1</span>--<br>--<span class="hljs-number">2</span>--<br>--<span class="hljs-number">3</span>--<br>f1<br>--<span class="hljs-number">4</span>--<br></code></pre></td></tr></table></figure><h3 id="4-一个装饰器对多个函数装饰"><a href="#4-一个装饰器对多个函数装饰" class="headerlink" title="4. 一个装饰器对多个函数装饰"></a><font color=#1E90FF>4. 一个装饰器对多个函数装饰</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">xxx</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">yyy</span>(<span class="hljs-params">*args, **kwargs</span>):   <span class="hljs-comment"># 用来接收不确定个数的参数</span><br>        ret = func(*args, **kwargs)   <span class="hljs-comment"># 将接收到的参数进行拆包，然后传递到原函数中</span><br>        <span class="hljs-keyword">return</span> ret    <span class="hljs-comment"># 这个return会在调用函数时，将原函数的结果，返回到调用函数的地方</span><br>    <span class="hljs-keyword">return</span> yyy        <span class="hljs-comment"># 这个return会在执行装饰器的过程中，返回内部函数yyy</span><br><br><span class="hljs-meta">@xxx  </span><span class="hljs-comment"># 相当于a=xxx(a)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">num1</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---1&#x27;</span>,num1)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">100</span><br>ret = a(<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(ret)<br><br><span class="hljs-meta">@xxx</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">num1,num2</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---2&#x27;</span>, num1,num2)<br>b(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>)<br><br><span class="hljs-meta">@xxx</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">num1,num2,num3</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---3&#x27;</span>, num1,num2,num3)<br>c(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">---<span class="hljs-number">1</span> <span class="hljs-number">100</span><br>---<span class="hljs-number">2</span> <span class="hljs-number">100</span> <span class="hljs-number">200</span><br>---<span class="hljs-number">3</span> <span class="hljs-number">100</span> <span class="hljs-number">200</span> <span class="hljs-number">300</span><br></code></pre></td></tr></table></figure><h3 id="5-多个装饰器对一个函数进行装饰"><a href="#5-多个装饰器对一个函数进行装饰" class="headerlink" title="5. 多个装饰器对一个函数进行装饰"></a><font color=#1E90FF>5. 多个装饰器对一个函数进行装饰</font></h3><ul><li>当解释器遇到<code>@xxx</code>时，会相当于调用xxx并把下面的函数名当做实参</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义函数：完成包裹数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makeBold</span>(<span class="hljs-params">fn</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapped</span>():<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;b&gt;&quot;</span> + fn() + <span class="hljs-string">&quot;&lt;/b&gt;&quot;</span><br>    <span class="hljs-keyword">return</span> wrapped<br><br><span class="hljs-comment"># 定义函数：完成包裹数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makeItalic</span>(<span class="hljs-params">fn</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapped</span>():<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;i&gt;&quot;</span> + fn() + <span class="hljs-string">&quot;&lt;/i&gt;&quot;</span><br>    <span class="hljs-keyword">return</span> wrapped<br><br><span class="hljs-meta">@makeBold</span><br><span class="hljs-meta">@makeItalic</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span><br><br><span class="hljs-built_in">print</span>(test())<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>代码解释：其中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@makeBold</span><br><span class="hljs-meta">@makeItalic</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br></code></pre></td></tr></table></figure><p>相当于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">test = (makeBold(makeItalic(test)))<br></code></pre></td></tr></table></figure><h3 id="6-通用装饰器"><a href="#6-通用装饰器" class="headerlink" title="6. 通用装饰器"></a><font color=#1E90FF>6. 通用装饰器</font></h3><ul><li>可以对有参数、无参数、有返回值、无返回值的函数装饰</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">xxx</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">yyy</span>(<span class="hljs-params">*args, **kwargs</span>):   <br>        ret = func(*args, **kwargs)   <br>        <span class="hljs-keyword">return</span> ret    <br>    <span class="hljs-keyword">return</span> yyy        <br></code></pre></td></tr></table></figure><h3 id="7-带有参数的装饰器"><a href="#7-带有参数的装饰器" class="headerlink" title="7. 带有参数的装饰器 *"></a><font color=#1E90FF>7. 带有参数的装饰器 *</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">call_out2</span>(<span class="hljs-params">timeout=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call_out1</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---1---&quot;</span>)<br>            time.sleep(timeout)<br>            ret = func(*args, **kwargs)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---2---&#x27;</span>)<br>            <span class="hljs-keyword">return</span> ret<br>        <span class="hljs-keyword">return</span> call<br>    <span class="hljs-keyword">return</span> call_out1<br><br><span class="hljs-meta">@call_out2(<span class="hljs-params"><span class="hljs-number">2</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">word</span>):<br>    <span class="hljs-built_in">print</span>(word)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span><br>test(<span class="hljs-string">&quot;hello&quot;</span>)<br><br><span class="hljs-meta">@call_out2(<span class="hljs-params"><span class="hljs-number">1</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">word</span>):<br>    <span class="hljs-built_in">print</span>(word)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span><br>test(<span class="hljs-string">&quot;word&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">---<span class="hljs-number">1</span>---<br>hello<br>---<span class="hljs-number">2</span>---<br>---<span class="hljs-number">1</span>---<br>word<br>---<span class="hljs-number">2</span>---<br></code></pre></td></tr></table></figure><ul><li>代码解释：</li></ul><ol><li>相当于执行<code>call_out2(2)</code>，赋值<code>timeout</code>为2，得到返回值<code>call_out1</code></li><li>执行<code>call_out1(test)</code>，得到返回值<code>call</code></li></ol><h2 id="31-魔法方法"><a href="#31-魔法方法" class="headerlink" title="31. 魔法方法"></a><font color=#1E90FF>31. 魔法方法</font></h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-emphasis">__init__</span> <span class="hljs-emphasis">__new__</span> <span class="hljs-emphasis">__str__</span> <span class="hljs-emphasis">__del__</span>  <span class="hljs-emphasis">__iter__</span>  <span class="hljs-emphasis">__next__</span>  <span class="hljs-emphasis">__init__</span><br></code></pre></td></tr></table></figure><h3 id="1-call"><a href="#1-call" class="headerlink" title="1.__call__"></a>1.<code>__call__</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Line</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,k,b</span>):<br>        self.k = k<br>        self.b = b<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-built_in">print</span>(self.k * x + self.b)<br><br>line1 = Line(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>line1(<span class="hljs-number">0</span>)   <span class="hljs-comment"># 2  # 如果出现了实例对象名()，那么会自动调用__call__方法</span><br>line1(<span class="hljs-number">1</span>)   <span class="hljs-comment"># 3</span><br>line1 = Line(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>)<br>line1(<span class="hljs-number">0</span>)   <span class="hljs-comment"># 20</span><br>line1(<span class="hljs-number">1</span>)   <span class="hljs-comment"># 30</span><br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">xxx</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">yyy</span>(<span class="hljs-params">*args, **kwargs</span>):   <span class="hljs-comment"># 用来接收不确定个数的参数</span><br>        ret = func(*args, **kwargs)   <span class="hljs-comment"># 将接收到的参数进行拆包，然后传递到原函数中</span><br>        <span class="hljs-keyword">return</span> ret    <span class="hljs-comment"># 这个return会在调用函数时，将原函数的结果，返回到调用函数的地方</span><br>    <span class="hljs-keyword">return</span> yyy        <span class="hljs-comment"># 这个return会在执行装饰器的过程中，返回内部函数yyy</span><br></code></pre></td></tr></table></figure><h2 id="32-map"><a href="#32-map" class="headerlink" title="32. map"></a><font color=#1E90FF>32. map</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:x*x, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])  <span class="hljs-comment"># 为了方便，我们可以把map的返回值理解为列表，此时[1,4,9]</span><br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-built_in">print</span>(temp)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;<span class="hljs-built_in">map</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f8dc8173990</span>&gt;<br><span class="hljs-number">1</span><br><span class="hljs-number">4</span><br><span class="hljs-number">9</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语言</tag>
      
      <tag>Python</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Web框架</title>
    <link href="/2023/12/01/Spring%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/12/01/Spring%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-入门案例"><a href="#1-入门案例" class="headerlink" title="1. 入门案例"></a>1. 入门案例</h2><h3 id="1-Spring项目创建"><a href="#1-Spring项目创建" class="headerlink" title="1. Spring项目创建"></a>1. Spring项目创建</h3><ol><li><p>创建父项目spring-project</p><div style="text-align:center;gap:5px">    <img src="/img/spring_pic/2.png" alt="图片描述" style="zoom:40%;"></div></li><li><p>删除src目录；新建子模块spring-first</p><div style="text-align:center;gap:5px">    <img src="/img/spring_pic/3.png" alt="图片描述" style="zoom:13%;">      <img src="/img/spring_pic/4.png" alt="图片描述" style="zoom:13%;"></div></li><li><p>在<mark>子模块spring-first</mark>的maven中，引入spring相关依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- spring context 依赖 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 当引入spring context依赖后，表示将spring的基础依赖引入了 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- junit --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_pic/5.png" alt="图片描述" style="zoom:25%;"></div><ol start="4"><li><p>在子模块中-src-main-java中添加com.flash2.spring6软件包</p><div style="text-align:center;gap:5px">    <img src="/img/spring_pic/6.png" alt="图片描述" style="zoom:25%;"></div></li></ol><h3 id="2-存储bean"><a href="#2-存储bean" class="headerlink" title="2. 存储bean"></a>2. 存储bean</h3><ol><li>创建User类（Bean对象），定义属性和方法</li></ol><div style="text-align:center;gap:5px">    <img src="/img/spring_pic/7.png" alt="图片描述" style="zoom:35%;"></div><ol start="2"><li><p>将bean注册到Spring中</p><ol><li><p>在resources资源目录下添加 Spring 配置⽂件<code>spring-config.xml</code>，并添加下述配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">  <img src="/img/spring_pic/8.png" alt="图片描述" style="zoom:25%;"></div><div style="text-align:center;gap:5px">  <img src="/img/spring_pic/12.png" alt="图片描述" style="zoom:45%;"></div></li><li><p>添加好配置文件后，再将Bean对象注册到 Spring 中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 完成user对象的创建</span><br><span class="hljs-comment">    bean标签</span><br><span class="hljs-comment">        id：指明Bean对象名称</span><br><span class="hljs-comment">        class：要创建对象所在类的全部路径（包名称+类名称）</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.flashchen2.spring6.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述表示含义为：将Bean（com.flashchen2.spring6.User）存到Spring 容器中，它的名称叫作<code>user</code></p><div style="text-align:center;gap:5px">    <img src="/img/spring_pic/9.png" alt="图片描述" style="zoom:25%;"></div></li></ol></li><li><p>用此方法存储bean的好处</p></li></ol><p><mark>可以省略想要实现某方法，需要先创建对象的步骤</mark>，即红框内的部分</p><div style="text-align:center;gap:5px">    <img src="/img/spring_pic/10.png" alt="图片描述" style="zoom:35%;"></div><h3 id="3-读取bean"><a href="#3-读取bean" class="headerlink" title="3. 读取bean"></a>3. 读取bean</h3><ol><li><p>创建TestUser测试类，进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.flashchen2.spring6;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUser</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUserObject</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 1. 加载spring配置文件，对象的创建</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 获取创建的对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;1 &quot;</span> + user);<br><br>        <span class="hljs-comment">// 3. 使用对象调用方法进行测试</span><br>        System.out.print(<span class="hljs-string">&quot;2 &quot;</span>);<br>        user.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/spring_pic/11.png" alt="图片描述" style="zoom:25%;"></div></li></ol><h3 id="4-基于注解管理Bean"><a href="#4-基于注解管理Bean" class="headerlink" title="4. 基于注解管理Bean *"></a>4. 基于注解管理Bean *</h3><ul><li>通过注释在不改变原有代码和逻辑的情况下，在源代码中嵌入补充信息</li><li>Spring通过注释实现自动装配的步骤如下<ul><li>引入依赖</li><li>开启组件扫描</li><li>使用注释定义Bean</li><li>依赖注入</li></ul></li></ul><h2 id="2-容器：IoC"><a href="#2-容器：IoC" class="headerlink" title="2. 容器：IoC"></a>2. 容器：IoC</h2><p>IoC是Inversion of Control的缩写，译为“控制反转”。Spring通过<mark>IoC容器</mark>来管理，<mark>所有Java对象的实例化和初始化，控制对象与对象之间的依赖关系</mark>。我们将由IoC容器管理的Java对象称为Spring Bean，它与使用关键字new创建的Java对象没有任何区别</p>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>框架</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web测试</title>
    <link href="/2023/12/01/Web%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/12/01/Web%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Postman的使用"><a href="#1-Postman的使用" class="headerlink" title="1. Postman的使用"></a><font color=#1E90FF>1. Postman的使用</font></h2><h3 id="1-通过Postman生成接口请求代码"><a href="#1-通过Postman生成接口请求代码" class="headerlink" title="1. 通过Postman生成接口请求代码"></a>1. 通过Postman生成接口请求代码</h3><div style="text-align:center;gap:5px">    <img src="/img/web_test_pic/2.png" alt="图片描述" style="zoom:60%;"></div><h3 id="2-快速复现问题场景"><a href="#2-快速复现问题场景" class="headerlink" title="2. 快速复现问题场景"></a>2. 快速复现问题场景</h3><ol><li>获取问题场景的<code>curl</code></li></ol><div style="text-align:center;gap:5px">    <img src="/img/web_test_pic/3.png" alt="图片描述" style="zoom:25%;"></div><ol start="2"><li>通过<code>postman</code>解析 <code>curl</code></li></ol><ul><li>步骤：<ul><li>打开Postman。</li><li>点击“Import”按钮。</li><li>选择“Raw text”选项。</li><li>粘贴你的 curl 命令，然后点击“Continue”。</li><li>Postman会自动解析并生成相应的请求，你可以在Postman中进一步编辑和发送请求</li></ul></li></ul><div style="text-align:center;gap:5px">    <img src="/img/web_test_pic/4.png" alt="图片描述" style="zoom:25%;"></div><ol start="3"><li><code>curl</code>的解析<ol><li>发送GET请求：<code>curl -T localfile.txt ftp://example.com/remote/path/</code></li><li>发送POST请求：<code>curl http://example.com</code></li><li>请求头：<code>-H &quot;Content-Type: application/json&quot;</code></li><li>请求体：<code>--data-raw &#39;&#123;&quot;shareAccountIds&quot;:[900015363,900245391,900245392],&quot;templateId&quot;:6419&#125;&#39;</code><ul><li>这是请求的主体数据，格式为 JSON，包含了 shareAccountIds 和 templateId</li></ul></li></ol></li></ol><h2 id="2-Web界面检查"><a href="#2-Web界面检查" class="headerlink" title="2. Web界面检查"></a><font color=#1E90FF>2. Web界面检查</font></h2><h3 id="1-接口mock"><a href="#1-接口mock" class="headerlink" title="1. 接口mock"></a>1. 接口mock</h3><p>作用：用于手动阻塞某接口，模拟用户无法正常访问等特殊情况下，访问页面后的前端响应</p><p>具体操作步骤参考：<a href="https://www.cnblogs.com/Z-Queen/p/18047565">https://www.cnblogs.com/Z-Queen/p/18047565</a></p><div style="text-align:center;gap:5px">    <img src="/img/web_test_pic/5.png" alt="图片描述" style="zoom:25%;"></div>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
      <tag>Web测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BootStrap 前端框架</title>
    <link href="/2023/11/30/BootStrap%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/11/30/BootStrap%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、BootStrap介绍"><a href="#一、BootStrap介绍" class="headerlink" title="一、BootStrap介绍"></a>一、BootStrap介绍</h1><ol><li><p>本质<br>别人已经帮我们写好的CSS样式，可以快速搭建相对美观的页面，如果我们想要使用这个BootStrap</p></li><li><p>学习链接：<a href="https://www.bilibili.com/video/">https://www.bilibili.com/video/</a></p></li></ol><h1 id="二、安装-导入Bootstrap"><a href="#二、安装-导入Bootstrap" class="headerlink" title="二、安装&amp;导入Bootstrap"></a>二、安装&amp;导入Bootstrap</h1><ol><li><p>下载地址：<a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a></p><div style="text-align:center"> <img src="/img/bootstrap_pic/2.jpg" alt="图片描述"></div></li><li><p>导入方式</p><ol><li>建立static - plugins目录，将解压好的BootStrap放到plugins中。并引入css文件 <div style="text-align:center"> <img src="/img/bootstrap_pic/3.jpg" alt="图片描述"></div></li></ol></li><li><p>整体使用思路</p><ol><li>在页面上引入BootStrap</li><li>编写HTML时，按照BootStrap的规定来编写 + 自制定</li></ol></li><li><p>demo</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;static/plugins/bootstrap-3.4.1/css/bootstrap.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center"> <img src="/img/bootstrap_pic/4.jpg" alt="图片描述"></div></li></ol><h1 id="三、常用样式"><a href="#三、常用样式" class="headerlink" title="三、常用样式"></a>三、常用样式</h1><h2 id="1-布局容器"><a href="#1-布局容器" class="headerlink" title="1. 布局容器"></a>1. 布局容器</h2><ol><li>优势：统一页面布局整体边距样式</li><li>用于调整模块整体的高度和宽度（一般网页制作固定宽度，两侧留白）<div style="text-align:center"> <img src="/img/bootstrap_pic/5.jpg" alt="图片描述"></div></li></ol><h2 id="2-栅格网格系统"><a href="#2-栅格网格系统" class="headerlink" title="2. 栅格网格系统"></a>2. 栅格网格系统</h2><ol><li>优势：对分割好的行内块级元素，进行再次分隔进行均分<div style="text-align:center"> <img src="/img/bootstrap_pic/6.jpg" alt="图片描述"></div></li></ol><div style="text-align:center">    <img src="/img/bootstrap_pic/7.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/bootstrap_pic/8.jpg" alt="图片描述"></div><h3 id="1-列组合-使用频率最高"><a href="#1-列组合-使用频率最高" class="headerlink" title="1. 列组合 - 使用频率最高"></a>1. 列组合 - 使用频率最高</h3><ol><li>优势：块级元素不用浮动float，便能获得同一行的块级样式<div style="text-align:center"> <img src="/img/bootstrap_pic/9.jpg" alt="图片描述"></div></li></ol><h3 id="2-列偏移-用的比较少，多数靠调整外间距微调"><a href="#2-列偏移-用的比较少，多数靠调整外间距微调" class="headerlink" title="2. 列偏移 - 用的比较少，多数靠调整外间距微调"></a>2. 列偏移 - 用的比较少，多数靠调整外间距微调</h3><ol><li>优势：行内块级元素之间的间距设计，依据行内均分大小<div style="text-align:center"> <img src="/img/bootstrap_pic/10.jpg" alt="图片描述"></div></li></ol><h3 id="3-列排序"><a href="#3-列排序" class="headerlink" title="3. 列排序"></a>3. 列排序</h3><ol><li>优势：改变行内块级元素所在行内位置，从而改变元素排列<div style="text-align:center"> <img src="/img/bootstrap_pic/11.jpg" alt="图片描述"></div></li></ol><h3 id="4-列嵌套"><a href="#4-列嵌套" class="headerlink" title="4. 列嵌套"></a>4. 列嵌套</h3><ol><li>优势：对分割好的行内块级元素，进行再次分隔进行均分<div style="text-align:center"> <img src="/img/bootstrap_pic/12.jpg" alt="图片描述"></div></li></ol><h2 id="3-排版"><a href="#3-排版" class="headerlink" title="3. 排版"></a>3. 排版</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h3><ol><li>优势：<code>&lt;small&gt;</code>更好看的负标题标签<div style="text-align:center"> <img src="/img/bootstrap_pic/13.jpg" alt="图片描述" style="zoom:65%;"> <img src="/img/bootstrap_pic/14.jpg" alt="图片描述" style="zoom:55%;"></div></li></ol><h3 id="2-段落"><a href="#2-段落" class="headerlink" title="2. 段落"></a>2. 段落</h3><ol><li>优势：<code>&lt;lead&gt;</code>更好看文本文字<div style="text-align:center"> <img src="/img/bootstrap_pic/15.jpg" alt="图片描述"></div></li></ol><div style="text-align:center">    <img src="/img/bootstrap_pic/16.jpg" alt="图片描述"></div><h3 id="3-强调"><a href="#3-强调" class="headerlink" title="3. 强调"></a>3. 强调</h3><ol><li>优势：不用设置文字的字体颜色。设置字体表达含义，从而自动设定颜色<div style="text-align:center"> <img src="/img/bootstrap_pic/17.jpg" alt="图片描述"></div></li></ol><h3 id="4-对齐效果"><a href="#4-对齐效果" class="headerlink" title="4. 对齐效果"></a>4. 对齐效果</h3><div style="text-align:center">    <img src="/img/bootstrap_pic/18.jpg" alt="图片描述"></div><h3 id="5-代码-键盘按键"><a href="#5-代码-键盘按键" class="headerlink" title="5. 代码 键盘按键"></a>5. 代码 键盘按键</h3><div style="text-align:center">    <img src="/img/bootstrap_pic/19.jpg" alt="图片描述"></div><ol><li><p>显示<code>html</code>代码需要使用字符实体<br><code>&lt;h2&gt;</code>变为<code>&amp;lt;h2&amp;gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><br>    <span class="hljs-symbol">&amp;lt;</span>h2<span class="hljs-symbol">&amp;gt;</span>您好<span class="hljs-symbol">&amp;lt;</span>/h2<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>多行代码过多可以增加滚动条</p><div style="text-align:center"> <img src="/img/bootstrap_pic/20.jpg" alt="图片描述"></div></li></ol><div style="text-align:center">    <img src="/img/bootstrap_pic/21.jpg" alt="图片描述"></div><h3 id="6-表格"><a href="#6-表格" class="headerlink" title="6. 表格"></a>6. 表格</h3><div style="text-align:center">    <img src="/img/bootstrap_pic/22.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/bootstrap_pic/23.jpg" alt="图片描述"></div><h2 id="4-表单"><a href="#4-表单" class="headerlink" title="4. 表单"></a>4. 表单</h2><h3 id="1-文本框-text"><a href="#1-文本框-text" class="headerlink" title="1. 文本框 - text"></a>1. 文本框 - text</h3><p><code>class=&#39;form-control&#39;</code></p><div style="text-align:center">    <img src="/img/bootstrap_pic/24.jpg" alt="图片描述"></div><h3 id="2-下拉框-select"><a href="#2-下拉框-select" class="headerlink" title="2. 下拉框 - select"></a>2. 下拉框 - select</h3><div style="text-align:center">    <img src="/img/bootstrap_pic/25.jpg" alt="图片描述"></div><h3 id="3-文本域-textarea"><a href="#3-文本域-textarea" class="headerlink" title="3. 文本域 - textarea"></a>3. 文本域 - textarea</h3><div style="text-align:center">    <img src="/img/bootstrap_pic/26.jpg" alt="图片描述"></div><h3 id="4-复选框-checkbox"><a href="#4-复选框-checkbox" class="headerlink" title="4. 复选框 - checkbox"></a>4. 复选框 - checkbox</h3><div style="text-align:center">    <img src="/img/bootstrap_pic/27.jpg" alt="图片描述"></div><h3 id="5-单选框-row"><a href="#5-单选框-row" class="headerlink" title="5. 单选框 - row"></a>5. 单选框 - row</h3><div style="text-align:center">    <img src="/img/bootstrap_pic/28.jpg" alt="图片描述"></div><h3 id="6-按钮-btn"><a href="#6-按钮-btn" class="headerlink" title="6. 按钮 - btn"></a>6. 按钮 - btn</h3><div style="text-align:center">    <img src="/img/bootstrap_pic/29.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/bootstrap_pic/30.jpg" alt="图片描述"></div><h3 id="7-水平表单-form"><a href="#7-水平表单-form" class="headerlink" title="7. 水平表单 - form"></a>7. 水平表单 - form</h3><div style="text-align:center">    <img src="/img/bootstrap_pic/31.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/bootstrap_pic/32.jpg" alt="图片描述"></div><p>内联表单使用次数较少</p><div style="text-align:center">    <img src="/img/bootstrap_pic/33.jpg" alt="图片描述"></div><h2 id="4-缩略图"><a href="#4-缩略图" class="headerlink" title="4. 缩略图"></a>4. 缩略图</h2><div style="text-align:center">    <img src="/img/bootstrap_pic/34.jpg" alt="图片描述"></div><h2 id="5-面板"><a href="#5-面板" class="headerlink" title="5. 面板"></a>5. 面板</h2><div style="text-align:center">    <img src="/img/bootstrap_pic/35.jpg" alt="图片描述"></div><h2 id="6-表单内容美化格式"><a href="#6-表单内容美化格式" class="headerlink" title="6. 表单内容美化格式"></a>6. 表单内容美化格式</h2><ul><li>重点为<div>标签<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">csrf_token</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;group_name&quot;</span>&gt;</span>飞书群名称<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;group_name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;group_name&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;project_filter&quot;</span>&gt;</span>项目filter<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;project_filter&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;project_filter&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;send_btn&quot;</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul><h2 id="7-导航"><a href="#7-导航" class="headerlink" title="7. 导航"></a>7. 导航</h2><div style="text-align:center">    <img src="/img/bootstrap_pic/36.jpg" alt="图片描述"></div><h3 id="1-路径导航"><a href="#1-路径导航" class="headerlink" title="1. 路径导航"></a>1. 路径导航</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;ol <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">breadcrumb</span>&quot;&gt;<br>    &lt;<span class="hljs-symbol">li</span>&gt;&lt;<span class="hljs-symbol">a</span> <span class="hljs-symbol">href</span>=&quot;#&quot;&gt;<span class="hljs-symbol">Home</span>&lt;/<span class="hljs-symbol">a</span>&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span>&gt;&lt;<span class="hljs-symbol">a</span> <span class="hljs-symbol">href</span>=&quot;#&quot;&gt;<span class="hljs-symbol">Library</span>&lt;/<span class="hljs-symbol">a</span>&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">active</span>&quot;&gt;<span class="hljs-symbol">Data</span>&lt;/<span class="hljs-symbol">li</span>&gt;<br>&lt;/<span class="hljs-symbol">ol</span>&gt;<br></code></pre></td></tr></table></figure><div style="text-align:center">    <img src="/img/bootstrap_pic/37.jpg" alt="图片描述"></div><h3 id="2-分页导航"><a href="#2-分页导航" class="headerlink" title="2. 分页导航"></a>2. 分页导航</h3><div style="text-align:center">    <img src="/img/bootstrap_pic/38.jpg" alt="图片描述"></div><h3 id="3-下拉菜单"><a href="#3-下拉菜单" class="headerlink" title="3. 下拉菜单"></a>3. 下拉菜单</h3><div style="text-align:center">    <img src="/img/bootstrap_pic/39.jpg" alt="图片描述"></div><h3 id="4-模态框-弹出框"><a href="#4-模态框-弹出框" class="headerlink" title="4. 模态框 弹出框"></a>4. 模态框 弹出框</h3><div style="text-align:center">    <img src="/img/bootstrap_pic/40.jpg" alt="图片描述"></div>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>前端</tag>
      
      <tag>前端框架</tag>
      
      <tag>BootStrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM</title>
    <link href="/2023/11/30/JVM/"/>
    <url>/2023/11/30/JVM/</url>
    
    <content type="html"><![CDATA[<h1 id="一、JVM介绍"><a href="#一、JVM介绍" class="headerlink" title="一、JVM介绍"></a><font color=#1E90FF>一、JVM介绍</font></h1><ul><li>定义：Java Virtual Machine - java虚拟机</li><li>好处：<ul><li>一次编写，到处运行</li><li>自动内存管理，垃圾回收功能</li><li>数组下标越界检查</li><li>多态</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>虚拟机</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2023/11/30/Java/"/>
    <url>/2023/11/30/Java/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Java基础入门"><a href="#一、Java基础入门" class="headerlink" title="一、Java基础入门"></a><font color=#1E90FF>一、Java基础入门</font></h1><p> JavaSE包含了Java语言的基础类库、Java虚拟机、Java编译器等工具，是Java开发的基础和核心</p><p>学习链接：<a href="https://www.bilibili.com/video/BV17F411T7Ao?p=136&spm_id_from=pageDriver&vd_source=4cf7b60c223a665538a4d958765c91a5">https://www.bilibili.com/video/BV17F411T7Ao</a></p><h2 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1. 基础配置"></a><font color=#1E90FF>1. 基础配置</font></h2><h3 id="1-包"><a href="#1-包" class="headerlink" title="1. 包"></a><font color=#1E90FF>1. 包</font></h3><p><font color=#1E90FF>1. 建包</font></p><p>电脑文件夹 - 新模块 - src文件夹 - 软件包 - java类</p><div style="text-align:center;gap:5px">    <img src="/img/java_pic/20.png" alt="图片描述" style="zoom:80%;"></div><ol start="2"><li>命名规范</li></ol><ul><li>需要全部英文小写</li><li>包名必须用”.“连接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">路径名.路径名.xxx.xxx<br><span class="hljs-comment">// 例如：com.itheima.oa</span><br></code></pre></td></tr></table></figure><ol start="3"><li>导包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.domain.Student;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-IDEA快捷键"><a href="#2-IDEA快捷键" class="headerlink" title="2. IDEA快捷键"></a>2. IDEA快捷键</h3><ol><li><code>psvm</code> 回车后，自动生成以下代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><code>.sout</code> 回车后，自动生成以下代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println();<br></code></pre></td></tr></table></figure><ol start="3"><li><code>option + command + v</code>快速生成左边</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>sc.nextInt()<br><br><span class="hljs-comment">// 快捷键后变为</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br></code></pre></td></tr></table></figure><ol start="4"><li>格式化代码</li></ol><p><code>command + option + L</code></p><h3 id="3-命名方法"><a href="#3-命名方法" class="headerlink" title="3. 命名方法"></a>3. 命名方法</h3><ol><li><p>小驼峰命名法 - <mark>适用于变量名和方法名</mark></p><ul><li><p>如果是一个单词，那么全部小写，比如：name </p></li><li><p>如果是多个单词，那么从第二个单词开始，首字母大写，比如：firstName、maxAge</p></li></ul></li><li><p>大驼峰命名法 - <mark>适用于类名（类名与文件名需取名相同）</mark></p><ul><li><p>如果是一个单词，那么首字母大写。比如：Demo、Test。 </p></li><li><p>如果是多个单词，那么每一个单词首字母都需要大写。比如：HelloWorld</p></li></ul></li></ol><div style="text-align:center;gap:5px">    <img src="/img/java_pic/2.jpg" alt="图片描述" style="zoom:50%"></div><h3 id="4-第一个java程序"><a href="#4-第一个java程序" class="headerlink" title="4. 第一个java程序"></a>4. 第一个java程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zc.demo1;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWord</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;你好，老铁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-键盘输入-Scanner"><a href="#5-键盘输入-Scanner" class="headerlink" title="5. 键盘输入 Scanner"></a>5. 键盘输入 <code>Scanner</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br><span class="hljs-comment">//当程序运行之后，我们在键盘输入的数据就会被变量i给接收了</span><br>System.out.println(<span class="hljs-string">&quot;请输入一个数字&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br>System.out.println(i);<br></code></pre></td></tr></table></figure><ol><li><p>数据接收</p><ul><li>遇到空格，制表符，回车等符号，就停止接收，这些符号后面的数据就不会接收了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// nextInt();      接收整数</span><br><span class="hljs-comment">// nextDouble();   接收小数    </span><br><span class="hljs-comment">// next();         接受字符串</span><br></code></pre></td></tr></table></figure><ul><li>可以接收空格，制表符，遇到回车才停止接收数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// nextLine();     接收字符串</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="6-打印"><a href="#6-打印" class="headerlink" title="6. 打印"></a>6. 打印</h3><ol><li><p><code>println</code>换行输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;abc&quot;</span>);   <span class="hljs-comment">// 先打印abc，再进行换行</span><br>System.out.println( );       <span class="hljs-comment">// 不打印任何数据，只做换行处理</span><br></code></pre></td></tr></table></figure></li><li><p><code>print</code>直接输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.print(<span class="hljs-string">&quot;abc&quot;</span>);     <span class="hljs-comment">// 只打印abc，不换行</span><br></code></pre></td></tr></table></figure></li><li><p><code>printf</code>占位符输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.printf(<span class="hljs-string">&quot;你好啊%s&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>System.out.printf(<span class="hljs-string">&quot;%s你好啊%s&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-随机数Random"><a href="#7-随机数Random" class="headerlink" title="7. 随机数Random"></a>7. 随机数<code>Random</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建对象</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-comment">// 生成随机数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>);<span class="hljs-comment">//包左不包右，包头不包尾</span><br><span class="hljs-comment">// 0 ~ 99</span><br>System.out.println(number);<br></code></pre></td></tr></table></figure><h3 id="8-SDK"><a href="#8-SDK" class="headerlink" title="8. SDK"></a>8. SDK</h3><p>查看项目SDK版本，文件-项目结构-SDK，</p><div style="text-align:center;gap:5px">    <img src="/img/java_pic/59.png" alt="图片描述" style="zoom:50%"></div><hr><h2 id="2-运算符和表达式"><a href="#2-运算符和表达式" class="headerlink" title="2. 运算符和表达式"></a>2. 运算符和表达式</h2><h3 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1. 算数运算符"></a>1. 算数运算符</h3><ol><li>除法</li></ol><ul><li><p>整数相除结果只能得到整除，如果结果想要是小数，必须要有小数参数。 </p></li><li><p>小数直接参与运算，得到的结果有可能是不精确的。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println( <span class="hljs-number">10</span> / <span class="hljs-number">3</span> );    <span class="hljs-comment">//3 </span><br>System.out.println( <span class="hljs-number">10.0</span> / <span class="hljs-number">3</span> );  <span class="hljs-comment">//3.3333333333333335</span><br></code></pre></td></tr></table></figure><ol start="2"><li>加法</li></ol><ul><li>当”+”操作中出现字符串时，”+”用于连接字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;123&quot;</span> + <span class="hljs-number">123</span>      <span class="hljs-comment">// 123123</span><br><span class="hljs-number">1</span> + <span class="hljs-number">99</span> + <span class="hljs-string">&quot;黑马&quot;</span>   <span class="hljs-comment">// 100黑马</span><br></code></pre></td></tr></table></figure><h3 id="2-强制转换"><a href="#2-强制转换" class="headerlink" title="2. 强制转换"></a>2. 强制转换</h3><p>如果把一个取值范围大的数值，赋值给取值范围小的变量。是不允许直接赋值的。如果一定要这么做需要加入强制转换</p><ul><li>格式：<code>目标数据类型 变量名=(目标数据类型) 被强制转的数据;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.6</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)a;<br>System.out.println(b);    <span class="hljs-comment">// 12</span><br></code></pre></td></tr></table></figure><h3 id="4-三元运算符"><a href="#4-三元运算符" class="headerlink" title="4. 三元运算符"></a>4. 三元运算符</h3><ol><li><p>格式：<mark>关系表达式 ？ 表达式1 ：表达式2 ；</mark></p></li><li><p>计算规则：</p></li></ol><ul><li>计算关系表达式的值</li><li>如果关系表达式的值为真，那么执行表达式1</li><li>如果关系表达式的值为假，那么执行表达式2</li></ul><ol start="3"><li>比较数字大小：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">150</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">210</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">165</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> a &gt; b ? a : b;       <span class="hljs-comment">// 210</span><br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> max &lt; c ? max : c;  <span class="hljs-comment">// 165</span><br></code></pre></td></tr></table></figure><h3 id="5-和"><a href="#5-和" class="headerlink" title="5.&#39;&#39;和 &quot;&quot;"></a>5.<code>&#39;&#39;</code>和 <code>&quot;&quot;</code></h3><p>‘ ‘（单引号）用于表示单个字符字面量，不能表示一串字符。</p><p>“ “（双引号）用于表示字符串字面量，可以用于表示任意长度的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>; <span class="hljs-comment">// 单个字符字面量</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello, world!&quot;</span>; <span class="hljs-comment">// 字符串字面量</span><br></code></pre></td></tr></table></figure><ul><li>python中无此类限制</li></ul><hr><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3. 数组"></a>3. 数组</h2><h3 id="1-静态初始化"><a href="#1-静态初始化" class="headerlink" title="1. 静态初始化"></a>1. 静态初始化</h3><p>说明：<mark>指定数组元素</mark>，如果确定了数据的具体值，就使用这种方式存储批量数据</p><p>格式：</p><p>​<code>类型[] 数据名 = new 类型[] &#123;元素1, 元素2, 元素3...&#125;;</code></p><p>​<code>类型[] 数据名 = &#123;元素1, 元素2, 元素3...&#125;;</code></p><p>例：<code>int[] arr = &#123;1, 2, 3, 4, 5&#125;;</code></p><h3 id="2-动态初始化"><a href="#2-动态初始化" class="headerlink" title="2. 动态初始化"></a>2. 动态初始化</h3><p>说明：<mark>指定数组长度</mark>，由系统给出默认初始化值<code>0</code>。先定义数组，后赋值数据进去</p><p>格式：<code>数据类型[] 数据名 = new 数据类型[数组长度];</code></p><p>例：<code>int[] arr = new int[5]; </code></p><h3 id="3-数组的访问"><a href="#3-数组的访问" class="headerlink" title="3. 数组的访问"></a>3. 数组的访问</h3><ol><li>格式：<code>数组名称[索引]</code></li><li>取值：<code>int data = arr[i];</code></li><li>赋值：<code>arr[i] = 222;</code></li><li>长度：<code>arr.length</code></li></ol><h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h3><ol><li>什么类型的数组只能存放什么类型的数据</li><li>数组一旦定义出来，程序执行的过程中，长度和类型就固定了；数据的内容可以发生改变</li></ol><h3 id="5-练习"><a href="#5-练习" class="headerlink" title="5. 练习"></a>5. 练习</h3><h4 id="1-数组添加"><a href="#1-数组添加" class="headerlink" title="1. 数组添加"></a>1. 数组添加</h4><ul><li>需求：在数组<code>[1,2,3]</code>中，添加数据4</li><li>分析：<ul><li>设置一个新数组，长度为老数组.length+1  &#x3D;&#x3D;&gt;  新数组<code>[null,null,null,null]</code></li><li>将老数组的所有数据导入新数组  &#x3D;&#x3D;&gt;  新数组<code>[1,2,3,null]</code></li><li>新数组[老数组.length+1] &#x3D; 4;  &#x3D;&#x3D;&gt;  新数组<code>[1,2,3,4]</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建一个数组用来存储学生对象</span><br>Student[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">3</span>];<br><br><span class="hljs-comment">//2.创建学生对象并添加到数组当中</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">stu1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">stu2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-number">24</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">stu3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;wangwu&quot;</span>, <span class="hljs-number">25</span>)<br><br><span class="hljs-comment">//3.把学生对象添加到数组当中</span><br>arr[<span class="hljs-number">0</span>] = stu1;<br>arr[<span class="hljs-number">1</span>] = stu2;<br>arr[<span class="hljs-number">2</span>] = stu3;<br><br><span class="hljs-comment">//4.再次添加一个学生对象，并在添加的时候进行学号的唯一性判断。</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">stu4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;zhaoliu&quot;</span>, <span class="hljs-number">26</span>);<br><br>Student[] newArr = creatNewArr(arr);<br><span class="hljs-comment">//把stu4添加进去</span><br>newArr[arr.length + <span class="hljs-number">1</span>] = stu4;<br><br><span class="hljs-comment">//创建一个新的数组，长度 = 老数组的长度 + 1</span><br><span class="hljs-comment">//然后把老数组的元素，拷贝到新数组当中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Student[] creatNewArr(Student[] arr)&#123;<br>    Student[] newArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[arr.length + <span class="hljs-number">1</span>];<br><br>    <span class="hljs-comment">//循环遍历得到老数组中的每一个元素</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-comment">//把老数组中的元素添加到新数组当中</span><br>        newArr[i] = arr[i];<br>    &#125;<br><br>    <span class="hljs-comment">//把新数组返回</span><br>    <span class="hljs-keyword">return</span> newArr;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-一维-二维数组"><a href="#2-一维-二维数组" class="headerlink" title="2. 一维 -&gt; 二维数组"></a>2. 一维 -&gt; 二维数组</h4><ul><li>需求：<ol><li>把一个一维数组中的数据：0~15 打乱顺序</li><li>然后再按照4个一组的方式添加到二维数组当中</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.定义一个一维数组</span><br><span class="hljs-type">int</span>[] tempArr = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>&#125;;<br><span class="hljs-comment">//2.打乱数组中的数据的顺序</span><br><span class="hljs-comment">//遍历数组，得到每一个元素，拿着每一个元素跟随机索引上的数据进行交换</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempArr.length; i++) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> r.nextInt(tempArr.length);<br>    <span class="hljs-comment">//拿着遍历到的每一个数据，跟随机索引上的数据进行交换</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> tempArr[i];<br>    tempArr[i] = tempArr[index];<br>    tempArr[index] = temp;<br>&#125;<br><br><span class="hljs-comment">//4.创建一个二维数组</span><br><span class="hljs-type">int</span>[][] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br><br><span class="hljs-comment">//5.给二维数组添加数据</span><br><span class="hljs-comment">//解法一：</span><br><span class="hljs-comment">//遍历一维数组tempArr得到每一个元素，把每一个元素依次添加到二维数组当中</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempArr.length; i++) &#123;<br>    data[i / <span class="hljs-number">4</span>][i % <span class="hljs-number">4</span>] = tempArr[i];<br>&#125;<br><br><span class="hljs-comment">//遍历二维数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>        System.out.print(data[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-随机排名"><a href="#3-随机排名" class="headerlink" title="3. 随机排名"></a>3. 随机排名</h4><ul><li>需求：将数组<code>[22,33,35,13,88]</code>内的数据进行随机排序</li><li>思路：<ul><li>遍历数组中的每个元素</li><li>每遍历一个数据，都随机一个索引值出来，让当前数据与该索引位置处的数据进行交换</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] codes = &#123;<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">5</span>,<span class="hljs-number">13</span>,<span class="hljs-number">88</span>&#125;;<br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; codes.length; i++) &#123;<br>    <span class="hljs-comment">// 获取随机数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> r.nextInt(codes.length);<br><br>    <span class="hljs-comment">// 进行数值交换</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> codes[i];<br>    codes[i] = codes[index];<br>    codes[index] = temp;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; codes.length; i++) &#123;<br>    System.out.print(codes[i]+ <span class="hljs-string">&quot; &quot;</span>);      <span class="hljs-comment">// 88 5 22 33 13</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="4-循环"><a href="#4-循环" class="headerlink" title="4. 循环"></a>4. 循环</h2><h3 id="1-列表的循环"><a href="#1-列表的循环" class="headerlink" title="1. 列表的循环"></a>1. 列表的循环</h3><ol><li><p>快捷键</p><ol><li><p>正向遍历：<mark><code>arr.fori + 回车键</code> </mark></p></li><li><p>倒着遍历：<mark><code>arr.forr + 回车键</code> </mark></p></li><li><p>如：<code>100.fori + 回车键</code>，表示循环100次</p></li></ol></li><li><p>代码编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>    listLearn(arr);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listLearn</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        System.out.println(arr[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-条件循环"><a href="#2-条件循环" class="headerlink" title="2. 条件循环"></a>2. 条件循环</h3><ol><li>for格式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化语句;条件判断语句;条件控制语句)&#123;<br>    System.out.println(<span class="hljs-string">&quot;循环执行一直在打印内容&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>while格式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;循环执行一直在打印内容&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>do…while格式</li></ol><ul><li>基本不使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;循环执行一直在打印内容&quot;</span>);<br>&#125;<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h3 id="3-条件控制语句"><a href="#3-条件控制语句" class="headerlink" title="3. 条件控制语句"></a>3. 条件控制语句</h3><h4 id="1-break"><a href="#1-break" class="headerlink" title="1. break"></a>1. break</h4><ol><li>单层循环</li></ol><p><code>break</code>跳出并结束当前所在循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个包子&quot;</span>);<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-keyword">break</span>;  <span class="hljs-comment">//结束整个循环。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>双层循环 *</li></ol><p>循环方式：多层循环嵌套时，以<code>名字：循环名&#123;&#125;</code>的形式标注循环</p><p>跳出循环：以<mark><code>break 名字;</code>的形式跳出指定循环</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentSystem</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        loop:<span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;1:添加学生&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;2:退出&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入您的选择：&quot;</span>);<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">choose</span> <span class="hljs-operator">=</span> sc.next();<br>            <br>            <span class="hljs-keyword">switch</span> (choose) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span> -&gt; addStudent(list);<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span> -&gt; &#123;<br>                    System.out.println(<span class="hljs-string">&quot;退出&quot;</span>);<br>                    <span class="hljs-keyword">break</span> loop;<br>                &#125;<br>                <span class="hljs-keyword">default</span> -&gt; System.out.println(<span class="hljs-string">&quot;没有这个选项&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-continue"><a href="#2-continue" class="headerlink" title="2. continue"></a>2. continue</h4><p>结束当前所在的循环，继续执行下次循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-comment">//跳过本次循环（本次循环中，下面的代码就不执行了），继续执行下次循环。</span><br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个包子&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-return"><a href="#3-return" class="headerlink" title="3. return"></a>3. return</h4><ol><li>有返回值时：返回对应的返回值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">victory</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>...<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><mark>无返回值时：立即跳出并结束当前方法的执行</mark></li></ol><ul><li>条件查找时，可用此方法跳出查找，节约性能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test15</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        chu(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>);   <span class="hljs-comment">// 5</span><br>        chu(<span class="hljs-number">10</span>,<span class="hljs-number">0</span>);   <span class="hljs-comment">// </span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">chu</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">if</span> (b==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span>;  <span class="hljs-comment">// 跳出并结束当前方法的执行</span><br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a/b;<br>        System.out.println(c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-递归"><a href="#4-递归" class="headerlink" title="4. 递归"></a>4. 递归</h4><ul><li>递归：A方法调用A方法，就是自己调用自己</li><li>注：<mark>轻易不要使用递归，非常占用内存，且可以通过其他循环方式替代</mark></li></ul><p>例：<code>计算输入数字的阶乘</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(f(<span class="hljs-number">3</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-keyword">if</span> (n==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 递归</span><br>            <span class="hljs-keyword">return</span> n*f(n-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="5-方法定义和调用"><a href="#5-方法定义和调用" class="headerlink" title="5. 方法定义和调用"></a>5. 方法定义和调用</h2><h3 id="1-形参和实参"><a href="#1-形参和实参" class="headerlink" title="1. 形参和实参"></a>1. 形参和实参</h3><ol><li>形参：全称形式参数，是指方法定义中的参数</li><li>实参：全称实际参数，方法调用中的参数</li></ol><h3 id="2-不带返回值的方法"><a href="#2-不带返回值的方法" class="headerlink" title="2. 不带返回值的方法"></a>2. 不带返回值的方法</h3><ul><li>方法由<code>public static </code><mark><code>void</code></mark>进行修饰</li><li>方法函数：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>&#123;  <span class="hljs-comment">// 形参</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num1 + num2;<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>主函数：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);  <span class="hljs-comment">// 实参</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-带返回值的方法"><a href="#3-带返回值的方法" class="headerlink" title="3. 带返回值的方法"></a>3. 带返回值的方法</h3><ul><li>方法由<code>public static </code><mark><code>返回值类型</code></mark>进行修饰</li><li>方法函数：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>&#123;  <span class="hljs-comment">// 形参</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num1 + num2;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>主函数：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);  <span class="hljs-comment">// 实参</span><br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-方法重载"><a href="#4-方法重载" class="headerlink" title="4. 方法重载"></a>4. 方法重载</h3><ol><li>介绍</li></ol><ul><li>一个类中，只要一些方法的<mark>名称相同，形参列表不同</mark>，那么他们就是方法重载（修饰符，返回值类型是否一样都无所谓）</li><li>形参列表不同指的是：形参的个数、类型、顺序不同，不关心形参的名称</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test15</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        test();    <span class="hljs-comment">// test1</span><br>        test(<span class="hljs-number">2</span>);   <span class="hljs-comment">// test22</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;test1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;test2&quot;</span> + a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>适用场景</li></ol><ul><li>开发中经常需要处理一类业务，提供多种解决方案，此时使用方法重载来设计是很专业的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test15</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        fire();<br>        fire(<span class="hljs-string">&quot;米国&quot;</span>,<span class="hljs-number">999</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span>&#123; <br>        fire(<span class="hljs-string">&quot;岛国&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">(String country)</span>&#123;<br>        fire(country, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">(String country,<span class="hljs-type">int</span> number)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;发射了&quot;</span>+number+<span class="hljs-string">&quot;枚武器给&quot;</span>+country);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-多返回值"><a href="#5-多返回值" class="headerlink" title="5. 多返回值"></a>5. 多返回值</h3><p>在Java中，方法不能直接返回多个值，但你可以通过以下几种方式实现类似的效果：</p><ol><li><strong>使用自定义类</strong>：创建一个包含多个字段的类，并返回该类的实例。</li><li><strong>使用数组或集合</strong>：将多个值放入数组或集合中返回。</li><li>**使用<code>Map</code>**：将多个值放入一个<code>Map</code>中返回。</li></ol><h4 id="1-使用自定义类："><a href="#1-使用自定义类：" class="headerlink" title="1.使用自定义类："></a>1.使用自定义类：</h4><ol><li>首先，创建一个包含两个字段的类，例如<code>DaysGapAndEndOfMonth</code>：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DaysGapAndEndOfMonth</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer daysGap;<br>    <span class="hljs-keyword">private</span> LocalDate endOfMonth;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DaysGapAndEndOfMonth</span><span class="hljs-params">(Integer daysGap, LocalDate endOfMonth)</span> &#123;<br>        <span class="hljs-built_in">this</span>.daysGap = daysGap;<br>        <span class="hljs-built_in">this</span>.endOfMonth = endOfMonth;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getDaysGap</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> daysGap;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> LocalDate <span class="hljs-title function_">getEndOfMonth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> endOfMonth;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>修改方法以返回自定义类(<code>DaysGapAndEndOfMonth</code>)的实例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DaysGapAndEndOfMonth <span class="hljs-title function_">gapDayToEndOfMonth</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-comment">// 获取当前日期</span><br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> LocalDate.now();<br>    System.out.println(<span class="hljs-string">&quot;当前的日期是: &quot;</span> + today);<br><br>    <span class="hljs-comment">// 获取当前年月</span><br>    <span class="hljs-type">YearMonth</span> <span class="hljs-variable">currentYearMonth</span> <span class="hljs-operator">=</span> YearMonth.of(today.getYear(), today.getMonth());<br><br>    <span class="hljs-comment">// 获取本月的最后一天</span><br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">endOfMonth</span> <span class="hljs-operator">=</span> currentYearMonth.atEndOfMonth();<br>    System.out.println(<span class="hljs-string">&quot;本月月底的日期是: &quot;</span> + endOfMonth);<br><br>    <span class="hljs-comment">// 计算从今天到本月底的相隔时间</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">daysGap</span> <span class="hljs-operator">=</span> Math.toIntExact(ChronoUnit.DAYS.between(today, endOfMonth));<br>    System.out.println(<span class="hljs-string">&quot;从当前至本月月底还有 &quot;</span> + daysGap + <span class="hljs-string">&quot;天&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaysGapAndEndOfMonth</span>(daysGap, endOfMonth);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>调用该方法并获取返回的值：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">DaysGapAndEndOfMonth</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> gapDayToEndOfMonth();<br>    System.out.println(<span class="hljs-string">&quot;从当前至本月月底还有 &quot;</span> + result.getDaysGap() + <span class="hljs-string">&quot;天&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;本月月底的日期是: &quot;</span> + result.getEndOfMonth());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-使用Map"><a href="#2-使用Map" class="headerlink" title="2.使用Map *"></a>2.使用Map *</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>m.put(xx, xx);<br></code></pre></td></tr></table></figure><hr><h2 id="6-格式转换"><a href="#6-格式转换" class="headerlink" title="6. 格式转换"></a>6. 格式转换</h2><h3 id="1-列表转整型"><a href="#1-列表转整型" class="headerlink" title="1. 列表转整型"></a>1. 列表转整型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr_list = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr_list.length; i++) &#123;<br>    number = number*<span class="hljs-number">10</span> + arr_list[i];<br><br>System.out.println(number);<br></code></pre></td></tr></table></figure><h3 id="2-整型转列表"><a href="#2-整型转列表" class="headerlink" title="2. 整型转列表"></a>2. 整型转列表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.计算出数组的长度</span><br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">12345</span>;<br><span class="hljs-comment">//定义一个变量临时记录number的值，就是为了第三步的时候再次使用</span><br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> number;<br><span class="hljs-comment">//定义一个变量进行统计</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(number != <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-comment">//每一次循环就去掉右边的一个数字</span><br>    number = number / <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//去掉一位计数器就自增一次。</span><br>    count++;<br>&#125;<br><span class="hljs-comment">//2.定义数组</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[count];<br><span class="hljs-comment">//3.把整数上的每一位都添加到数组当中</span><br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> arr.length -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(temp != <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//12345</span><br>    <span class="hljs-comment">//获取temp里面的每一位数组</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> temp % <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//再去掉右边的那位数字</span><br>    temp = temp / <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//把当前获取到的个位添加到数组当中</span><br>    arr[index] = ge;<br>    index--;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);    <span class="hljs-comment">// 1  2  3 4 5</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-字符串转正数"><a href="#3-字符串转正数" class="headerlink" title="3. 字符串转正数"></a>3. 字符串转正数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(str);<br></code></pre></td></tr></table></figure><h3 id="4-Char和String"><a href="#4-Char和String" class="headerlink" title="4.Char和String"></a>4.<code>Char</code>和<code>String</code></h3><ol><li>相同点</li></ol><ul><li><code>Char</code>和<code>String</code>都是用来表示字符串的数据类型</li></ul><ol start="2"><li>不同点</li></ol><ul><li><code>char</code>是一个基本数据类型，它能存储一个字符，用单引号括起来，例如’a’；char类型的变量可以直接进行比较</li><li><code>String</code>是一个类，它可以存储多个字符，用双引号括起来，例如”hello”；String类型的变量需要用<code>equals()</code>方法进行比较</li></ul><hr><h2 id="7-面向对象"><a href="#7-面向对象" class="headerlink" title="7. 面向对象 *"></a>7. 面向对象 *</h2><p>对象本质来说是一种特殊的数据结构，相当于一张表，记录了数据和方法</p><p>class也就是类，也称为对象的设计图，或者对象的模版</p><h3 id="1-类的定义"><a href="#1-类的定义" class="headerlink" title="1. 类的定义"></a>1. 类的定义</h3><ol><li>定义类：<code>public class 对象名&#123; &#125;</code></li><li>编写类的成员变量：<code>数据类型 成员变量;</code></li><li>编写类的成员方法：<mark><code>public viod 方法名()&#123; &#125;</code></mark></li></ol><ul><li>注：<mark>成员方法中不要带<code>static</code></mark></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><span class="hljs-comment">// 1. 定义类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-comment">//2. 编写成员变量（代表属性，一般是名词）</span><br>    String brand;<br>    <span class="hljs-type">int</span> price;<br><br>    <span class="hljs-comment">//3. 编写成员方法（代表行为，一般是动词）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;用&quot;</span> + brand + <span class="hljs-string">&quot;打电话&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getIntPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intPrice</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> + price;<br>        System.out.println(<span class="hljs-string">&quot;售价约为&quot;</span> + intPrice + <span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-对象的使用"><a href="#2-对象的使用" class="headerlink" title="2. 对象的使用"></a>2. 对象的使用</h3><ol><li><p>创建对象：<code>类名 对象名 = new 类名();</code></p></li><li><p>使用对象</p><ol><li>使用成员变量：<code>对象名.变量名;</code></li><li>使用成员方法：<code>对象名.方法名();</code></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testPhone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br><br>        <span class="hljs-comment">//使用成员变量</span><br>        System.out.println(p.brand);  <span class="hljs-comment">// null</span><br>        System.out.println(p.price);  <span class="hljs-comment">// 0</span><br><br>        p.brand = <span class="hljs-string">&quot;小米&quot;</span>;<br>        p.price = <span class="hljs-number">2999</span>;<br><br>        System.out.println(p.brand);  <span class="hljs-comment">// 小米</span><br>        System.out.println(p.price);  <span class="hljs-comment">// 2999</span><br><br>        <span class="hljs-comment">//使用成员方法</span><br>        p.call();                     <span class="hljs-comment">// 用小米打电话</span><br>        p.getIntPrice();              <span class="hljs-comment">// 售价约为3000元</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-this关键字"><a href="#3-this关键字" class="headerlink" title="3. this关键字"></a>3. this关键字</h3><ul><li>主要作用：<mark>区分局部变量和成员变量的重名问题</mark></li></ul><ol><li>当方法的形参和成员变量同名时，<code>this.score</code>是<code>double score</code>的值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printPass</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.score &gt; score)&#123;<br>            System.out.println(<span class="hljs-string">&quot;成员分数大于标准&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;成员分数小于标准&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>当方法的形参和成员变量不同名时，无需使用<code>this</code>方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printPass</span><span class="hljs-params">(<span class="hljs-type">double</span> score1)</span> &#123;<br>        <span class="hljs-keyword">if</span>(score &gt; score1)&#123;<br>            System.out.println(<span class="hljs-string">&quot;成员分数大于标准&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;成员分数小于标准&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-构造器"><a href="#4-构造器" class="headerlink" title="4. 构造器 *"></a>4. 构造器 *</h3><ol><li>构造器样式</li></ol><ul><li><mark>方法的名字和类的名字相同时，此方法就是构造器</mark></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-comment">/** 构造器 **/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>构造器的特点：创建对象时，对象会去调用构造器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br></code></pre></td></tr></table></figure><ol start="3"><li>常见应用场景</li></ol><p><mark>创建对象时，同时完成对对象成员变量（属性）的初始化赋值</mark></p><ol start="4"><li>示例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test01;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testStudent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">100</span>);<br>        System.out.println(s1.name);   <span class="hljs-comment">// 张三</span><br>        System.out.println(s1.score);  <span class="hljs-comment">// 100</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test01;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    String name;<br>    <span class="hljs-type">double</span> score;<br>    <br>    <span class="hljs-comment">// 无参构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;<br>        ...<br>    &#125;<br>    <span class="hljs-comment">// 有参构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> score)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>注意事项</li></ol><ul><li>类在设计时，如果不写构造器，java是会为类自动生成一个无参构造器的</li><li>一旦定义了有参构造器，java就不会帮我们的类自动生成无参构造器了，此时就需要我们自己手写一个无参构造器了</li></ul><h3 id="5-封装-private"><a href="#5-封装-private" class="headerlink" title="5. 封装 - private *"></a>5. 封装 - private *</h3><ul><li>定义：用类设计对象处理某一个事物的数据时，应该把要处理的数据，<mark>以及处理这些数据的方法</mark>，全设计到一个对象中去</li><li>设计规范：合理隐藏（private），合理暴漏（public）</li></ul><ol><li><mark>私有化成员变量 - private</mark></li></ol><ul><li><p>好处：<mark>可以对传入的不合理的数据进行判断</mark></p></li><li><p>使用方法：被private修饰的成员，只能在本类进行访问，如果需要被其他类使用，<mark>需进行<code>get()、set()</code>操作</mark></p><ol><li><p><code>set变量名(参数)</code>方法，设置成员变量的值</p></li><li><p><code>get变量名()</code>方法，获取成员变量的值</p></li></ol></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test01;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-keyword">if</span>(score&gt;=<span class="hljs-number">0</span> &amp;&amp; score&lt;=<span class="hljs-number">100</span>)&#123;<br>            <span class="hljs-built_in">this</span>.score = score;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入的数据有误&quot;</span>);   <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test01;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testStudent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        s1.setScore(<span class="hljs-number">90.5</span>);<br>        System.out.println(s1.getScore());     <span class="hljs-comment">// 90.5</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li>公有成员变量</li></ol><ul><li>无需<code>get()、set()</code>操作</li><li>在测试类中可以直接调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test01;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> score;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>s1.score = <span class="hljs-number">85</span>;<br></code></pre></td></tr></table></figure><h3 id="6-实体类-javabean"><a href="#6-实体类-javabean" class="headerlink" title="6. 实体类 javabean"></a>6. 实体类 javabean</h3><ol><li><p>定义：</p><ol><li>这个类中的<mark>成员变量都要私有</mark>，并且要<mark>对外提供相应的<code>getXXX，setXXX</code>方法</mark></li><li>类中必须要有<mark>一个公共的无参构造器</mark></li></ol></li><li><p>应用场景：实体类只负责数据存取，而对数据的处理交给其他类来完成，以实现数据和数据业务处理相分离</p></li><li><p>示例代码</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test01;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">// 私有化成员变量</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-comment">// 无参构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">// 有参构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br>    <span class="hljs-comment">// 提供get，set方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Login&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, password = &quot;</span> + password + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test01;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testStudent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 添加对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zhangchen&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>        System.out.println(s1.getName()+<span class="hljs-string">&quot;-&quot;</span>+s1.getPassword());  <span class="hljs-comment">// zhangchen-123</span><br><br>        <span class="hljs-comment">// 内容修改</span><br>        s1.setName(<span class="hljs-string">&quot;小蓝&quot;</span>);<br>        s1.setPassword(<span class="hljs-string">&quot;321&quot;</span>);<br>        System.out.println(s1.getName()+<span class="hljs-string">&quot;-&quot;</span>+s1.getPassword());  <span class="hljs-comment">// 小蓝-321</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>快捷方式：安装ptg插件，快速的生成javabean文件</li></ol><div style="text-align:center;gap:5px">    <img src="/img/java_pic/9.jpg" alt="图片描述" style="zoom:25%;"></div><h3 id="7-练习"><a href="#7-练习" class="headerlink" title="7. 练习"></a>7. 练习</h3><p>1 .登陆后台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">//1.私有化全部的成员变量</span><br>    <span class="hljs-comment">//2.空参构造</span><br>    <span class="hljs-comment">//3.带全部参数的构造</span><br>    <span class="hljs-comment">//4.针对于每一个私有化的成员变量都要提供其对应的get和set方法</span><br><br>    <span class="hljs-keyword">private</span> String username;<span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> gender;<span class="hljs-comment">//性别</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<span class="hljs-comment">//年龄</span><br><br>    <span class="hljs-comment">//空参构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">//带全部参数的构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String username,<span class="hljs-type">char</span> gender, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//get和set</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> username;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<span class="hljs-built_in">this</span>.username = username;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> gender;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(<span class="hljs-type">char</span> gender)</span> &#123;<span class="hljs-built_in">this</span>.gender = gender;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> age;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<span class="hljs-built_in">this</span>.age = age;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;System.out.println(username + <span class="hljs-string">&quot;在吃饭&quot;</span>);&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//利用空参构造创建对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-comment">//如果利用空参创建对象，还想赋值只能用set方法赋值</span><br>        u1.setUsername(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        u1.setGender(<span class="hljs-string">&#x27;男&#x27;</span>);<br>        u1.setAge(<span class="hljs-number">23</span>);<br>        <span class="hljs-comment">//获取属性的值并打印</span><br>        System.out.println(u1.getUsername() + <span class="hljs-string">&quot;, &quot;</span> + u1.getGender() + <span class="hljs-string">&quot;, &quot;</span> + u1.getAge());<br>        u1.eat();<br><br>        System.out.println(<span class="hljs-string">&quot;=============================&quot;</span>);<br><br>        <span class="hljs-comment">//简单的办法</span><br>        <span class="hljs-comment">//利用带全部参数的构造来创建对象</span><br>        <span class="hljs-comment">//快捷键:ctrl + p</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">24</span>);<br>        System.out.println(u2.getUsername() + <span class="hljs-string">&quot;, &quot;</span> + u2.getGender() + <span class="hljs-string">&quot;, &quot;</span> + u2.getAge());<br>        u2.eat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="8-字符串"><a href="#8-字符串" class="headerlink" title="8. 字符串"></a><font color=#1E90FF>8. 字符串</font></h2><h3 id="1-String"><a href="#1-String" class="headerlink" title="1. String"></a>1. <code>String</code></h3><h4 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h4><ul><li>字符串的内容和位数在创建后不能被更改，一般改变的都是返回值</li><li><mark>只能用双引号用于表示字符串常量</mark>，不能用单引号</li></ul><h4 id="2-用法"><a href="#2-用法" class="headerlink" title="2. 用法"></a>2. 用法</h4><h5 id="1-创建对象-String"><a href="#1-创建对象-String" class="headerlink" title="1. 创建对象 String"></a>1. 创建对象 <code>String</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 赋值的方式创建字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>System.out.println(s1);      <span class="hljs-comment">// abc</span><br><br><span class="hljs-comment">// 创建一个空白字符串，不含有任何内容</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br>System.out.println(s2);      <span class="hljs-comment">// </span><br><br><span class="hljs-comment">// 根据字符数组的内容，创建字符串对象</span><br><span class="hljs-type">char</span>[] chs = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chs);<br>System.out.println(s3);     <span class="hljs-comment">// abc</span><br><br><span class="hljs-comment">// 根据字节数组的内容，创建字符串对象</span><br><span class="hljs-type">byte</span>[] bys = &#123;<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bys);<br>System.out.println(s4);     <span class="hljs-comment">// abc</span><br></code></pre></td></tr></table></figure><h5 id="2-长度-length"><a href="#2-长度-length" class="headerlink" title="2. 长度.length()"></a>2. 长度<code>.length()</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑马Java&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> s.length();<br>System.out.println(i1);    <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><h5 id="3-索引与遍历-charAt"><a href="#3-索引与遍历-charAt" class="headerlink" title="3. 索引与遍历 .charAt() *"></a>3. 索引与遍历 <mark><code>.charAt()</code></mark> *</h5><ol><li>字符串的索引</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑马Java&quot;</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(<span class="hljs-number">1</span>);<br>System.out.println(c);     <span class="hljs-comment">// 马</span><br></code></pre></td></tr></table></figure><ol start="2"><li>字符串的遍历</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑马Java&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> s.charAt(i);<br>    System.out.print(ch);   <span class="hljs-comment">// 黑马Java</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-内容相同判断-equals"><a href="#4-内容相同判断-equals" class="headerlink" title="4. 内容相同判断 .equals()"></a>4. 内容相同判断 <code>.equals()</code></h5><ol><li>内容完全一样</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Java&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Java&quot;</span>);<br>System.out.println(s1.equals(s2));   <span class="hljs-comment">// true</span><br><span class="hljs-comment">// == 比较的是地址值</span><br>System.out.println(s1 == s2);        <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><ol start="2"><li>忽略大小写，内容完全一样</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Java&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;JAVA&quot;</span>);<br>System.out.println(s3.equalsIgnoreCase(s4));    <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h5 id="5-包含内容-contains"><a href="#5-包含内容-contains" class="headerlink" title="5. 包含内容 .contains() *"></a>5. 包含内容<mark> <code>.contains()</code> </mark>*</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s7</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java是全世界最好的语言&quot;</span>;<br>System.out.println(s7.contains(<span class="hljs-string">&quot;最好的&quot;</span>));    <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h5 id="6-开头字符-startsWith"><a href="#6-开头字符-startsWith" class="headerlink" title="6. 开头字符 .startsWith()"></a>6. 开头字符<code> .startsWith()</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s8</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java是全世界最好的语言&quot;</span>;<br>System.out.println(s8.startsWith(<span class="hljs-string">&quot;Java&quot;</span>));   <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h5 id="7-截取-substring"><a href="#7-截取-substring" class="headerlink" title="7. 截取 .substring()"></a>7. 截取 <code>.substring()</code></h5><ul><li>截取字符串内容：包前不包后</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;012345678&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> s5.substring(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>);<br>System.out.println(rs);       <span class="hljs-comment">// 01234  从2索引截取到4索引</span><br><span class="hljs-type">String</span> <span class="hljs-variable">rs1</span> <span class="hljs-operator">=</span> s5.substring(<span class="hljs-number">5</span>);<br>System.out.println(rs1);      <span class="hljs-comment">// 5678   从5索引截取到最后</span><br></code></pre></td></tr></table></figure><h5 id="8-分割-split"><a href="#8-分割-split" class="headerlink" title="8. 分割 .split()"></a>8. 分割 <code>.split()</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s9</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java,python,go&quot;</span>;<br>String[] names = s9.split(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; names.length; i++) &#123;<br>    System.out.println(names[i]);           <span class="hljs-comment">// Java python go</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="9-替换-replace"><a href="#9-替换-replace" class="headerlink" title="9. 替换.replace()"></a>9. 替换<code>.replace()</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java是全世界最好的语言&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> s6.replace(<span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-string">&quot;**&quot;</span>);<br>System.out.println(st);      <span class="hljs-comment">// **是全世界最好的语言</span><br></code></pre></td></tr></table></figure><h4 id="3-练习"><a href="#3-练习" class="headerlink" title="3. 练习"></a>3. 练习</h4><ul><li><p>需求：</p><ol><li>定义一个方法，实现字符串反转</li><li>键盘录入一个字符串，调用该方法后，在控制台输出结果</li><li>例如，键盘录入abc，输出结果cba</li></ol></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zc.demo1;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入一个数字&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> exchangeStr(s1);<br>        System.out.println(<span class="hljs-string">&quot;输出结果为：&quot;</span> + s3);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">exchangeStr</span><span class="hljs-params">(String s1)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> s1.length() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            result = result + s1.charAt(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-StringBuilder"><a href="#2-StringBuilder" class="headerlink" title="2. StringBuilder"></a><font color=#1E90FF>2. <code>StringBuilder</code></font></h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a><font color=#1E90FF>1. 介绍</font></h4><ul><li><code>StringBuilder</code>相当于一个容器，里面装的字符串是可变的，就是用来操作字符串的</li><li><code>StringBuilder</code>与<code>String</code>的使用情况：<ul><li>对于字符串频繁的拼接、修改等操作时，使用<code>StringBuilder</code>效率更高</li><li>如果操作字符串较少，以及定义字符串，使用<code>String</code></li></ul></li></ul><h4 id="2-用法-1"><a href="#2-用法-1" class="headerlink" title="2. 用法"></a><font color=#1E90FF>2. 用法</font></h4><h5 id="1-添加数据-append"><a href="#1-添加数据-append" class="headerlink" title="1. 添加数据 .append()"></a><font color=#1E90FF>1. 添加数据 <code>.append()</code></font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>change = sb.append(<span class="hljs-number">123</span>).append(<span class="hljs-literal">true</span>);      <span class="hljs-comment">// abc123true</span><br></code></pre></td></tr></table></figure><h5 id="2-内容反转-reverse"><a href="#2-内容反转-reverse" class="headerlink" title="2. 内容反转 .reverse()"></a><font color=#1E90FF>2. 内容反转 <code>.reverse()</code></font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>change = sb.reverse();      <span class="hljs-comment">// cba</span><br></code></pre></td></tr></table></figure><h5 id="3-长度-length"><a href="#3-长度-length" class="headerlink" title="3. 长度 .length()"></a><font color=#1E90FF>3. 长度 <code>.length()</code></font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> sb.length();      <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h5 id="4-变为String类型-toString"><a href="#4-变为String类型-toString" class="headerlink" title="4. 变为String类型.toString()"></a><font color=#1E90FF>4. 变为String类型<code>.toString()</code></font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sb.toString();      <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h4 id="3-练习-1"><a href="#3-练习-1" class="headerlink" title="3. 练习"></a><font color=#1E90FF>3. 练习</font></h4><ul><li>设计一个方法，用于返回任意整型数组的内容，要求返回的数组内容格式如下：<code>[11,22,33]</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    System.out.println(printArr(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>&#125;));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    sb.append(<span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>        <span class="hljs-comment">//i 索引 arr[i] 的元素</span><br>        <span class="hljs-keyword">if</span>(i == arr.length - <span class="hljs-number">1</span>)&#123;<br>            sb.append(arr[i]);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            sb.append(arr[i]).append(<span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>    &#125;<br>    sb.append(<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-comment">// 将StringBuilder类型转为String类型</span><br>    <span class="hljs-keyword">return</span> sb.toString<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-StringBuffer"><a href="#3-StringBuffer" class="headerlink" title="3. StringBuffer"></a><font color=#1E90FF>3. <code>StringBuffer</code></font></h3><ul><li><code>StringBuffer</code>与<code>StringBuilder</code>的用法是一模一样的</li><li>但<code>StringBuilder</code>的线程是不安全的，<code>StringBuffer</code>的线程是安全的</li></ul><h3 id="4-StringJoiner"><a href="#4-StringJoiner" class="headerlink" title="4. StringJoiner"></a><font color=#1E90FF>4. <code>StringJoiner</code></font></h3><ul><li><code>StringJoiner</code>和<code>StringBuilder</code>一样，也可以看成是一个容器，创建之后里面的内容是可变的</li><li>好处：不仅能提高字符串的操作效率，并且在有些场景下使用它操作字符串，代码会更简洁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建一个对象，并指定中间的间隔符号</span><br><span class="hljs-type">StringJoiner</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;---&quot;</span>);<br><span class="hljs-comment">//2.添加元素</span><br>sj.add(<span class="hljs-string">&quot;aaa&quot;</span>).add(<span class="hljs-string">&quot;bbb&quot;</span>).add(<span class="hljs-string">&quot;ccc&quot;</span>);<br><span class="hljs-comment">//3.打印结果</span><br>System.out.println(sj);<span class="hljs-comment">//aaa---bbb---ccc</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建对象</span><br><span class="hljs-type">StringJoiner</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;, &quot;</span>,<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>);<br><span class="hljs-comment">//2.添加元素</span><br>sj.add(<span class="hljs-string">&quot;aaa&quot;</span>).add(<span class="hljs-string">&quot;bbb&quot;</span>).add(<span class="hljs-string">&quot;ccc&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> sj.length();<br>System.out.println(len);<span class="hljs-comment">//15</span><br><span class="hljs-comment">//3.打印</span><br>System.out.println(sj);<span class="hljs-comment">//[aaa, bbb, ccc]</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sj.toString();<br>System.out.println(str);<span class="hljs-comment">//[aaa, bbb, ccc]</span><br></code></pre></td></tr></table></figure><h3 id="5-上述方式异同点"><a href="#5-上述方式异同点" class="headerlink" title="5. 上述方式异同点"></a>5. 上述方式异同点</h3><ol><li>String是不可变的字符串，一旦创建就不能被修改。StringBuilder和StringJoiner是可变的字符串，可以进行修改操作。</li><li>在进行字符串拼接时，使用String每次拼接都会创建一个新的String对象，效率较低。而使用StringBuilder和StringJoiner则可以避免这种情况，可以直接在原有的对象上进行修改，不需要创建新的对象。</li><li>StringJoiner相比StringBuilder更加方便，因为它提供了一些方法来处理分隔符和前缀后缀等问题，使得代码更加简洁易懂。</li></ol><hr><h2 id="9-集合"><a href="#9-集合" class="headerlink" title="9. 集合"></a><font color=#1E90FF>9. 集合</font></h2><h3 id="1-特点-1"><a href="#1-特点-1" class="headerlink" title="1. 特点"></a><font color=#1E90FF>1. 特点</font></h3><ul><li><p>对比数组</p><ol><li><p>长度可变</p></li><li><p>添加数据的时候不需要考虑索引，默认将数据添加到末尾</p></li></ol></li></ul><h3 id="2-用法-2"><a href="#2-用法-2" class="headerlink" title="2. 用法"></a><font color=#1E90FF>2. 用法</font></h3><h4 id="1-创建对象-ArrayList"><a href="#1-创建对象-ArrayList" class="headerlink" title="1. 创建对象 ArrayList "></a><font color=#1E90FF>1. 创建对象 <code>ArrayList</code> </font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>));<br>System.out.println(list1);       <span class="hljs-comment">// [aaa, bbb, aaa]</span><br></code></pre></td></tr></table></figure><h4 id="2-添加-add"><a href="#2-添加-add" class="headerlink" title="2. 添加 .add()"></a><font color=#1E90FF>2. 添加 <code>.add()</code></font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">// 默认添加到集合的最后面</span><br>list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>System.out.println(list);    <span class="hljs-comment">// [aaa, bbb]</span><br><br><span class="hljs-comment">// 往集合中的某个索引位置处添加数据</span><br>list.add(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;ccc&quot;</span>);<br>System.out.println(list);    <span class="hljs-comment">// [aaa, ccc, bbb]</span><br></code></pre></td></tr></table></figure><h4 id="3-索引-get"><a href="#3-索引-get" class="headerlink" title="3. 索引 .get()"></a><font color=#1E90FF>3. 索引 <code>.get()</code></font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">li</span> <span class="hljs-operator">=</span> list1.get(<span class="hljs-number">1</span>);<br>System.out.println(li);     <span class="hljs-comment">// bbb</span><br></code></pre></td></tr></table></figure><h4 id="4-长度-size"><a href="#4-长度-size" class="headerlink" title="4. 长度 .size()"></a><font color=#1E90FF>4. 长度 <code>.size()</code></font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>));<br><span class="hljs-type">int</span> <span class="hljs-variable">li</span> <span class="hljs-operator">=</span> list1.size();<br>System.out.println(li);    <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h4 id="5-删除-remove"><a href="#5-删除-remove" class="headerlink" title="5. 删除 .remove()"></a><font color=#1E90FF>5. 删除 <code>.remove()</code></font></h4><ol><li>根据索引索，删除元素</li></ol><ul><li>每次删除一个元素后，索引-1</li><li>从集合后面遍历然后删除，可以避免漏掉元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">rrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">li</span> <span class="hljs-operator">=</span> list1.remove(<span class="hljs-number">0</span>);<br>System.out.println(li);         <span class="hljs-comment">// aaa</span><br>System.out.println(list1);      <span class="hljs-comment">// [bbb, aaa]</span><br></code></pre></td></tr></table></figure><ol start="2"><li>根据元素，直接删除元素</li></ol><ul><li>删除同名元素时，默认删除的是第一个</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>));<br><span class="hljs-type">boolean</span> <span class="hljs-variable">li</span> <span class="hljs-operator">=</span> list1.remove(<span class="hljs-string">&quot;aaa&quot;</span>);<br>System.out.println(li);         <span class="hljs-comment">// true</span><br>System.out.println(list1);      <span class="hljs-comment">// [bbb, aaa]</span><br></code></pre></td></tr></table></figure><h4 id="6-修改-set"><a href="#6-修改-set" class="headerlink" title="6. 修改 .set()"></a><font color=#1E90FF>6. 修改 <code>.set()</code></font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">li</span> <span class="hljs-operator">=</span> list1.set(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;ccc&quot;</span>);<br>System.out.println(li);         <span class="hljs-comment">// aaa</span><br>System.out.println(list1);      <span class="hljs-comment">// [ccc, bbb, aaa]</span><br></code></pre></td></tr></table></figure><h3 id="3-练习-2"><a href="#3-练习-2" class="headerlink" title="3. 练习"></a><font color=#1E90FF>3. 练习</font></h3><h4 id="1-案例1"><a href="#1-案例1" class="headerlink" title="1. 案例1"></a>1. 案例1</h4><ul><li><p>需求： </p><ol><li><p>main方法中定义一个集合，存入三个用户对象。 用户属性为：id，username，password    </p></li><li><p>定义一个方法，根据id查找对应的学生信息。如果存在，返回索引；如果不存在，返回false</p></li></ol></li><li><p>示例代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayListDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.创建集合对象</span><br>        ArrayList&lt;User&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//2.创建用户对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;heima001&quot;</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;heima002&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;1234&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;heima003&quot;</span>, <span class="hljs-string">&quot;wangwu&quot;</span>, <span class="hljs-string">&quot;1234qwer&quot;</span>);<br><br>        <span class="hljs-comment">//3.把用户对象添加到集合当中</span><br>        list.add(u1);<br>        list.add(u2);<br>        list.add(u3);<br><br>        <span class="hljs-comment">//4.调用方法，通过id获取对应的索引</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> getIndex(list, <span class="hljs-string">&quot;heima001&quot;</span>);<br>        System.out.println(index);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(ArrayList&lt;User&gt; list, String id)</span> &#123;<br>        <span class="hljs-comment">//遍历集合得到每一个元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-comment">//i 索引  list.get(i); 元素</span><br>            <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> list.get(i);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> u.getId();<br>            <span class="hljs-keyword">if</span>(uid.equals(uid))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;     <span class="hljs-comment">//return 关键字：作用就是结束方法。</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//只有当集合里面所有的元素全部比较完毕才能认为是不存在的。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-案例2"><a href="#2-案例2" class="headerlink" title="2. 案例2"></a>2. 案例2</h4><ul><li>需求</li></ul><p>​1. 创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayListDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.创建集合对象，用来存储数据</span><br>        ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//2.创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">16</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">15</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-number">18</span>);<br><br>        <span class="hljs-comment">//3.把学生对象添加到集合中</span><br>        list.add(s1);<br>        list.add(s2);<br>        list.add(s3);<br><br>        <span class="hljs-comment">//4.遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-comment">//i 依次表示集合中的每一个索引</span><br>            <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> list.get(i);<br>            System.out.println(stu.getName() + <span class="hljs-string">&quot;, &quot;</span> + stu.getAge());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-案例3"><a href="#3-案例3" class="headerlink" title="3. 案例3"></a>3. 案例3</h4><ul><li>需求<ol><li>后台使用ArryList集合表示购物车，存储这些商品名</li><li>遍历集合中的每个数据，只要这个<mark>数据包含了“枸杞”</mark>则删除它</li><li>输出集合看是否已经成功删除了全部枸杞数据</li></ol></li><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;Java&quot;</span>,<span class="hljs-string">&quot;哈尔滨枸杞&quot;</span>,<span class="hljs-string">&quot;黑枸杞&quot;</span>,<span class="hljs-string">&quot;枸杞子&quot;</span>,<span class="hljs-string">&quot;大枸杞&quot;</span>,<span class="hljs-string">&quot;蓝莓&quot;</span>,<span class="hljs-string">&quot;宁夏枸杞&quot;</span>,<span class="hljs-string">&quot;西瓜&quot;</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list1.size(); i++) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ele</span> <span class="hljs-operator">=</span> list1.get(i);<br>        <span class="hljs-comment">// 判断字符串中是否含有关键词</span><br>        <span class="hljs-keyword">if</span> (ele.contains(<span class="hljs-string">&quot;枸杞&quot;</span>))&#123;<br>            list1.remove(ele);<br>            <span class="hljs-comment">// 当删除元素后，后方元素向前补齐，需保持索引</span><br>            i--;<br>        &#125;<br>    &#125;<br>    System.out.println(list1);<br></code></pre></td></tr></table></figure><ul><li>注：<ol><li>当正向遍历，并删除元素时，后方元素向前补齐。需对索引进行停留操作</li><li>当逆向遍历，并删除元素时，可直接删除</li></ol></li></ul><h3 id="4-集合进阶"><a href="#4-集合进阶" class="headerlink" title="4. 集合进阶"></a><font color=#1E90FF>4. 集合进阶</font></h3><h4 id="1-集合的体系结构"><a href="#1-集合的体系结构" class="headerlink" title="1.集合的体系结构"></a>1.集合的体系结构</h4><ol><li>数组和集合的区别</li></ol><ul><li><p>相同点</p><ul><li>都是容器,可以存储多个数据</li></ul></li><li><p>不同点</p><ul><li><p>数组的长度是不可变的,集合的长度是可变的</p></li><li><p>数组可以存基本数据类型和引用数据类型</p></li><li><p>集合只能存引用数据类型,如果要存基本数据类型,需要存对应的包装类</p></li></ul></li></ul><ol start="2"><li>集合的分类</li></ol><div style="text-align:center;gap:5px">    <img src="/img/java_pic/36.png" alt="图片描述" style="zoom:55%;"></div><ul><li>List系列集合特点：存、取元素是有序的，可重复，有索引</li><li>Set系列集合特点：存、取元素是无序的，不重复，无索引</li></ul><hr><h2 id="10-学生管理系统"><a href="#10-学生管理系统" class="headerlink" title="10. 学生管理系统"></a>10. 学生管理系统</h2><h3 id="1-学生类-javabean定义"><a href="#1-学生类-javabean定义" class="headerlink" title="1. 学生类 javabean定义"></a>1. 学生类 javabean定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.studentsystem;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String address;<br><br> <span class="hljs-comment">//下面是空参，有参，get和set方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-初始界面"><a href="#2-初始界面" class="headerlink" title="2. 初始界面"></a>2. 初始界面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    loop:<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;-----------------欢迎来到黑马学生管理系统-------------------&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;1:添加学生&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;2:删除学生&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;3:修改学生&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;4:查询学生&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;5:退出&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;请输入您的选择：&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">choose</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-keyword">switch</span> (choose) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span> -&gt; addStudent(list);<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span> -&gt; deleteStudent(list);<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span> -&gt; updateStudent(list);<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span> -&gt; queryStudent(list);<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;5&quot;</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;退出&quot;</span>);<br>                <span class="hljs-comment">//break loop;</span><br>                System.exit(<span class="hljs-number">0</span>);<span class="hljs-comment">//停止虚拟机运行</span><br>            &#125;<br>            <span class="hljs-keyword">default</span> -&gt; System.out.println(<span class="hljs-string">&quot;没有这个选项&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-查询学生"><a href="#3-查询学生" class="headerlink" title="3. 查询学生"></a>3. 查询学生</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询学生</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br>    <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">0</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;当前无学生信息，请添加后再查询&quot;</span>);<br>        <span class="hljs-comment">//结束方法</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//打印表头信息</span><br>    System.out.println(<span class="hljs-string">&quot;id\t\t姓名\t年龄\t家庭住址&quot;</span>);<br>    <span class="hljs-comment">//当代码执行到这里，表示集合中是有数据的</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> list.get(i);<br>        System.out.println(stu.getId() + <span class="hljs-string">&quot;\t&quot;</span> + stu.getName() + <span class="hljs-string">&quot;\t&quot;</span> + stu.getAge() + <span class="hljs-string">&quot;\t&quot;</span> + stu.getAddress());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-添加学生-先set到对象，再add到集合"><a href="#4-添加学生-先set到对象，再add到集合" class="headerlink" title="4. 添加学生 - 先set到对象，再add到集合"></a>4. 添加学生 - 先set到对象，再add到集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加学生</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br>    <span class="hljs-comment">//利用空参构造先创建学生对象</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br>    <span class="hljs-comment">//键盘录入</span><br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>    <span class="hljs-comment">//将数据传给学生对象</span><br>    System.out.println(<span class="hljs-string">&quot;请输入学生的姓名&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>    s.setName(name);<br><br>    System.out.println(<span class="hljs-string">&quot;请输入学生的年龄&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> sc.nextInt();<br>    s.setAge(age);<br><br>    System.out.println(<span class="hljs-string">&quot;请输入学生的家庭住址&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> sc.next();<br>    s.setAddress(address);<br><br>    <span class="hljs-comment">//把学生对象添加到集合当中</span><br>    list.add(s);<br><br>    <span class="hljs-comment">//提示一下用户</span><br>    System.out.println(<span class="hljs-string">&quot;学生信息添加成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-删除学生"><a href="#5-删除学生" class="headerlink" title="5. 删除学生"></a>5. 删除学生</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除学生</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    System.out.println(<span class="hljs-string">&quot;请输入要删除的id&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> sc.next();<br>    <span class="hljs-comment">//查询id在集合中的索引</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> getIndex(list, id);<br>    <span class="hljs-comment">//对index进行判断</span><br>    <span class="hljs-comment">//如果-1，就表示不存在，结束方法，回到初始菜单</span><br>    <span class="hljs-keyword">if</span>(index &gt;= <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//如果大于等于0的，表示存在，直接删除</span><br>        list.remove(index);<br>        System.out.println(<span class="hljs-string">&quot;id为：&quot;</span> + id + <span class="hljs-string">&quot;的学生删除成功&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;id不存在，删除失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-修改学生"><a href="#6-修改学生" class="headerlink" title="6. 修改学生"></a>6. 修改学生</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改学生</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    System.out.println(<span class="hljs-string">&quot;请输入要修改学生的id&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> sc.next();<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> getIndex(list, id);<br><br>    <span class="hljs-keyword">if</span>(index == -<span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;要修改的id&quot;</span> + id + <span class="hljs-string">&quot;不存在，请重新输入&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//当代码执行到这里，表示什么？表示当前id是存在的。</span><br>    <span class="hljs-comment">//获取要修改的学生对象</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> list.get(index);<br><br>    <span class="hljs-comment">//输入其他的信息并修改</span><br>    System.out.println(<span class="hljs-string">&quot;请输入要修改的学生姓名&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">newName</span> <span class="hljs-operator">=</span> sc.next();<br>    stu.setName(newName);<br><br>    System.out.println(<span class="hljs-string">&quot;请输入要修改的学生年龄&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">newAge</span> <span class="hljs-operator">=</span> sc.nextInt();<br>    stu.setAge(newAge);<br><br>    System.out.println(<span class="hljs-string">&quot;请输入要修改的学生家庭住址&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">newAddress</span> <span class="hljs-operator">=</span> sc.next();<br>    stu.setAddress(newAddress);<br><br>    System.out.println(<span class="hljs-string">&quot;学生信息修改成功&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h1 id="二、Java基础加强"><a href="#二、Java基础加强" class="headerlink" title="二、Java基础加强"></a><font color=#1E90FF>二、Java基础加强</font></h1><h2 id="1-静态-static"><a href="#1-静态-static" class="headerlink" title="1. 静态 static"></a><font color=#1E90FF>1. 静态 static</font></h2><h3 id="1-静态变量-与-实例变量"><a href="#1-静态变量-与-实例变量" class="headerlink" title="1. 静态变量 与 实例变量"></a><font color=#1E90FF>1. 静态变量 与 实例变量</font></h3><ol><li><p>介绍：如果某个数据只需要一份，且希望能够对外共享，可以用<code>public static</code>修饰，定义为静态变量。该变量在内存中只有一份，会被类和类的全部对象共享</p></li><li><p>成员变量按照有无static修饰，分为两种</p><ul><li><p>类变量（静态变量）：<mark>有static修饰，属于类，在内存中只有一份，会被类和类的全部对象共享</mark></p></li><li><p>实例变量（对象的变量）：<mark>无static修饰，属于每个对象的，只能用对象访问</mark></p></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-comment">// 类变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String name;<br><br><span class="hljs-comment">// 实例变量（对象的变量）</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>静态变量：静态变量被全局共享</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 类名.类变量   （推荐）</span><br>Student.name = <span class="hljs-string">&quot;袁华&quot;</span>;<br>    <br><span class="hljs-comment">// 对象.类变量   （不推荐）</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>s1.name = <span class="hljs-string">&quot;马冬梅&quot;</span>；<br>    <br><span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>s1.name = <span class="hljs-string">&quot;秋雅&quot;</span>；<br><br><span class="hljs-comment">// 类变量被全局共享</span><br>System.out.println(s1.name);       <span class="hljs-comment">// 秋雅</span><br>System.out.println(Student.name);  <span class="hljs-comment">// 秋雅</span><br></code></pre></td></tr></table></figure><ol start="5"><li>实例变量：每个对象有自己的变量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对象.类变量</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>s1.age = <span class="hljs-number">23</span>；<br>    <br><span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>s1.age = <span class="hljs-number">35</span>；<br><br>System.out.println(s1.age);       <span class="hljs-comment">// 23</span><br><span class="hljs-comment">// System.out.println(Student.age);  // 报错</span><br></code></pre></td></tr></table></figure><ol start="6"><li>练习</li></ol><ul><li><p>需求：系统启动后，要求用户类可以记住自己创建了多少个用户对象</p></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> number;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// User.number++;</span><br>        <span class="hljs-comment">// 在同一个类中，访问自己类的类变量，才可以省略类名不写</span><br>        number++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-静态方法-与-实例方法"><a href="#3-静态方法-与-实例方法" class="headerlink" title="3. 静态方法 与 实例方法 *"></a><font color=#1E90FF>3. 静态方法 与 实例方法 *</font></h3><ol><li>静态方法<ol><li>有static修饰的方法</li><li><mark>无需创建对象</mark>，可以直接通过<mark>类名.类方法</mark>进行调用</li><li>常用于<mark>方法类</mark>中使用</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printHello</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);  <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Student.printHello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>实例方法<ol><li>无static修饰的方法</li><li>需要<mark>新建对象</mark>，然后通过<mark>对象.实例方法</mark>进行调用</li><li>常用于<mark>javabean</mark>中使用</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printHello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>      s1.printHello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><p>工具类</p><ol><li><p>基本组成</p><ul><li><p><mark>私有化构造方法</mark>：为了不让外界创建他的对象</p><ul><li>方法定义为静态：方便调用</li></ul></li></ul></li><li><p>练习</p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrUtil</span>&#123;<br>    <span class="hljs-comment">// 私有化成员方法 </span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">ArrUtil</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>        <br>    <span class="hljs-comment">// 定义为静态方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getMax</span><span class="hljs-params">(...)</span>&#123;...&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getMin</span><span class="hljs-params">(...)</span>&#123;...&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">// 测试类</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> ArrUtil.getMax();<br>    <span class="hljs-type">double</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> ArrUtil.getMin();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-静态代码块-较少使用"><a href="#3-静态代码块-较少使用" class="headerlink" title="3. 静态代码块 - 较少使用"></a><font color=#1E90FF>3. 静态代码块 - 较少使用</font></h3><ol><li><p>静态代码块</p><ol><li><p>格式：<code>static&#123;&#125;</code></p></li><li><p>特点：类加载时自动执行，由于类只会加载一次，所以静态代码块也只会执行一次</p></li><li><p>作用：完成类的初始化，例如：对类变量的初始化赋值</p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br><span class="hljs-keyword">static</span> String schoolName;<br><br><span class="hljs-comment">// 静态代码块</span><br><span class="hljs-keyword">static</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;静态代码块执行了&quot;</span>);  <br>schoolName = <span class="hljs-string">&quot;黑马&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(Student.number);  <br>System.out.println(Student.schoolName);  <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 80</span><br><span class="hljs-comment">// 静态代码块执行了</span><br><span class="hljs-comment">// 黑马</span><br></code></pre></td></tr></table></figure><ol start="2"><li>代码块<ol><li>格式：<code>&#123;&#125;</code></li><li>特点：每次创建对象时，执行实例代码块，并在构造器前执行</li><li>作用：和构造器一样，都是用来完成对象的初始化，例如对实例变量进行初始化赋值</li></ol></li></ol><h3 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a><font color=#1E90FF>4. 其他</font></h3><ol><li>javabean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">// 变量</span><br>    <span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-comment">// 方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-comment">// 变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String name;<br><br><span class="hljs-comment">// 方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printHello</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);  <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="2-继承-extends"><a href="#2-继承-extends" class="headerlink" title="2. 继承 extends"></a><font color=#1E90FF>2. 继承 <code>extends</code></font></h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a><font color=#1E90FF>1. 概述</font></h3><ol><li><p>含义：继承描述的是事物之间的所属关系。如兔子属于食草动物，食草动物属于动物。父类更通用，子类更具体。通过<code>extends</code>关键字，可以让一个类和另一个类建立起父子关系</p></li><li><p>特点：</p><ol><li>子类能继承父类的非私有成员（成员变量、成员方法）</li><li><mark>支持单继承、多层继承，但是不支持多继承</mark>（不可以一个孩子有多个爸爸）</li><li>java中所有的类都直接或间接继承于Object类</li></ol></li><li><p>继承后对象的创建：子类的对象是由子类、父类共同完成的</p></li></ol><h3 id="2-继承的格式"><a href="#2-继承的格式" class="headerlink" title="2. 继承的格式"></a><font color=#1E90FF>2. 继承的格式</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> class 父类 &#123;<br>...<br>&#125;<br><br><span class="hljs-keyword">public</span> class 子类 extends 父类 &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Java只支持单继承，不支持多继承。一个类只能有一个父类，不可以有多个父类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;&#125;<br><span class="hljs-comment">// class C2 extends A, B &#123;&#125; // error</span><br></code></pre></td></tr></table></figure><ul><li>一个类可以有多个子类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C2</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">A</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>可以多层继承。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">C1</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="3-继承-同名成员变量-super-this"><a href="#3-继承-同名成员变量-super-this" class="headerlink" title="3. 继承 - 同名成员变量  super &amp; this"></a><font color=#1E90FF>3. 继承 - 同名成员变量  super &amp; this</font></h3><ul><li><p>概念：当子、父类中出现了同名的成员变量时，在子类中访问父类中非私有成员变量，需要使用<code>super</code> 关键字，修饰父类成员变量</p></li><li><p>注意事项：</p><ul><li><code>super.成员变量</code>：父类的成员对象</li><li><code>this.成员变量</code>：当前类（子类）的成员变量</li><li><code>成员变量</code>：就近原则，离着最近的成员变量</li><li>除了同名成员变量之外，对于同名方法的访问，也可以使用super方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span> &#123;<br><span class="hljs-comment">// Fu中的成员变量。</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span> &#123;<br><span class="hljs-comment">// Zi中的成员变量</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 访问方法中的num,就近</span><br>        System.out.println(<span class="hljs-string">&quot;method num=&quot;</span> + num);    <span class="hljs-comment">// 1</span><br>        <span class="hljs-comment">// 访问子类中的num</span><br>        System.out.println(<span class="hljs-string">&quot;Zi num=&quot;</span> + <span class="hljs-built_in">this</span>.num);   <span class="hljs-comment">// 6</span><br>        <span class="hljs-comment">// 访问父类中的num</span><br>        System.out.println(<span class="hljs-string">&quot;Fu num=&quot;</span> + <span class="hljs-built_in">super</span>.num);  <span class="hljs-comment">// 5</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-方法重写-Override"><a href="#4-方法重写-Override" class="headerlink" title="4. 方法重写 @Override"></a><font color=#1E90FF>4. 方法重写 <code>@Override</code></font></h3><ul><li><p>概念：<mark>当子类觉得父类中的某个方法不好用，或者无法满足自己的需求时</mark>，子类可以重写一个方法名称、参数列表一样的方法，去覆盖父类的这个方法</p></li><li><p>注意：</p><ul><li>重写后，方法的访问，遵循就原则</li><li>子类方法覆盖父类方法，必须要保证权限大于等于父类权限。</li><li><mark>对于重写后的方法上，需要在方法上方添加<code>@Override</code></mark>，校验子类重写时语法是否正确</li></ul></li><li><p>案例</p><ul><li>需求：定义了一个动物类代，然后定义一个猫类，猫可能认为父类<code>cry()</code>方法不能满足自己的需求</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>  &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;动物跑的很快！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;动物都可以叫~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我们一起学猫叫，喵喵喵！喵的非常好听！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// 创建子类对象</span><br>      <span class="hljs-type">Cat</span> <span class="hljs-variable">ddm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>()；<br>        <span class="hljs-comment">// 调用父类继承而来的方法</span><br>        ddm.run();        <span class="hljs-comment">// 动物跑的很快！</span><br>      <span class="hljs-comment">// 调用子类重写的方法</span><br>      ddm.cry();       <span class="hljs-comment">// 我们一起学猫叫，喵喵喵！喵的非常好听！</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-成员变量和成员方法案例"><a href="#5-成员变量和成员方法案例" class="headerlink" title="5. 成员变量和成员方法案例"></a><font color=#1E90FF>5. 成员变量和成员方法案例</font></h3><div style="text-align:center;gap:5px">    <img src="/img/java_pic/15.png" alt="图片描述" style="zoom:40%;"></div>* 父类：`Dog类`<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;狗在吃狗粮&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drink</span><span class="hljs-params">()</span><br>       System.out.println(<span class="hljs-string">&quot;狗在喝水&quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lookHome</span><span class="hljs-params">()</span><br>       System.out.println(<span class="hljs-string">&quot;狗在看家&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>子类：<code>Husky类、SharPei类、ChineseDog类</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Husky</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Dog</span> &#123;<br>   <br>   <span class="hljs-comment">// 哈士奇有一个额外的方法拆家</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">breakHome</span><span class="hljs-params">()</span><br>       System.out.println(<span class="hljs-string">&quot;哈士奇又在拆家了&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SharPei</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Dog</span> &#123;<br>   <br>   <span class="hljs-comment">// 因为沙皮狗吃的狗粮和骨头</span><br>   <span class="hljs-comment">// 父类中的方法不能满足我们的需求了，所以需要进行重写</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span><br>       <span class="hljs-built_in">super</span>.eat();    <span class="hljs-comment">// 吃狗粮</span><br>       System.out.println(<span class="hljs-string">&quot;狗啃骨头&quot;</span>);  <span class="hljs-comment">// 啃骨头</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChineseDog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Dog</span> &#123;<br>   <br>   <span class="hljs-comment">// 父类中的方法不能满足我们的需求了，所以需要进行重写</span><br>   <span class="hljs-comment">// 而且中华田园犬完全用不到父类中的代码的，所以不需要通过super进行调用</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span><br>       System.out.println(<span class="hljs-string">&quot;吃剩饭&quot;</span>);   <span class="hljs-comment">// 吃剩饭</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>测试类：</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DogTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">// 创建对象并调用方法</span><br>       <br>       <span class="hljs-comment">// 1. 构建哈士奇的对象</span><br>       <span class="hljs-type">Husky</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Husky</span>();<br>       h.eat();  <span class="hljs-comment">//狗在吃狗粮</span><br>       h.drink();  <span class="hljs-comment">//狗在喝水</span><br>       h.lookHome();  <span class="hljs-comment">//狗在看家</span><br>       h.breakHome();  <span class="hljs-comment">//哈士奇又在拆家了</span><br>       <br>       <span class="hljs-comment">//2. 构建中华田园犬的对象</span><br>       <span class="hljs-type">Husky</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Husky</span>();<br>       h.eat();  <span class="hljs-comment">//吃剩饭</span><br>       h.drink();  <span class="hljs-comment">//狗在喝水</span><br>       h.lookHome();  <span class="hljs-comment">//狗在看家</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-构造方法"><a href="#6-构造方法" class="headerlink" title="6. 构造方法"></a><font color=#1E90FF>6. 构造方法</font></h3><ol><li><p>访问特点</p><ul><li><p>对于同名方法，如果想要使用父类的方法，可使用super关键词</p></li><li><p>子类中所有的构造方法默认先访问父类中的无参构造，再执行自己</p></li></ul></li><li><p>子类继承父类的原理</p><ul><li>子类构造方法的第一行语句默认都是：<code>super()</code>，不写也存在，且必须在第一行</li></ul></li><li><p>示例：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类无参&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">// getter/setter省略</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//super(); // 调用父类无参,默认就存在，可以不写，必须再第一行</span><br>        System.out.println(<span class="hljs-string">&quot;子类无参&quot;</span>);<br>    &#125;<br>    <br>     <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name,age)    <br>        System.out.println(<span class="hljs-string">&quot;子类有参&quot;</span>);<br>     &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(<span class="hljs-string">&quot;----------&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">23</span>);<br>        System.out.println(s.name + <span class="hljs-string">&quot;,&quot;</span> + s.age);<br>    &#125;<br>&#125;<br><br>输出结果：<br>父类无参<br>子类无参<br>----------<br>父类无参<br>子类有参<br>zhangsan, <span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><hr><h2 id="3-多态"><a href="#3-多态" class="headerlink" title="3. 多态"></a><font color=#1E90FF>3. 多态</font></h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1. 介绍"></a><font color=#1E90FF>1. 介绍</font></h3><ul><li><p>多态： 在继承 &#x2F; 实现情况下，表现为对象多态、行为多态</p></li><li><p>前提</p><ol><li><p>有继承或者实现关系  <code>extends</code></p></li><li><p>方法的重写 <code>@Override</code></p></li><li><p><mark>父类引用指向子类对象，<code>父类 变量名 = new 子类();</code></mark></p></li></ol></li></ul><h3 id="2-多态的实现"><a href="#2-多态的实现" class="headerlink" title="2. 多态的实现"></a><font color=#1E90FF>2. 多态的实现</font></h3><ul><li><mark>编译看左边，运行看右边</mark></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">People</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>p1.run();     <span class="hljs-comment">// 老师跑的气喘吁吁</span><br>        <br>        <span class="hljs-type">people</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        p2.run();     <span class="hljs-comment">// 学生跑的飞快</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;人可以跑&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;老师跑的气喘吁吁&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;学生跑的飞快&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-多态的好处"><a href="#3-多态的好处" class="headerlink" title="3. 多态的好处"></a><font color=#1E90FF>3. 多态的好处</font></h3><ol><li><p>在多态形势下，右边对象是解耦合的，<mark>便于扩展、维护和更换</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">People</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();  <span class="hljs-comment">// 当Student这个对象不好用时，业务中可以直接换为Teacher对象，无需更改主程序代码</span><br>p1.run();<br></code></pre></td></tr></table></figure></li><li><p>定义方法时，使用父类类型的形参，<mark>可以接收一切子类对象，扩展性更强、更便利</mark></p></li></ol><h3 id="4-多态的弊端"><a href="#4-多态的弊端" class="headerlink" title="4. 多态的弊端"></a><font color=#1E90FF>4. 多态的弊端</font></h3><p>多态编译阶段是看左边父类类型的，如果子类有些独有的功能，此时<mark>多态的写法就无法访问子类独有功能了</mark></p><p>下一节将使用强制类型转换，解决此问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>｛<br>        System.out.println(<span class="hljs-string">&quot;动物吃东西！&quot;</span>)<br>    ｝<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123; <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;吃鱼&quot;</span>);  <br>    &#125;  <br>   <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">catchMouse</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;抓老鼠&quot;</span>);  <br>    &#125;  <br>&#125;  <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        a.eat();   <span class="hljs-comment">// 吃鱼</span><br>        a.catchMouse();<span class="hljs-comment">//编译报错，编译看左边，Animal没有这个方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-解决办法-类型转换"><a href="#5-解决办法-类型转换" class="headerlink" title="5. 解决办法 - 类型转换"></a><font color=#1E90FF>5. 解决办法 - 类型转换</font></h3><ol><li><p>使用目的：为了解决使用多态后，无法使用子类特有功能的问题</p></li><li><p>自动转换：子类向父类转换，这个过程是默认的（向上转型）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">父类类型  变量名 = <span class="hljs-keyword">new</span> 子类类型();<br><span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br></code></pre></td></tr></table></figure><ol start="3"><li>强制转换：父类向子类转换，这个过程是需要手写强制的（向下转换）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">子类类型 变量名 = (子类类型) 父类变量名;<br><span class="hljs-keyword">if</span>(a <span class="hljs-keyword">instanceof</span> Cat)&#123;<br>    <span class="hljs-type">Cat</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (Cat) a;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>注意事项</li></ol><ul><li>存在继承 &#x2F; 实现关系就可以在编译阶段进行强制类型转换，编译阶段不会报错</li><li>运行时，如果发现对象的真实类型与强转后的类型不同，就会报类型异常（ClassCastException）的错误出来</li></ul><ol start="5"><li>示例 *</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用多态，可以直接调用父类和子类都存在的方法</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        a.eat();     <span class="hljs-comment">// 吃鱼   // Cat中的eat方法</span><br><br>        <span class="hljs-comment">// 对于子类的涂油方法，需要对多态后的类型进行强制转换</span><br>        <span class="hljs-keyword">if</span>(a <span class="hljs-keyword">instanceof</span> Cat)&#123;<br>            <span class="hljs-type">Cat</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (Cat) a;<br>            c.catchMouse();   <span class="hljs-comment">// 抓老鼠   // Cat中的catchMouse方法</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;动物吃东西&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃鱼&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">catchMouse</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;抓老鼠&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="4-最终修饰方法-final"><a href="#4-最终修饰方法-final" class="headerlink" title="4. 最终修饰方法 final"></a><font color=#1E90FF>4. 最终修饰方法 final</font></h2><ol><li><p>final关键字是最终的意思，可以修饰（类、方法、变量），<mark>防止被修改或重写</mark></p><ul><li><p>修饰类：该类被称为最终类，特点是不能被继承了</p></li><li><p>修饰方法：该方法被称为最终方法，特点是不能被重写了</p></li><li><p>修饰变量：该变量只能被赋值一次</p></li></ul></li><li><p>修饰类</p></li></ol><ul><li>一般用于工具类，不想被继承</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span> &#123;<br>&#125;<br><span class="hljs-comment">// class Zi extends Fu &#123;&#125; // 报错,不能继承final的类</span><br></code></pre></td></tr></table></figure><ol start="3"><li>修饰方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu2</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show1</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Fu2 show1&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu2</span> &#123;<br><span class="hljs-comment">//@Override</span><br><span class="hljs-comment">//public void show1() &#123;</span><br><span class="hljs-comment">//System.out.println(&quot;Zi2 show1&quot;);</span><br><span class="hljs-comment">//&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>修饰变量</li></ol><ul><li>基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 声明变量，直接赋值，使用final修饰</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// 第二次赋值</span><br>        <span class="hljs-comment">// b = 20; // 报错,不可重新赋值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>常量</li></ol><ul><li>使用了<code>static final</code>修饰的成员变量就被称为常量</li><li>作用：通常用于记录系统的配置信息</li><li>常量名的命名规范：使用大写英文单词，多个单词使用下划线连接起来</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Constant</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SCHOOL_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑龙江大学&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="5-抽象类-abstract"><a href="#5-抽象类-abstract" class="headerlink" title="5. 抽象类 abstract"></a><font color=#1E90FF>5. <mark>抽象类 abstract</mark></font></h2><ol><li>什么是抽象类</li></ol><ul><li>被abstract修饰。修饰类，这个类就是抽象类；修饰方法，这个方法就是抽象方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 <span class="hljs-keyword">abstract</span> class 类名字 &#123; <br>修饰符 <span class="hljs-keyword">abstract</span> 返回值类型 方法名 (参数列表)； <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-comment">// 抽象方法：必须abstract修饰，只有方法签名，不能有方法体！</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>；<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>抽象类的意义：为了被子类继承，否则抽象类将毫无意义。抽象类可以强制让子类，一定要按照规定的格式进行重写。<mark>继承抽象类的子类必须重写父类所有的抽象方法</mark>。否则，该子类也必须声明为抽象类</p></li><li><p>抽象类的注意事项、特点</p><ul><li>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</li><li>类该有的成员（成员变量、方法、构造器）抽象类都可以有</li><li>抽象类最主要的特点：抽象类不能创建对象，仅作为一种特殊的父类，让子类继承并实现</li><li>一个类继承抽象类，必须重写抽象类的全部抽象方法，否则这个类也必须定义成抽象类</li></ul></li><li><p>抽象类的好处：<mark>父类可以规定每个子类必须重写的方法</mark>，这样是为了更好的支持多态</p></li><li><p>示例</p></li></ol><ul><li><p>需求：</p><ul><li>某宠物游戏，需要管理猫、狗的数据</li><li>猫的数据有：名字；行为是：喵喵喵的叫~</li><li>狗的数据有：名字；行为是：汪汪汪的叫~</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> testfolder.Test02;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot;汪汪汪的叫~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> testfolder.Test02;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot;喵喵喵的叫~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="6"><li>抽象类的应用<ol><li>定义一个抽象类</li><li>在里面定义2个方法<ol><li>一个是模版方法：用<code>final</code>进行修饰，把相同代码放进去</li><li>一个是抽象方法：具体实现交给子类完成</li></ol></li></ol></li></ol><hr><h2 id="6-接口-interface"><a href="#6-接口-interface" class="headerlink" title="6. 接口 interface"></a><font color=#1E90FF>6. 接口 <code>interface</code></font></h2><p><font color=#1E90FF>1. 认识接口</font></p><ul><li>Java提供了一个关键字interface，用这个关键词我们可以定义出一个特殊的结构：接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> interface 接口名 &#123;<br><span class="hljs-comment">// 成员变量（常量）</span><br><span class="hljs-comment">// 成员方法（抽象方法）</span><br>&#125; <br></code></pre></td></tr></table></figure><ul><li>注：接口不能创建对象；接口是用来被<mark>实现（implements）</mark>的，实现接口的类称为<mark>实现类</mark></li><li><mark>一个类可以实现多个接口（接口可以理解成干爹）</mark>，实现类实现多个接口，必须重写完全部接口的全部抽象方法，否则实现类需要定义成抽象类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰类 class 实现类 implements 接口<span class="hljs-number">1</span>, 接口<span class="hljs-number">2</span>, 接口<span class="hljs-number">3</span>, ..&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>一个子类只能继承一个父类（父类可以理解成亲爹）</li></ul><p><font color=#1E90FF>2. 创建方法</font></p><div style="text-align:center;gap:5px">    <img src="/img/java_pic/21.png" alt="图片描述" style="zoom:35%;">    <img src="/img/java_pic/22.png" alt="图片描述" style="zoom:28%;">    <img src="/img/java_pic/23.png" alt="图片描述" style="zoom:37%;"></div><p><font color=#1E90FF>3. 接口成分的特点</font></p><ol><li><p>抽象方法：接口中的抽象方法，默认会自动加上public abstract修饰程，无需自己手写</p></li><li><p>常量：在接口中定义的成员变量默认会加上 public static final修饰。此时变量值就不可被修改，并且是静态化的变量可以直接用接口名访问，所以也叫常量。常量必须要给初始值</p></li><li><p>示例：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterF</span> &#123;<br>    <span class="hljs-comment">// 常量</span><br>    <span class="hljs-comment">// public static final int AGE = 12 ;</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">AGE</span>  <span class="hljs-operator">=</span> <span class="hljs-number">12</span>; <br>    <span class="hljs-type">String</span> <span class="hljs-variable">SCHOOL_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑马程序员&quot;</span>;<br>    <br>    <span class="hljs-comment">// 抽象方法</span><br>    <span class="hljs-comment">// public abstract void run();</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">// public abstract String getName();</span><br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">// public abstract int add(int a , int b);</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a , <span class="hljs-type">int</span> b)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color=#1E90FF>4. 类与接口的多实现 <code>implements</code> </font></p><ol><li><p>要求</p><ol><li><p>必须重写实现的全部接口中所有抽象方法</p></li><li><p>如果一个类实现了接口，但是没有重写完全部接口的全部抽象方法，这个类也必须定义成抽象类</p></li><li><p>一个类可以同时实现多个接口</p></li></ol></li><li><p>类与接口实现案例：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testA</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testB</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span>,B&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testA</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testB</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br>c.testA;<br>c.testB;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color=#1E90FF>5. 接口的好处</font></p><ol><li><p>解决类的单继承问题，通过接口，我们可以让一个类有一个亲爹的同时，还可以找多个干爹去扩展自己的功能</p></li><li><p>一个类可以实现多个接口，一个接口也可以被多个类实现。这样我们的程序就可以面向接口编程了，我们可以灵活切换各种业务实现</p></li><li><p>为什么我们要通过接口，也就是去找干爹，来扩展自己的功能？</p></li></ol><ul><li>因为通过接口去找干爹，别人通过implements的接口，就可以显性的知道你是谁，从而也就可以放心的把你当做谁来用了</li></ul><hr><h2 id="7-内部类"><a href="#7-内部类" class="headerlink" title="7. 内部类"></a><font color=#1E90FF>7. 内部类</font></h2><p><font color=#1E90FF>1. 概述</font></p><ul><li>如果一个类定义在另一个类的内部，这个类就是内部类</li><li>场景：当一个类的内部，包含一个完整的事物，且这个事物没有必要单独设计时，就可以把这个事物设计成内部类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123;<br><span class="hljs-comment">// 内部类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span>&#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>内部类的四种形式：成员内部类、静态内部类、<del>局部内部类</del>、<mark>匿名内部类</mark></li></ul><p><font color=#1E90FF>2. 成员内部类</font></p><ul><li>就是类的一个普通成员，类似普通的成员变量、成员方法</li></ul><ul><li>成员内部类样式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-comment">// 成员内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>调用方式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">外部类.内部类 变量 = <span class="hljs-keyword">new</span> 外部类().new 内部类();<br>Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">oi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br></code></pre></td></tr></table></figure><ul><li>示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建内部类对象。</span><br>        Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">oi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        oi.method();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-comment">// 成员内部类，属于外部类对象的。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;内部类中的方法被调用了&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>同名函数调用方法案例<ul><li>内部类访问外部类对象的格式是：<strong>外部类名.this</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Outer.<span class="hljs-type">inner</span> <span class="hljs-variable">oi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">inner</span>();<br>        oi.method();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<span class="hljs-comment">// 外部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><br>    <span class="hljs-comment">// 在成员位置定义一个类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">inner</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>            System.out.println(???);<span class="hljs-comment">// 10   答案：a</span><br>            System.out.println(???);<span class="hljs-comment">// 20答案：this.a</span><br>            System.out.println(???);<span class="hljs-comment">// 30答案：Outer.this.a</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color=#1E90FF>3. 静态内部类</font></p><ul><li>有static修饰的内部类，属于外部类自己持有</li><li>静态内部类样式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-comment">// 静态内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>调用方式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">外部类.内部类 变量 = <span class="hljs-keyword">new</span> 外部类.内部类();<br>Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">oi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>.Inner();<br></code></pre></td></tr></table></figure><ul><li><p>静态内部类中访问外部类成员的特点</p><ul><li>可以直接访问外部类的静态成员，不可以直接访问外部类的实例成员</li></ul></li><li><p>示例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 外部类：Outer01</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer01</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-type">String</span> <span class="hljs-variable">sc_name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑马程序&quot;</span>;<br>    <span class="hljs-comment">// 内部类: Inner01</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner01</span>&#123;<br>        <span class="hljs-comment">// 这里面的东西与类是完全一样的。</span><br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Inner01</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showName</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.name);<br>            <span class="hljs-comment">// 拓展:静态内部类可以直接访问外部类的静态成员。</span><br>            System.out.println(sc_name);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClassDemo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建静态内部类对象。</span><br>        <span class="hljs-comment">// 外部类.内部类  变量 = new  外部类.内部类构造器;</span><br>        Outer01.<span class="hljs-type">Inner01</span> <span class="hljs-variable">in</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer01</span>.Inner01(<span class="hljs-string">&quot;张三&quot;</span>);<br>        in.showName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="8-匿名内部类"><a href="#8-匿名内部类" class="headerlink" title="8. 匿名内部类 *"></a><font color=#1E90FF>8. 匿名内部类 *</font></h2><h3 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a><font color=#1E90FF>1. 概述</font></h3><ul><li>如果希望定义一个只要使用一次的类，就可考虑使用匿名内部类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 父类名或者接口名(参数值..)&#123;<br>    类体(一般是方法重写);<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 把这个匿名内部类编译成一个子类，然后立即创建一个子类对象出来</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类行为&quot;</span>);<br>    &#125;<br>&#125;;<br>a.cry();<br></code></pre></td></tr></table></figure><ul><li><p>注：匿名内部类必须<strong>继承一个父类</strong>或者<strong>实现一个父接口</strong></p></li><li><p>优势</p><ul><li>可以简化代码，不需要为这个类声明名字，更方便的创建出一个子类对象</li><li>匿名内部类通常作为一个参数传输给对方</li></ul></li></ul><h3 id="2-常规继承方式"><a href="#2-常规继承方式" class="headerlink" title="2. 常规继承方式"></a><font color=#1E90FF>2. 常规继承方式</font></h3><ul><li><p>需要下述四步，匿名内部类将四个方法合成一个</p><ol><li><p>定义子类</p></li><li><p>重写接口中的方法</p></li><li><p>创建子类对象</p></li><li><p>调用重写后的方法</p></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 3. 创建实现类对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-comment">// 4. 调用方法</span><br>        s.swimming();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 1. 定义接口的实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Swim</span> &#123;<br>    <span class="hljs-comment">// 2. 重写抽象方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swimming</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;狗刨式...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Swim</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swimming</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-使用方式"><a href="#4-使用方式" class="headerlink" title="4. 使用方式"></a><font color=#1E90FF>4. 使用方式</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Swim</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swimming</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 方法1</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Swim</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swimming</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;自由泳...&quot;</span>);<br>&#125;<br>&#125;.swimming();<br><br>        <span class="hljs-comment">// 方法2</span><br>        <span class="hljs-comment">// 1. 利用多态,走子类的重写方法</span><br>        <span class="hljs-type">Swim</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swim</span>() &#123;<br>            <span class="hljs-comment">// 2. 重写抽象方法</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swimming</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;蛙泳...&quot;</span>);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">// 3. 调用方法</span><br>        s2.swimming();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">自由泳...<br>蛙泳...<br></code></pre></td></tr></table></figure><h3 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5. 使用场景"></a><font color=#1E90FF>5. 使用场景</font></h3><p>我们不会主动创建匿名内部类，多数情况是调用的api是接口类型，需要匿名内部类</p><ol><li>适用于电脑端的监听器</li></ol><ul><li>常规样式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">btn.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span>&#123;<br>JOptionPane.showMessageDialog(win, <span class="hljs-string">&quot;登录&quot;</span>);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><code>lambda</code>表达式样式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">btn.addActionListener(e -&gt; JOptionPane.showMessageDialog(win, <span class="hljs-string">&quot;登录&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="9-枚举-enum"><a href="#9-枚举-enum" class="headerlink" title="9. 枚举 enum"></a><font color=#1E90FF>9. 枚举 enum</font></h2><h3 id="1-枚举的介绍"><a href="#1-枚举的介绍" class="headerlink" title="1. 枚举的介绍"></a><font color=#1E90FF>1. 枚举的介绍</font></h3><p><font color=#1E90FF>1. 认识枚举</font></p><ul><li>枚举的概述：枚举是一种特殊类</li><li>枚举类的格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 <span class="hljs-keyword">enum</span> 枚举类型&#123;<br>名称<span class="hljs-number">1</span>, 名称<span class="hljs-number">2</span>,...;<br>其他成员...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">A</span>&#123;<br>X, Y, Z;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意事项：<ul><li>枚举类中的第一行，只能写一些合法的标识符（名称），多个名称用逗号隔开</li><li>这些名称，本质是常量，每个常量都会记住枚举类的一个对象</li></ul></li></ul><p><font color=#1E90FF>2. 枚举类的特点</font></p><ul><li>枚举类的第一行只能罗列一些名称，这些名称都是常量，并且每个常量记住的都是枚举类的一个对象</li><li>枚举类的构造器都是私有的（写不写都是私有），因此枚举类对外不能创建对象</li><li>枚举都是最终类，不可以被继承</li><li>枚举类中，从第二行开始，可以定义类的其他各种成员</li><li>编译器为枚举类新增了几个方法，并且枚举类都是继承：java.lang.Enum，从enum类也会继承到一些方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">A</span>&#123;<br>X, Y, Z;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">compiled from <span class="hljs-string">&quot;A.java&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">java</span>.lang.Enum&lt;A&gt;&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">A</span> <span class="hljs-variable">X</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">A</span> <span class="hljs-variable">Y</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">A</span> <span class="hljs-variable">Z</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> A[] values();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> A <span class="hljs-title function_">valueOf</span><span class="hljs-params">(java.lang.string)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color=#1E90FF>3. 单例模式</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">C</span> &#123;<br>x;  <span class="hljs-comment">// 单例</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-枚举的作用"><a href="#2-枚举的作用" class="headerlink" title="2. 枚举的作用"></a><font color=#1E90FF>2. 枚举的作用</font></h3><ul><li>使用常量的方法，进行信息标注和分类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> testfolder.Test01;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        check(Contines.BOY);<br>        check(Contines.GIRL);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> sex)</span>&#123;<br>        <span class="hljs-keyword">switch</span> (sex)&#123;<br>            <span class="hljs-keyword">case</span> Contines.BOY:<br>                System.out.println(<span class="hljs-string">&quot;展示美女&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> Contines.GIRL:<br>                System.out.println(<span class="hljs-string">&quot;展示帅哥&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> testfolder.Test01;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Contines</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> BOY=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> GIRL=<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用枚举的方法，进行信息标注和分类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> testfolder.Test01;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        check(Contines.BOY);<br>        check(Contines.GIRL);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(Contines sex)</span>&#123;<br>        <span class="hljs-keyword">switch</span> (sex)&#123;<br>            <span class="hljs-keyword">case</span> BOY:<br>                System.out.println(<span class="hljs-string">&quot;展示美女&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> GIRL:<br>                System.out.println(<span class="hljs-string">&quot;展示帅哥&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> testfolder.Test01;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Contines</span> &#123;<br>    BOY, GIRL<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-泛型"><a href="#10-泛型" class="headerlink" title="10. 泛型 &lt;&gt;"></a><font color=#1E90FF>10. 泛型 <code>&lt;&gt;</code></font></h2><h3 id="1-认识泛型"><a href="#1-认识泛型" class="headerlink" title="1. 认识泛型"></a><font color=#1E90FF>1. 认识泛型</font></h3><ul><li>定义类、接口、方法时，同时声明了一个或者多个类型变量（如：<E>）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt;&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>作用：泛型提供了在编译阶段约束所能操作的数据类型，并自动进行检查的能力。这样可以避免强制类型转换，以及可能出现的异常</li><li>泛型的本质：把具体的数据类型作为参数传给类型变量</li></ul><h3 id="2-泛型类"><a href="#2-泛型类" class="headerlink" title="2. 泛型类"></a><font color=#1E90FF>2. 泛型类</font></h3><ul><li>手动创建泛型类的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 class 类名&lt;类型变量，类型变量，..&gt;&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&lt;E&gt;&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> testfolder.Test03;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        MyArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;java0&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ele</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">1</span>);<br>        System.out.println(ele);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> testfolder.Test03;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArrayList</span> &lt;E&gt;&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-泛型接口"><a href="#2-泛型接口" class="headerlink" title="2. 泛型接口"></a><font color=#1E90FF>2. 泛型接口</font></h3><ul><li>手动创建泛型接口的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 interface 接口名&lt;类型变量，类型变量，..&gt;&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&lt;E&gt;&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> testfolder.Test03;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span>&lt;Teacher&gt; &#123;<br>       <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Teacher teacher)</span>&#123;<br>            <br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> ArrayList&lt;Teacher&gt; <span class="hljs-title function_">getByName</span><span class="hljs-params">(String name)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> testfolder.Test03;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Data</span> &lt;T&gt;&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T, t)</span>;<br>    ArrayList&lt;T&gt; <span class="hljs-title function_">getByName</span><span class="hljs-params">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="三、常用API"><a href="#三、常用API" class="headerlink" title="三、常用API"></a><font color=#1E90FF>三、常用API</font></h1><h2 id="1-Object类"><a href="#1-Object类" class="headerlink" title="1. Object类"></a><font color=#1E90FF>1. <code>Object</code>类</font></h2><ul><li>所有类都默认继承&#96;&#96;</li></ul><table><thead><tr><th align="left">方法名</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td align="left"><code>public String toString()</code></td><td>返回对象的字符串表示形式</td><td><code>s1.toString().sout</code>等同于<code>s1.sout</code></td></tr><tr><td align="left"><code>public String equals(Object o)</code></br></td><td>和<code>==</code>功能相同，用来判断两个对象的内容和地址是否相等</td><td>通过重写<code> equals()</code>方法，使其仅判断对象的内容是否相等</td></tr><tr><td align="left"><code>protected Object clone()</code></td><td>对象克隆，获得相同内容的对象</td><td></td></tr></tbody></table><h3 id="1-toString"><a href="#1-toString" class="headerlink" title="1. toString()"></a><font color=#1E90FF>1. <code>toString()</code></font></h3><ul><li>直接调用<code>toString()</code>方法，返回的是地址值</li><li>通过创建<code>JavaBean</code>的快捷键，会同步创建<code>toString</code>方法，返回的是具体数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">// 省略自动生成的get、set方法</span><br>    <br>    <span class="hljs-comment">// 创建toString()方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zc&quot;</span>, <span class="hljs-number">18</span>);<br>        System.out.println(s1.toString());  <span class="hljs-comment">// Student&#123;name = zc, age = 18&#125;</span><br>        System.out.println(s1);             <span class="hljs-comment">// Student&#123;name = zc, age = 18&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-equals"><a href="#2-equals" class="headerlink" title="2. equals()"></a><font color=#1E90FF>2. <code>equals()</code></font></h3><ol><li>比较两个对象</li></ol><ul><li><code>equals()</code>和<code>==</code>方法，都会同时<mark>比较对象的内容和地址</mark></li><li>需要在javabean中<mark>重写<code>equals()</code>方法，使<code>equals()</code>仅比较对象的内容</mark></li><li>通过<code>eq</code>快捷键，重写<code>equals()</code>方法</li></ul><div style="text-align:center">    <img src="/img/java_pic/39.png" alt="图片描述" style="zoom:30%;"></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">// 省略自动生成的get、set方法</span><br>    <br>    <span class="hljs-comment">// 重写equals()方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>        <span class="hljs-keyword">return</span> age == student.age &amp;&amp; Objects.equals(name, student.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> testfolder.Test04;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zc&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zc&quot;</span>, <span class="hljs-number">18</span>);<br>        System.out.println(s2.equals(s1));   <span class="hljs-comment">// true</span><br>        System.out.println(s2 == s1);        <span class="hljs-comment">// false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>比较两个元素</li></ol><ul><li><code>s1.equals(s2)</code>：遇到空值会报错</li><li><code>Objects.equals(s1, s2)</code>：先做非空判断，再比较两个对象，更安全</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java&quot;</span>;<br>        <span class="hljs-comment">// System.out.println(s1.equals(s2));  // 报错</span><br>        <br>        <span class="hljs-comment">// 更安全，能更好的判断一些空值</span><br>        System.out.println(Objects.equals(s1, s2));  <span class="hljs-comment">// false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-clone"><a href="#3-clone" class="headerlink" title="3. clone()"></a><font color=#1E90FF>3. <code>clone()</code></font></h3><ul><li>通过<code>clone</code>快捷键，在javabean中<mark>重写<code>clone()</code>方法</mark></li><li>在类的题目中实现<code>Cloneable</code>方法，<code>Cloneable</code>方法是一个空方法，仅用于标记接口</li></ul><div style="text-align:center">    <img src="/img/java_pic/40.png" alt="图片描述" style="zoom:20%;">    <img src="/img/java_pic/41.png" alt="图片描述" style="zoom:30%;"></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">// 省略自动生成的get、set方法</span><br>    <br>    <span class="hljs-comment">// 重写clone方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zc&quot;</span>, <span class="hljs-number">18</span>);<br>        System.out.println(s1);      <span class="hljs-comment">// Student&#123;name = zc, age = 18&#125;</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> (Student) s1.clone();<br>        System.out.println(s2);      <span class="hljs-comment">// Student&#123;name = zc, age = 18&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-包装类"><a href="#2-包装类" class="headerlink" title="2. 包装类"></a><font color=#1E90FF>2. 包装类</font></h2><p><font color=#1E90FF>1. 包装类介绍</font></p><ul><li>包装类就是把基本类型的数据包装成对象</li><li>自动装箱：基本数据类型可以自动转换为包装类</li><li>自动拆箱：包装类型可以自动转换为基本数据类型</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Integer a <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-comment">;</span><br>int b <span class="hljs-operator">=</span> a<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>基本数据类型和包装类的转换</li></ul><table><thead><tr><th>基本数据类型</th><th>对应的包装类（引用数据类型）</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td><mark>int</mark></td><td><mark>Integer</mark></td></tr><tr><td>long</td><td>Long</td></tr><tr><td><mark>char</mark></td><td><mark>Character</mark></td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolen</td><td>Boolen</td></tr></tbody></table><p><font color=#1E90FF>2. 使用包装类的目的</font></p><ul><li>泛型和集合不支持基本数据类型，只能支持引用数据类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-number">12</span>); <span class="hljs-comment">// 自动装箱</span><br>list.add(<span class="hljs-number">13</span>); <span class="hljs-comment">//</span><br><span class="hljs-type">int</span> <span class="hljs-variable">re</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">1</span>); <span class="hljs-comment">// 自动拆箱   13</span><br></code></pre></td></tr></table></figure><ul><li>基本类型的数据转换为字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> a + <span class="hljs-string">&quot;&quot;</span>;<br>System.out,print(res + <span class="hljs-number">1</span>);   <span class="hljs-comment">// 231</span><br></code></pre></td></tr></table></figure><ul><li>字符串类型数值，转换为对应的基本类型 <code>value of</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">ageStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;29&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">ageInt</span> <span class="hljs-operator">=</span> Integer.valueOf(ageStr);<br>System.out,print(ageInt + <span class="hljs-number">1</span>);    <span class="hljs-comment">// 30</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">scoreStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;99.5&quot;</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> Double.valueOf(scoreStr);<br>System.out,print(ageInt + <span class="hljs-number">0.5</span>);    <span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><h2 id="3-Math类"><a href="#3-Math类" class="headerlink" title="3. Math类"></a><font color=#1E90FF>3. <code>Math</code>类</font></h2><table><thead><tr><th>方法</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td><code>Math.abs(2);</code><br><code>Math.abs(2);</code></td><td>获取参数绝对值</td><td>2<br>2</td></tr><tr><td><code>Math.ceil(23.45);</code><br><code>Math.ceil(-23.45);</code></td><td>向上取整</td><td>24.0<br>-23</td></tr><tr><td><code>Math.floor(23.45);</code><br><code>Math.floor(-23.45);</code></td><td>向下取整</td><td>23<br>-24</td></tr><tr><td><code>Math.round(23.45);</code><br><code>Math.round(23.55);</code></td><td>四舍五入</td><td>23<br>24</td></tr><tr><td><code>Math.max(23, 45);</code></td><td>取较大值</td><td>45</td></tr><tr><td><code>Math.min(12 , 34));</code></td><td>取较小值</td><td>12</td></tr><tr><td><code>Math.pow(2,3);</code></td><td>a的b次幂</td><td>8</td></tr><tr><td><code>Math.sqrt(16);</code></td><td>开平方根</td><td>4</td></tr><tr><td><code>Math.random();</code></td><td>返回[0.0,1.0)范围，double类型随机数</td><td>0.7322484131745958</td></tr></tbody></table><h2 id="4-System类"><a href="#4-System类" class="headerlink" title="4. System类"></a><font color=#1E90FF>4. <code>System</code>类</font></h2><table><thead><tr><th>方法</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td><code>System.exit(0);</code><br><code>System.exit(非0数);</code></td><td>人为终止当前运行的Java虚拟机（不要使用）<br>参数用作状态码，非零状态码表示异常终止</td><td>虚拟机正常停止<br>虚拟机异常停止</td></tr><tr><td><code>System.currentTimeMillis();</code></td><td><mark>返回当前时间戳</mark></td><td></td></tr><tr><td><code>System.arraycopy(源数组,源数组的起始索引,目的数组,目的数组的起始索引,拷贝个数);</code></td><td>拷贝数组</td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br><span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>System.arraycopy(arr1,<span class="hljs-number">0</span>,arr2,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br><br><span class="hljs-comment">// [0 0 1 2 3 4 5 0 0 0]</span><br></code></pre></td></tr></table></figure><h2 id="5-Runtime类"><a href="#5-Runtime类" class="headerlink" title="5. Runtime类"></a><font color=#1E90FF>5. <code>Runtime</code>类</font></h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>shutdown -s</code></td><td>默认1分钟之后关机</td></tr><tr><td><code>shutdown -s -t</code></td><td>指定时间关机</td></tr><tr><td><code>shutdown -a</code></td><td>取消关机操作</td></tr><tr><td><code>shutdown -r</code></td><td>关机并重启</td></tr></tbody></table><ul><li>示例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>Runtime.getRuntime().exec(<span class="hljs-string">&quot;shutdown -s -t 3600&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (IOException ioException) &#123;<br>ioException.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-BigDecimal"><a href="#6-BigDecimal" class="headerlink" title="6. BigDecimal *"></a><font color=#1E90FF>6. <code>BigDecimal *</code></font></h2><ul><li><mark>用于解决浮点型运算时，出现结果失真的问题</mark></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<br>    System.out.println(c);     <span class="hljs-comment">// 0.30000000000000004</span><br><br>    <span class="hljs-comment">// 把小数转换成字符串再得到BigDecimal对象来使用</span><br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(a);<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(b);<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> a1.add(b1);<br>    System.out.println(c1);    <span class="hljs-comment">// 0.3</span><br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>BigDecimal a1 = BigDecimal.valueOf(a);</code></td><td><code>double</code>类型数据，转为<code>BigDecimal</code>类型</td></tr><tr><td><code>a.add(b)</code></td><td>加法</td></tr><tr><td><code>a.subtract(b)</code></td><td>减法</td></tr><tr><td><code>a.multiply(b)</code></td><td>乘法</td></tr><tr><td><code>a.divide(b,2)</code></td><td>除法，结果保留两位小数</td></tr><tr><td><code>double a = a1.doubleValue();</code></td><td><code>BigDecimal</code>类型数据，转为<code>double</code>类型</td></tr></tbody></table><h2 id="7-爬虫"><a href="#7-爬虫" class="headerlink" title="7. 爬虫"></a><font color=#1E90FF>7. 爬虫</font></h2><h3 id="1-筛选字符串"><a href="#1-筛选字符串" class="headerlink" title="1. 筛选字符串"></a><font color=#1E90FF>1. 筛选字符串</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的Java8和Java11&quot;</span>;<br>        <br>        <span class="hljs-comment">// 获取正则表达式的对象</span><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;Java[1-9]&#123;0,2&#125;&quot;</span>);<br>        <br>        <span class="hljs-comment">// 获取文本匹配器的对象</span><br>        <span class="hljs-comment">// 拿着m去读取str，找符合p规则的子串</span><br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> p.matcher(str);<br><br>        <span class="hljs-comment">// 循环查找所匹配的元素</span><br>        <span class="hljs-keyword">while</span> (m.find())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> m.group();<br>            System.out.println(s1);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-替换字符串"><a href="#2-替换字符串" class="headerlink" title="2. 替换字符串"></a><font color=#1E90FF>2. 替换字符串</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的Java8和Java11&quot;</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> str.replaceAll(<span class="hljs-string">&quot;Java[1-9]&#123;0,2&#125;&quot;</span>,<span class="hljs-string">&quot;Python&quot;</span>);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-切割字符串"><a href="#3-切割字符串" class="headerlink" title="3. 切割字符串"></a><font color=#1E90FF>3. 切割字符串</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&amp;Python&amp;Go&amp;PHP&quot;</span>;<br><br>        String[] arr = str.split(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-捕获分组和非捕获分组"><a href="#4-捕获分组和非捕获分组" class="headerlink" title="4. 捕获分组和非捕获分组"></a><font color=#1E90FF>4. 捕获分组和非捕获分组</font></h3><h4 id="1-捕获分组"><a href="#1-捕获分组" class="headerlink" title="1. 捕获分组"></a>1. 捕获分组</h4><ol><li>后续还要继续使用本组的数据</li><li>正则内部使用：<code>\\组号</code></li><li>正则外部使用：<code>$组号</code></li></ol><h4 id="2-非捕获分组"><a href="#2-非捕获分组" class="headerlink" title="2. 非捕获分组"></a>2. 非捕获分组</h4><ol><li>分组之后不需要再用本组数据，仅仅是把数据扩起来</li></ol><table><thead><tr><th>符号</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td><code>(? : 正则)</code></td><td>获取所有</td><td>&#96;Java(? : 8</td></tr><tr><td><code>(? = 正则)</code></td><td>获取前面部分</td><td>&#96;Java(? &#x3D; 8</td></tr><tr><td><code>(? ! 正则 )</code></td><td>获取不是指定内容的前面部分</td><td>&#96;Java(? ! 8</td></tr></tbody></table><h4 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h4><ol><li><mark>清除重复字符串</mark></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我要学学学编编程&quot;</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> str.replaceAll(<span class="hljs-string">&quot;(.)\\1+&quot;</span>,<span class="hljs-string">&quot;$1&quot;</span>);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 我要学编程</span><br></code></pre></td></tr></table></figure><h2 id="8-时间"><a href="#8-时间" class="headerlink" title="8. 时间"></a><font color=#1E90FF>8. 时间</font></h2><h3 id="1-本地时间"><a href="#1-本地时间" class="headerlink" title="1. 本地时间"></a><font color=#1E90FF>1. 本地时间</font></h3><h4 id="1-介绍-2"><a href="#1-介绍-2" class="headerlink" title="1. 介绍"></a><font color=#1E90FF>1. 介绍</font></h4><ol><li><code>LocalDate</code>：代表本地日期（年、月、日、星期）</li><li><code>LocalTime</code>：代表本地时间（时、分、秒、纳秒）</li><li><code>LocalDateTime</code>：代表本地日期、时间（年、月、日、星期、时、分、秒、纳秒）</li></ol><h4 id="2-LocalDate"><a href="#2-LocalDate" class="headerlink" title="2. LocalDate"></a><font color=#1E90FF>2. <code>LocalDate</code></font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">// 获取本地日期对象</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld</span> <span class="hljs-operator">=</span> LocalDate.now();   <span class="hljs-comment">// 年 月 日</span><br>System.out.println(ld);         <span class="hljs-comment">// 2024-05-06</span><br><br><span class="hljs-comment">// 1. 获取日期对象的信息</span><br><span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> ld.getYear();     <span class="hljs-comment">// 年</span><br><span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> ld.getMonthValue();   <span class="hljs-comment">// 月（1-12）</span><br><span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> ld.getDayOfMonth();   <span class="hljs-comment">// 日</span><br><span class="hljs-type">int</span> <span class="hljs-variable">dayOfYear</span> <span class="hljs-operator">=</span> ld.getDayOfYear();    <span class="hljs-comment">// 一年中的第几天</span><br><span class="hljs-type">int</span> <span class="hljs-variable">dayOfWeak</span> <span class="hljs-operator">=</span> ld.getDayOfWeek().getValue();    <span class="hljs-comment">//  星期几</span><br><br><span class="hljs-comment">// 2. 直接修改某个信息：withYear、withMonth、withDayOfMonth、withDayOfYear</span><br><br><span class="hljs-comment">// 3. 把某个信息加多少：plusYears、plusMonths、plusDays、</span><br><br><span class="hljs-comment">// 4. 把某个信息减少多少：minusYears、minusMonth、minusDays、minusWeeks</span><br><br><span class="hljs-comment">// 5. 获取制定日期的LocalDate对象：LocalDate ld = LocalDate.of(2024,12,12);</span><br><br><span class="hljs-comment">// 6. 判断2个日期对象，是否相等，在前还是在后：equals、isBefore、isAfter</span><br></code></pre></td></tr></table></figure><h4 id="3-LocalTime"><a href="#3-LocalTime" class="headerlink" title="3. LocalTime"></a><font color=#1E90FF>3. <code>LocalTime</code></font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取本地时间对象</span><br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt</span> <span class="hljs-operator">=</span> LocalTime.now(); <span class="hljs-comment">// 时 分 秒 纳秒 不可变的</span><br>System.out.println(lt);         <span class="hljs-comment">// 19:58:36.915</span><br><br><span class="hljs-comment">// 1. 获取时间中的信息：.getHour() .getMinute() .getSecond() .getNano()</span><br><span class="hljs-comment">// 2. 修改时间： .withHour() .withMinute .withSecond .withNano</span><br><span class="hljs-comment">// 3. 增加时间计算： .plusHour() .plusMinute .plusSecond .plusNano</span><br><span class="hljs-comment">// 4. 减少时间计算： .minusHour() .minusMinute .minusSecond .minusNano</span><br><span class="hljs-comment">// 5. 获取制定时间的LocalTime对象： LocalTime lt = LocalTime.of(12,12,12);</span><br><span class="hljs-comment">// 6. 判断两个事件对象，是否相等，在前还是在后：.equals() .isBefore() .isAfter()</span><br></code></pre></td></tr></table></figure><h4 id="4-LocalDateTime"><a href="#4-LocalDateTime" class="headerlink" title="4. LocalDateTime"></a><font color=#1E90FF>4. <code>LocalDateTime</code></font></h4><ul><li><code>LocalDateTime</code>可以使用<code>LocalDate</code>和<code>LocalTime</code>的所有方法</li><li><code>LocalDateTime</code>与<code>LocalDate</code>和<code>LocalTime</code>的类型转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取本地日期和时间对象</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt</span> <span class="hljs-operator">=</span> LocalDateTime.now();    <span class="hljs-comment">// 年 月 日 时 分 秒 纳秒</span><br>System.out.println(ldt);      <span class="hljs-comment">// 2024-05-07T10:45:30.849</span><br><br><span class="hljs-comment">// 可用 LocalDate 与 LocalTime 的全部方法</span><br><br><span class="hljs-comment">// LocalDateTime 转为 LocalDate 或 LocalTime</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld</span> <span class="hljs-operator">=</span> ldt.toLocalDate();<br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt</span> <span class="hljs-operator">=</span> ldt.toLocalTime();<br><br><span class="hljs-comment">// LocalDate 和 LocalTime 相加为 LocalDateTime</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt1</span> <span class="hljs-operator">=</span> LocalDateTime.of(ld,lt);<br></code></pre></td></tr></table></figure><h3 id="2-其他时区时间"><a href="#2-其他时区时间" class="headerlink" title="2. 其他时区时间"></a><font color=#1E90FF>2. 其他时区时间</font></h3><h4 id="1-介绍-3"><a href="#1-介绍-3" class="headerlink" title="1. 介绍"></a><font color=#1E90FF>1. 介绍</font></h4><ol><li><code>ZoneId</code>：时区</li><li><code>ZonedDateTime</code>：带时区的时间</li></ol><h4 id="2-ZoneId"><a href="#2-ZoneId" class="headerlink" title="2. ZoneId"></a><font color=#1E90FF>2. <code>ZoneId</code></font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取系统默认的时区</span><br><span class="hljs-type">ZoneId</span> <span class="hljs-variable">zoneId</span> <span class="hljs-operator">=</span> ZoneId.systemDefault();<br>System.out.println(zoneId);        <span class="hljs-comment">// Asia/Shanghai</span><br><br><span class="hljs-comment">// 获取Java支持的全部时区Id</span><br>System.out.println(ZoneId.getAvailableZoneIds());<br><br><span class="hljs-comment">// 把某个时区id封装成ZoneId对象</span><br><span class="hljs-type">ZoneId</span> <span class="hljs-variable">zoneId1</span> <span class="hljs-operator">=</span> ZoneId.of(<span class="hljs-string">&quot;America/New_York&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="3-ZonedDateTime"><a href="#3-ZonedDateTime" class="headerlink" title="3. ZonedDateTime"></a><font color=#1E90FF>3. <code>ZonedDateTime</code></font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 把某个时区id封装成ZoneId对象</span><br><span class="hljs-type">ZoneId</span> <span class="hljs-variable">zoneId1</span> <span class="hljs-operator">=</span> ZoneId.of(<span class="hljs-string">&quot;America/New_York&quot;</span>);<br><br><span class="hljs-comment">// 获取某个时区的ZonedDateTime对象</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> ZonedDateTime.now(zoneId1);<br>System.out.println(now);         <span class="hljs-comment">// 2024-05-07T07:28:43.254-04:00[America/New_York]</span><br><br><span class="hljs-comment">// 世界标准时间</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">now1</span> <span class="hljs-operator">=</span> ZonedDateTime.now(Clock.systemUTC());<br>System.out.println(now1);       <span class="hljs-comment">// 2024-05-07T11:28:43.468Z</span><br><br><span class="hljs-comment">// 获取系统默认时区的ZonedDateTime对象</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">now2</span> <span class="hljs-operator">=</span> ZonedDateTime.now();<br>System.out.println(now2);       <span class="hljs-comment">// 2024-05-07T19:28:43.487+08:00[Asia/Shanghai]</span><br></code></pre></td></tr></table></figure><h3 id="3-时间戳"><a href="#3-时间戳" class="headerlink" title="3. 时间戳 "></a><font color=#1E90FF>3. 时间戳 </font></h3><ol><li>时间格式化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建Instant的对象，获取此刻时间信息</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant</span> <span class="hljs-operator">=</span> Instant.now();   <span class="hljs-comment">// 不可变对象</span><br><br><span class="hljs-comment">// 获取总秒数</span><br><span class="hljs-type">long</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> instant.getEpochSecond();<br>System.out.println(second);<br><br><span class="hljs-comment">// 时间戳的增加计算：plusMillis plusSeconds plusNanos</span><br><br><span class="hljs-comment">// 时间戳的减少计算：minusMillis minusSeconds minusNanos</span><br><br><span class="hljs-comment">// 时间戳之间的判断：equals、isBefore、isAfter</span><br></code></pre></td></tr></table></figure><ol start="2"><li>格式解析</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个日期时间格式化器对象</span><br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br><br><span class="hljs-comment">// 对时间进行格式化</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>System.out.println(now);    <span class="hljs-comment">// 2024-05-07T20:09:08.256</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> now.format(dateTimeFormatter);<br>System.out.println(rs);    <span class="hljs-comment">// 2024年05月07日 20:09:08</span><br><br><span class="hljs-comment">// 解析时间，一般使用LocalDateTime提供的解析方法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2099年04月07日 20:04:35&quot;</span>;<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> LocalDateTime.parse(s, dateTimeFormatter);<br>System.out.println(parse);     <span class="hljs-comment">// 2099-04-07T20:04:35</span><br></code></pre></td></tr></table></figure><h3 id="4-计算时间间隔"><a href="#4-计算时间间隔" class="headerlink" title="4. 计算时间间隔"></a><font color=#1E90FF>4. 计算时间间隔</font></h3><h4 id="1-介绍-4"><a href="#1-介绍-4" class="headerlink" title="1. 介绍"></a><font color=#1E90FF>1. 介绍</font></h4><ol><li><code>Period</code>：用于计算两个<code>LocalDate</code>对象，相差的年数、月数、天数</li><li><code>Duration</code>：用于计算两个时间对象相差的天数、小时数、分数、秒数、纳秒数；支持<code>LocalTime</code>、 <code>LocalDateTime</code>、 <code>Instant</code>等时间</li></ol><h4 id="2-Period"><a href="#2-Period" class="headerlink" title="2. Period"></a><font color=#1E90FF>2. Period</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDate</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2029</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>);<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2029</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>);<br><br><span class="hljs-comment">// 创建Period对象，封装两个日期对象</span><br><span class="hljs-type">Period</span> <span class="hljs-variable">period</span> <span class="hljs-operator">=</span> Period.between(start, end);<br>System.out.println(period.getYears());    <span class="hljs-comment">// 0</span><br>System.out.println(period.getMonths());   <span class="hljs-comment">// 4</span><br>System.out.println(period.getDays());     <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><h4 id="3-Duration"><a href="#3-Duration" class="headerlink" title="3. Duration"></a><font color=#1E90FF>3. Duration</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2029</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>);<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2029</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">11</span>,<span class="hljs-number">11</span>);<br><br><span class="hljs-comment">// 得到Duration对象</span><br><span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(start, end);<br><span class="hljs-comment">// 获取两个时间对象间隔的信息</span><br>System.out.println(duration.toDays());       <span class="hljs-comment">// 0</span><br>System.out.println(duration.toHours());      <span class="hljs-comment">// 0</span><br>System.out.println(duration.toMinutes());    <span class="hljs-comment">// 1</span><br>System.out.println(duration.getSeconds());   <span class="hljs-comment">// 61</span><br>System.out.println(duration.toMillis());     <span class="hljs-comment">// 61000</span><br>System.out.println(duration.toNanos());      <span class="hljs-comment">// 61000000000</span><br></code></pre></td></tr></table></figure><h2 id="9-排序"><a href="#9-排序" class="headerlink" title="9. 排序"></a><font color=#1E90FF>9. 排序</font></h2><h3 id="1-对数据排序"><a href="#1-对数据排序" class="headerlink" title="1. 对数据排序"></a><font color=#1E90FF>1. 对数据排序</font></h3><ol><li>数据排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span>[] prices = &#123;<span class="hljs-number">22.5</span>, <span class="hljs-number">10.2</span>, <span class="hljs-number">34.6</span>&#125;;<br>Arrays.sort(prices);<br>System.out.println(Arrays.toString(prices));   <span class="hljs-comment">// [10.2, 22.5, 34.6]</span><br></code></pre></td></tr></table></figure><ol start="2"><li>字符串排序</li></ol><ul><li>默认会区分大小写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] name = &#123;<span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-string">&quot;angela&quot;</span>, <span class="hljs-string">&quot;Andy&quot;</span>, <span class="hljs-string">&quot;dlei&quot;</span>, <span class="hljs-string">&quot;caocao&quot;</span>, <span class="hljs-string">&quot;Babo&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;Cici&quot;</span>&#125;;<br>Arrays.sort(name);<br>System.out.println(Arrays.toString(name));  <span class="hljs-comment">// [Andy, Babo, Cici, angela, body, caocao, dlei, jack]</span><br></code></pre></td></tr></table></figure><ul><li>重写方法，不区分大小写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] name1 = &#123;<span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-string">&quot;angela&quot;</span>, <span class="hljs-string">&quot;Andy&quot;</span>, <span class="hljs-string">&quot;dlei&quot;</span>, <span class="hljs-string">&quot;caocao&quot;</span>, <span class="hljs-string">&quot;Babo&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;Cici&quot;</span>&#125;;<br>Arrays.sort(name1, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String o1, String o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> o1.compareToIgnoreCase(o2);<br>    &#125;<br>&#125;);<br>System.out.println(Arrays.toString(name1));   <span class="hljs-comment">// [Andy, angela, Babo, body, caocao, Cici, dlei, jack]</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(name1, String::compareToIgnoreCase);<br></code></pre></td></tr></table></figure><ul><li>逆序排列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] name = &#123;<span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-string">&quot;angela&quot;</span>, <span class="hljs-string">&quot;Andy&quot;</span>, <span class="hljs-string">&quot;dlei&quot;</span>, <span class="hljs-string">&quot;caocao&quot;</span>, <span class="hljs-string">&quot;Babo&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;Cici&quot;</span>&#125;;<br>Arrays.sort(name, Comparator.reverseOrder());<br>System.out.println(Arrays.toString(name));    <span class="hljs-comment">// [jack, dlei, caocao, body, angela, Cici, Babo, Andy]</span><br></code></pre></td></tr></table></figure><h3 id="2-对对象排序"><a href="#2-对对象排序" class="headerlink" title="2. 对对象排序 *"></a><font color=#1E90FF>2. 对对象排序 *</font></h3><ul><li>javabean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String Name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">// 省略get、set方法</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>main</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Student[] students  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span> [<span class="hljs-number">3</span>];<br>    students[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zc&quot;</span>, <span class="hljs-number">188.0</span>, <span class="hljs-number">24</span>);<br>    students[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;ll&quot;</span>, <span class="hljs-number">170.0</span>, <span class="hljs-number">24</span>);<br>    students[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xx&quot;</span>, <span class="hljs-number">175.0</span>, <span class="hljs-number">25</span>);<br><br>    System.out.println(Arrays.toString(students));  <span class="hljs-comment">// [Student&#123;Name = zc, height = 188.0, age = 24&#125;, Student&#123;Name = ll, height = 170.0, age = 24&#125;, Student&#123;Name = xx, height = 175.0, age = 25&#125;]</span><br><br>    Arrays.sort(students, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>            <span class="hljs-keyword">return</span> Double.compare(o1.getHeight(), o2.getHeight());     <span class="hljs-comment">// 升序排列</span><br>            <span class="hljs-comment">// return Double.compare(o2.getHeight(), o1.getHeight());  // 降序排列</span><br>        &#125;<br>    &#125;);<br><br>    System.out.println(Arrays.toString(students));   <span class="hljs-comment">// [Student&#123;Name = ll, height = 170.0, age = 24&#125;, Student&#123;Name = xx, height = 175.0, age = 25&#125;, Student&#123;Name = zc, height = 188.0, age = 24&#125;]</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-正则表达式-matches"><a href="#10-正则表达式-matches" class="headerlink" title="10. 正则表达式 .matches"></a><font color=#1E90FF>10. 正则表达式 <code>.matches</code></font></h2><p>1.校验数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">qq</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;852183508&quot;</span>;<br><span class="hljs-type">Boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> qq.matches(<span class="hljs-string">&quot;[1-9]\\d&#123;5,19&#125;&quot;</span>);<br>System.out.println(res);   <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>2.查找内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;姓名：zc，年龄：18；姓名：ll，年龄：16；姓名：zl，年龄：20&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;姓名：(.*?)，&quot;</span>;<br><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(data);<br><br><span class="hljs-keyword">while</span>(matcher.find())&#123;<br>    System.out.println(matcher.group(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">zc<br>ll<br>zl<br></code></pre></td></tr></table></figure><p>3.搜索替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 需求1：将中间的非中文字符替换为&quot;-&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;古力娜扎dasf23迪丽热巴fass74马尔扎哈fasf31卡尔扎巴&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> s1.replaceAll(<span class="hljs-string">&quot;\\w+&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>);<br>System.out.println(s);       <span class="hljs-comment">// 古力娜扎-迪丽热巴-马尔扎哈-卡尔扎巴</span><br><br><span class="hljs-comment">// 需求2：将重复字符只保持一个</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我我我喜欢编编编程程&quot;</span>;<br>System.out.println(s2.replaceAll(<span class="hljs-string">&quot;(.)\\1+&quot;</span>, <span class="hljs-string">&quot;$1&quot;</span>));   <span class="hljs-comment">// 我喜欢编程</span><br><br><span class="hljs-comment">// (.)一组，匹配任意字符</span><br><span class="hljs-comment">// \\1:为这个组声明一个组号：1号</span><br><span class="hljs-comment">// *:声明必须是重复的字</span><br></code></pre></td></tr></table></figure><p>4.分割内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 需求3：将人名分割后取出来</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;古力娜扎dasf23迪丽热巴fass74马尔扎哈fasf31卡尔扎巴&quot;</span>;<br>String[] split = s3.split(<span class="hljs-string">&quot;\\w+&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> Arrays.toString(split);<br>System.out.println(string);     <span class="hljs-comment">// [古力娜扎, 迪丽热巴, 马尔扎哈, 卡尔扎巴]</span><br></code></pre></td></tr></table></figure><h1 id="四、装饰器"><a href="#四、装饰器" class="headerlink" title="四、装饰器"></a><font color=#1E90FF>四、装饰器</font></h1><h2 id="1-Slf4j"><a href="#1-Slf4j" class="headerlink" title="1. @Slf4j"></a><font color=#1E90FF>1. @Slf4j</font></h2><ol><li><p>功能介绍：全称<strong>Simple Logging Facade for Java</strong>，是一个为各种日志框架，<mark>用于日志记录</mark></p></li><li><p>使用方法：</p><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>类上加注解: @Slf4j</p></li><li><p><code>log.info(&quot;xxx&quot;);</code>使用</p></li></ol></li><li><p>结果展示</p><div style="text-align:center;gap:5px">    <img src="/img/java_pic/56.png" alt="图片描述" style="zoom:40%;"></div></li></ol><h2 id="2-Test"><a href="#2-Test" class="headerlink" title="2. @Test"></a><font color=#1E90FF>2. @Test</font></h2><ol><li><p>功能介绍：该方法可以<mark>不用在main方法中调用，就可以测试出运行结果的一种测试工具</mark>。一般函数都需要有main方法调用才能执行，方便了开发人员在开发过程中测试代码功能。不过需要注意被测试的方法必须是public修饰的</p></li><li><p>使用方法：</p><ol><li><p>在需要测试的方法前输入@Test</p></li><li><p>鼠标选中@Test，点击左侧红色灯泡</p></li><li><p>选中 Add’JUnit5.4’ to classpath</p><div style="text-align:center;gap:5px">    <img src="/img/java_pic/57.png" alt="图片描述" style="zoom:45%;"></div></li><li><p>完成后左边有个绿色三角形，点击就能单独执行@Test下面的方法了</p><div style="text-align:center;gap:5px">    <img src="/img/java_pic/58.png" alt="图片描述" style="zoom:40%;"></div></li></ol></li></ol><h2 id="3-Data-AllArgsConstructor"><a href="#3-Data-AllArgsConstructor" class="headerlink" title="3. @Data &amp; @AllArgsConstructor"></a><font color=#1E90FF>3. @Data &amp; @AllArgsConstructor</font></h2><ol><li>功能介绍：<mark>@Data用于简化和消除，javabean中臃肿的get&#x2F;set代码</mark></li></ol><div style="text-align:center;gap:5px">    <img src="/img/java_pic/60.png" alt="图片描述" style="zoom:40%;"></div><table><thead><tr><th>注释</th><th>作用</th></tr></thead><tbody><tr><td>@Data</td><td>提供了更综合的生成代码功能（@Getter + @Setter + @ToString + @EqualsAndHashCode）</td></tr><tr><td>@Getter&#x2F;@Setter</td><td>为所有的属性提供get&#x2F;set方法</td></tr><tr><td>@ToString</td><td>会给类自动生成易阅读的 toString 方法</td></tr><tr><td>@EqualsAndHashCode</td><td>根据类所拥有的非静态字段自动重写 equals 方法和 hashCode 方法</td></tr></tbody></table><ol start="2"><li><p>使用方法</p><ol><li><p>在pom.xml文件中引入lombok依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在实体类上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>注：<mark>@Data不会自动生成有参构造，需要搭配@AllArgsConstructor使用</mark></p><ol><li><p><code>UserDto</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserEntity</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>UserTest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">UserEntity</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserEntity</span>(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-literal">null</span>);<br>        log.info(<span class="hljs-string">&quot;userPassword:&#123;&#125;&quot;</span>,u.getPassword());    <span class="hljs-comment">// null</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="4-Component-Repository-Service-Controller"><a href="#4-Component-Repository-Service-Controller" class="headerlink" title="4. @Component &amp; @Repository &amp; @Service &amp; @Controller "></a><font color=#1E90FF>4. @Component &amp; @Repository &amp; @Service &amp; @Controller </font></h2><p>以下注释可以直接标注在java类上，将他们定义成Spring Bean</p><table><thead><tr><th>注释</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>表示容器中的一个组件为Bean，并且可以作用在应用的任何层次，例如Service层、Dao层等</td></tr><tr><td>@Repository</td><td>用于将数据访问层（Dao）的类，标识为bean</td></tr><tr><td>@Service</td><td>将业务层（Service层）的类，标识为bean</td></tr><tr><td>@Controller</td><td>将控制层（Service层）的类，标识为bean</td></tr></tbody></table><h2 id="5-Autowired-Resource"><a href="#5-Autowired-Resource" class="headerlink" title="5. @Autowired &amp; @Resource"></a><font color=#1E90FF>5. @Autowired &amp; @Resource</font></h2><h3 id="1-Autowired"><a href="#1-Autowired" class="headerlink" title="1.@Autowired"></a>1.@Autowired</h3><ol><li><p>功能介绍：<code>@Autowired</code>是Spring框架提供的一个注解，<mark>用于实现自动依赖注入</mark>。它可以应用于变量、构造函数、设置方法上。当Spring容器启动时，它会自动查找并注入所需的依赖。</p></li><li><p>使用方法</p><ol><li><p>创建一个SpringBoot，包含一个服务类的MyService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 标记此类为一个bean类</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performTask</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Task performed by MyService&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>控制器MyController，调用上述服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;<br>    <br>    <span class="hljs-comment">// 依赖注入</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MyService myService;<br>  <br>    <span class="hljs-meta">@GetMapping(&quot;/perform-task&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">performTask</span><span class="hljs-params">()</span> &#123;<br>        myService.performTask();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Task performed&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>说明</p><ol><li><code>@Autowired</code>注解自动注入<code>MyService</code>的实例到<code>MyController</code>中。</li><li>当<code>MyController</code>的<code>performTask</code>方法被调用时，它将通过<code>myService</code>实例调用<code>performTask</code>方法。</li></ol></li></ol><h3 id="2-Resource"><a href="#2-Resource" class="headerlink" title="2.@Resource"></a>2.@Resource</h3><ol><li><p>功能介绍：<code>@Resource</code>是Java标准库中的注解，属于JSR-250规范。它也可以<mark>用于实现依赖注入</mark>，但与<code>@Autowired</code>不同的是，<code>@Resource</code>可以通过名称来指定要注入的依赖</p></li><li><p>使用方法</p><ol><li><p>创建一个SpringBoot，包含一个服务类的MyService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 标记此类为一个bean类</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performTask</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Task performed by MyService&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>控制器MyController，调用上述服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;<br><br>    <span class="hljs-comment">// 依赖注入</span><br>    <span class="hljs-meta">@Resource(name = &quot;myService&quot;)</span><br>    <span class="hljs-keyword">private</span> MyService myService;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/perform-task&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">performTask</span><span class="hljs-params">()</span> &#123;<br>        myService.performTask();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Task performed&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>说明</p><ol><li><code>@Resource</code>注解通过名称<code>myService</code>注入<code>MyService</code>的实例。</li><li>这里的名称必须与Spring容器中定义的bean名称相匹配。</li></ol></li><li><p>@Autowired与@Resource的区别</p><ol><li>使用上的差异<ul><li>@Autowired是Spring框架特有的注解，而@Resource是Java标准库中的注解。</li><li>@Autowired默认按类型进行注入，而@Resource默认按名称进行注入。</li><li>@Autowired可以通过@Qualifier注解指定注入的bean名称，而@Resource可以通过name属性指定注入的bean名称。</li><li>@Autowired可以应用于构造函数、变量、设置方法上，而@Resource只能应用于变量和设置方法上。</li></ul></li><li>适用场景的比较<ul><li>当我们希望按类型进行注入时，可以使用@Autowired。</li><li>当我们希望按名称进行注入时，可以使用@Resource。</li><li>当我们希望有更多的控制权，例如在多个同类型的bean中指定一个特定的bean时，可以使用@Autowired结合@Qualifier或者@Resource的name属性。</li></ul></li><li>两个注解的选择建议<ul><li>如果你的应用完全基于Spring框架，并且不需要与其他框架集成，那么建议使用@Autowired。</li><li>如果你需要在多个框架之间进行集成，或者需要按名称进行注入，那么建议使用@Resource。</li></ul></li></ol></li></ol><h1 id="五、JDK8新特性"><a href="#五、JDK8新特性" class="headerlink" title="五、JDK8新特性"></a><font color=#1E90FF>五、JDK8新特性</font></h1><h2 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1. Lambda表达式"></a><font color=#1E90FF>1. Lambda表达式</font></h2><ol><li>介绍： 用于<mark>简化函数式接口</mark>的，<mark>匿名内部类</mark>的代码写法</li><li>什么是函数式接口<ol><li>有且仅有一个抽象方法的接口</li><li>注意：绝大部分函数式接口的上方都会有<code>@FunctionalInterFace</code>的注释</li></ol></li><li>具体格式：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">(被重写方法的形参列表) -&gt; &#123;<br>被重写方法的方法体代码<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>示例</li></ol><ul><li>普通匿名内部类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test13</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Swimming</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swimming</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;学生在游泳&quot;</span>);<br>            &#125;<br>        &#125;;<br>        s.swim();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Swimming</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>Lambda</code>表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test13</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Swimming</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;学生在游泳1&quot;</span>);<br>        &#125;;<br>        s1.swim();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Swimming</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li><p>进一步简化</p><ol><li>参数类型可以省略不写</li><li>如果只有一个参数，参数类型可以省略，同时（）也可以省略</li><li>如果Lambda表达式中的方法体代码只有一行，可以省略大括号不写，同时要省略分号！此时，如果这行代码是return语句，也必须去掉return不写</li></ol></li><li><p>示例</p></li></ol><ul><li>对上文中的sort排序方法进行简化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(students, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> Double.compare(o1.getHeight(), o2.getHeight());     <span class="hljs-comment">// 升序排列</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>Lambda表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(students, (o1, o2) -&gt; Double.compare(o1.getHeight(), o2.getHeight()));<br></code></pre></td></tr></table></figure><h2 id="2-方法引用"><a href="#2-方法引用" class="headerlink" title="2. 方法引用"></a><font color=#1E90FF>2. 方法引用</font></h2><ul><li>用途：进一步简化Lambda表达式</li><li>方式：方法一用的标志符号<code>::</code></li></ul><h3 id="1-静态方法的引用"><a href="#1-静态方法的引用" class="headerlink" title="1. 静态方法的引用"></a><font color=#1E90FF>1. 静态方法的引用</font></h3><ol><li>使用方法：类名：：静态方法</li><li>使用场景：如果某个Lambda表达式里只是调用一个静态方法，并且前后参数的形式一致，就可以使用静态方法引用</li><li>示例：</li></ol><ul><li>对上文中的sort排序方法进行简化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(students, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> Double.compare(o1.getHeight(), o2.getHeight());     <span class="hljs-comment">// 升序排列</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>Lambda表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(students, (o1, o2) -&gt; Double.compare(o1.getHeight(), o2.getHeight()));<br></code></pre></td></tr></table></figure><ul><li>方法引用再次简化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(students, Comparator.comparingDouble(Student::getHeight));<br></code></pre></td></tr></table></figure><h3 id="2-特定类型方法的引用"><a href="#2-特定类型方法的引用" class="headerlink" title="2. 特定类型方法的引用"></a><font color=#1E90FF>2. 特定类型方法的引用</font></h3><p>示例：</p><ul><li>匿名内部类普通重写方法，对上文中的sort排序方法进行简化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 重写方法，不区分大小写</span><br>String[] name1 = &#123;<span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-string">&quot;angela&quot;</span>, <span class="hljs-string">&quot;Andy&quot;</span>, <span class="hljs-string">&quot;dlei&quot;</span>, <span class="hljs-string">&quot;caocao&quot;</span>, <span class="hljs-string">&quot;Babo&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;Cici&quot;</span>&#125;;<br>Arrays.sort(name1, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String o1, String o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> o1.compareToIgnoreCase(o2);<br>    &#125;<br>&#125;);<br>System.out.println(Arrays.toString(name1));   <span class="hljs-comment">// [Andy, angela, Babo, body, caocao, Cici, dlei, jack]</span><br></code></pre></td></tr></table></figure><ul><li>Lambda表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] name1 = &#123;<span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-string">&quot;angela&quot;</span>, <span class="hljs-string">&quot;Andy&quot;</span>, <span class="hljs-string">&quot;dlei&quot;</span>, <span class="hljs-string">&quot;caocao&quot;</span>, <span class="hljs-string">&quot;Babo&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;Cici&quot;</span>&#125;;<br>Arrays.sort(name1, (o1, o2) -&gt; o1.compareToIgnoreCase(o2));<br>System.out.println(Arrays.toString(name1));   <span class="hljs-comment">// [Andy, angela, Babo, body, caocao, Cici, dlei, jack]</span><br></code></pre></td></tr></table></figure><ul><li>方法引用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] name2 = &#123;<span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-string">&quot;angela&quot;</span>, <span class="hljs-string">&quot;Andy&quot;</span>, <span class="hljs-string">&quot;dlei&quot;</span>, <span class="hljs-string">&quot;caocao&quot;</span>, <span class="hljs-string">&quot;Babo&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;Cici&quot;</span>&#125;;<br>Arrays.sort(name2, String::compareToIgnoreCase);<br>System.out.println(Arrays.toString(name2));   <span class="hljs-comment">// [Andy, angela, Babo, body, caocao, Cici, dlei, jack]</span><br></code></pre></td></tr></table></figure><h1 id="六、多线程"><a href="#六、多线程" class="headerlink" title="六、多线程"></a><font color=#1E90FF>六、多线程</font></h1><h2 id="1-介绍-5"><a href="#1-介绍-5" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><h3 id="1-程序-、进程、线程"><a href="#1-程序-、进程、线程" class="headerlink" title="1. 程序 、进程、线程"></a>1. 程序 、进程、线程</h3><ol><li>程序：程序和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念</li><li>进程：执行程序的一次执行过程，是一个动态的概念，是系统资源分配的单位</li><li>线程：一个进程中包含&gt;&#x3D;1个线程，线程是CPU调度和执行的单位</li></ol><ul><li>注：很多线程是模拟出来的，真正的多线程是指有多个cpu，即多核，如服务器。如果是模拟出来的多线程，即在一个cpu的情况下，在同一个时间点，cpu只能执行一个代码，因为切换的很快，所以就有同时执行的错觉。线程不一定立即执行，CPU安排调度</li></ul><h3 id="2-普通方法调用和多线程"><a href="#2-普通方法调用和多线程" class="headerlink" title="2. 普通方法调用和多线程"></a>2. 普通方法调用和多线程</h3><div style="text-align:center;gap:5px">    <img src="/img/java_pic/37.png" alt="图片描述" style="zoom:80%;"></div><h3 id="3-线程的三种创建方式"><a href="#3-线程的三种创建方式" class="headerlink" title="3. 线程的三种创建方式"></a>3. 线程的三种创建方式</h3><ol><li><mark><code>Thread class</code> -&gt; 继承Thread类（重点）</mark></li><li><mark><code>Runnable</code>接口 -&gt; 实现Runnable接口（重点）</mark></li><li><code>Callabe</code>接口 -&gt; 实现Callable接口（了解）</li></ol><h2 id="2-方法1：继承Thread类"><a href="#2-方法1：继承Thread类" class="headerlink" title="2. 方法1：继承Thread类"></a>2. 方法1：继承<code>Thread</code>类</h2><ol><li><p>操作步骤</p><ol><li>自定义线程类，<mark>继承<code>Thread</code>类</mark></li><li><mark>重写<code>run()</code>方法</mark>，编写线程执行体</li><li>创建线程对象，调用<code>start()</code>方法启动线程</li></ol></li><li><p>注意事项</p><ol><li>若调用<code>start</code>方法<mark><code>test07.start()</code></mark>则开启两个线程，分别执行<code>我在听课</code>和<code>我在学习</code></li><li>若调用<code>run</code>方法<mark><code>test07.run()</code></mark>则为单线程，先执行<code>我在听课</code>再执行主路径<code>我在学习</code></li></ol></li><li><p>示例代码：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建线程方式一：继承Thread类，重写run()方法，调用start开启线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test07</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">// 线程入口点</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// run方法线程体</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在听课&quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// main线程主线程</span><br>        <span class="hljs-comment">// 创建一个线程对象</span><br>        <span class="hljs-type">test07</span> <span class="hljs-variable">test07</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">test07</span>();<br><br>        <span class="hljs-comment">// 调用start()方法开启线程</span><br>        test07.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在学习多线程&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-方法2：实现Runnable接口"><a href="#3-方法2：实现Runnable接口" class="headerlink" title="3. 方法2：实现Runnable接口"></a>3. 方法2：实现Runnable接口</h2><ol><li>操作步骤<ol><li>定义MyRunnale类，<mark>实现Runnable接口</mark></li><li><mark>实现<code>run()</code>方法</mark>，编写线程执行体</li><li>创建线程对象，调用start()方法启动线程</li></ol></li><li>注意事项：<ol><li>推荐使用Runnable对象，因为Java单继承的局限性</li></ol></li><li>示例代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建线程方式二：实现Runnable接口，重写run()方法，执行线程需要丢入</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test09</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//run方法线程体</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在听课&quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建Runnable接口的实现类对象</span><br>        <span class="hljs-type">test09</span> <span class="hljs-variable">test09</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">test09</span>();<br><br>        <span class="hljs-comment">// 创建线程对象，通过线程对象来开启我们的线程，代理</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(test09).start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在学习多线程&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-两种方法的对比"><a href="#4-两种方法的对比" class="headerlink" title="4. 两种方法的对比"></a>4. 两种方法的对比</h2><h3 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1. 继承Thread类"></a>1. 继承Thread类</h3><ol><li>子类继承Thread类具备多线程能力</li><li>启动线程：子类对象.start()</li><li>不建议使用：避免OOP单继承局限性</li></ol><h3 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2. 实现Runnable接口"></a>2. 实现Runnable接口</h3><ol><li>实现接口Runnable具有多线程能力</li><li>启动线程：传入目标对象+Thread对象.start()</li><li>推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 一份资料</span><br><span class="hljs-type">StartThread</span> <span class="hljs-variable">station</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StartThread</span>();<br><br><span class="hljs-comment">// 多个代理</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小明&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小红&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小蓝&quot;</span>).start();<br></code></pre></td></tr></table></figure><h2 id="5-并发问题"><a href="#5-并发问题" class="headerlink" title="5. 并发问题"></a>5. 并发问题</h2><ul><li>当多个线程操作同一个资源的情况下，线程不安全，数据紊乱</li></ul><ol><li>买火车票实例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test10</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">//票数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (ticketNum&lt;=<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 模拟延时</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">200</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;拿到了第&quot;</span>+ ticketNum-- +<span class="hljs-string">&quot;张票&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">test10</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">test10</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;小明&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;老师&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;黄牛&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>运行结果</li></ol><p>概率出现数据重复，以及数据顺序颠倒等问题</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ada">小明<span class="hljs-comment">--&gt;拿到了第10张票</span><br>老师<span class="hljs-comment">--&gt;拿到了第9张票</span><br>黄牛<span class="hljs-comment">--&gt;拿到了第8张票</span><br>小明<span class="hljs-comment">--&gt;拿到了第7张票</span><br>黄牛<span class="hljs-comment">--&gt;拿到了第5张票</span><br>老师<span class="hljs-comment">--&gt;拿到了第6张票</span><br>黄牛<span class="hljs-comment">--&gt;拿到了第4张票</span><br>老师<span class="hljs-comment">--&gt;拿到了第4张票</span><br>小明<span class="hljs-comment">--&gt;拿到了第4张票</span><br>小明<span class="hljs-comment">--&gt;拿到了第3张票</span><br>黄牛<span class="hljs-comment">--&gt;拿到了第3张票</span><br>老师<span class="hljs-comment">--&gt;拿到了第3张票</span><br>小明<span class="hljs-comment">--&gt;拿到了第2张票</span><br>老师<span class="hljs-comment">--&gt;拿到了第1张票</span><br>黄牛<span class="hljs-comment">--&gt;拿到了第0张票</span><br></code></pre></td></tr></table></figure><ol start="3"><li>显示线程姓名</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread.currentThread().getName()<br></code></pre></td></tr></table></figure><ol start="4"><li>模拟线程时延</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">200</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="七、简单算法"><a href="#七、简单算法" class="headerlink" title="七、简单算法"></a><font color=#1E90FF>七、简单算法</font></h1><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a><font color=#1E90FF>1. 冒泡排序</font></h2><div style="text-align:center;gap:5px">    <img src="/img/java_pic/44.gif" alt="图片描述" style="zoom:80%;"></div><ul><li><p>原理：从数组中第一个元素开始，和后一个元素比较大小，最终将最大值放到数组的最后面去</p></li><li><p>步骤：</p><ul><li>从第一组两个相邻元素开始比较，依次往后交换</li><li>每经过一次排序较大的元素就会被放到后面，直到最大的元素被放到最后，那么下一次排序的时候也就不用用它（最后一个数）和它相邻的前面的数进行比较了，最后的元素就成了“稳定元素”</li><li>重复以上步骤，每一次排序完成，最后的“稳定元素”都会增加一个，直到没有可以交换的元素，那么排序就完成了</li></ul></li><li><p>例子：<code>int[] arr = &#123;5, 2, 3, 1&#125;;</code></p><ul><li>第一轮：<code>&#123;2, 3, 1, 5&#125;</code></li><li>第二轮：<code>&#123;2, 1, 3, 5&#125;</code></li><li>第三轮：<code>&#123;1, 2, 3, 5&#125;</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-comment">// 用于确定这个数组，需要比较几轮</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-comment">// 用于确定一轮数据中，需要比较几次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length-i-<span class="hljs-number">1</span>; j++) &#123;<br>            <span class="hljs-comment">// 当前面数据，比后面数据大的时候，交换两者索引</span><br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = arr[j];<br>                arr[j] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    System.out.println(Arrays.toString(arr));   <span class="hljs-comment">// [1, 2, 3, 5]</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a><font color=#1E90FF>2. 选择排序</font></h2><ul><li><p>原理：在未排序序列中找到最小元素,存放到排列序列的起始位置,然后在剩余未排序元素中继续寻找最小元素,然后放到已经排好序序列的末尾,以此类推,直到所有元素均排序完毕</p></li><li><p>步骤:</p><ul><li>遍历序列,每一次从无序序列找到最小元素,定义为minIndex&#x3D;i,放到无序序列最前面</li><li>直到无序区间内没有元素,也就是所有元素都排好序</li></ul></li></ul><div style="text-align:center;gap:5px">    <img src="/img/java_pic/45.gif" alt="图片描述" style="zoom:80%;"></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-comment">// 控制选择几轮</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr1.length-<span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-comment">// 控制每轮选择几次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt;arr1.length ; j++) &#123;<br>            <span class="hljs-comment">// 判断当前位置是否大于后面位置处的元素值，若大于则交换索引</span><br>            <span class="hljs-keyword">if</span>(arr1[minIndex] &gt; arr1[j])&#123;<br>                minIndex = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 决定是否交换</span><br>        <span class="hljs-keyword">if</span>(i != minIndex)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr1[i];<br>            arr1[i] = arr1[minIndex];<br>            arr1[minIndex] = temp;<br>        &#125;<br>    &#125;<br>    System.out.println(Arrays.toString(arr1));    <span class="hljs-comment">// [1, 2, 3, 5]</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-二分查找"><a href="#3-二分查找" class="headerlink" title="3. 二分查找"></a><font color=#1E90FF>3. 二分查找</font></h2><ul><li>前提条件：所查询数组是<Mark>有序数列</mark></li></ul><div style="text-align:center;gap:5px">    <img src="/img/java_pic/46.gif" alt="图片描述" style="zoom:80%;"></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test16</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建有序列表，和想要查找的元素</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">23</span>, <span class="hljs-number">79</span>, <span class="hljs-number">81</span>, <span class="hljs-number">103</span>, <span class="hljs-number">127</span>, <span class="hljs-number">131</span>, <span class="hljs-number">147</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-number">81</span>;<br>        System.out.println(binarySearch(arr, data));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> data)</span>&#123;<br>        <span class="hljs-comment">// 定义两个变量，一个站在左边位置，一个站在右边位置</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 定义一个循环控制折半</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-comment">// 每次折半，都算出中间位置的索引</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">// 判断当前要找的元素值，与中间位置处的元素值相比较</span><br>            <span class="hljs-keyword">if</span> (data &lt; arr[middle]) &#123;<br>                <span class="hljs-comment">// 往左边找</span><br>                right = middle - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data &gt; arr[middle]) &#123;<br>                <span class="hljs-comment">// 往右边找</span><br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 中间位置处的元素值，刚好等于我们要找的元素值</span><br>                <span class="hljs-keyword">return</span> middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;  <span class="hljs-comment">// -1特殊结果，代表没有找到，列表中没有该元素</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Java内置函数，效果与底层原理和二分查找相同</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">23</span>, <span class="hljs-number">79</span>, <span class="hljs-number">81</span>, <span class="hljs-number">103</span>, <span class="hljs-number">127</span>, <span class="hljs-number">131</span>, <span class="hljs-number">147</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-number">81</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> Arrays.binarySearch(arr, data);<br>System.out.println(res);   <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h1 id="八、完整项目"><a href="#八、完整项目" class="headerlink" title="八、完整项目"></a>八、完整项目</h1><h2 id="1-web端拼图游戏"><a href="#1-web端拼图游戏" class="headerlink" title="1. web端拼图游戏"></a>1. web端拼图游戏</h2><h3 id="1-项目分析"><a href="#1-项目分析" class="headerlink" title="1. 项目分析"></a>1. 项目分析</h3><ul><li>注：GUI是指采用图形化的方式显示操作界面</li></ul><div style="text-align:center;gap:5px">    <img src="/img/java_pic/24.png" alt="图片描述" style="zoom:80%;"></div><h3 id="2-主界面搭建JFrame"><a href="#2-主界面搭建JFrame" class="headerlink" title="2. 主界面搭建JFrame"></a>2. 主界面搭建<code>JFrame</code></h3><h4 id="1-界面效果"><a href="#1-界面效果" class="headerlink" title="1. 界面效果"></a>1. 界面效果</h4><div style="text-align:center;gap:5px">    <img src="/img/java_pic/25.png" alt="图片描述" style="zoom:80%;"></div><h4 id="2-页面常见操作"><a href="#2-页面常见操作" class="headerlink" title="2. 页面常见操作"></a>2. 页面常见操作</h4><ul><li>注：关闭模式有<code>DO_NOTHING_ON_CLOSE</code>, <code>HIIDE_ON_CLOSE</code>, <code>DISPOSE_ON_CLOSE</code>,<code>EXIT_ON_CLOSE</code>四种方式可以选择</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.召唤主界面</span><br><span class="hljs-type">JFrame</span> <span class="hljs-variable">jFrame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>();<br><br><span class="hljs-comment">//2.设置主界面的大小</span><br>jFrame.setSize(<span class="hljs-number">514</span>,<span class="hljs-number">595</span>);<br><br><span class="hljs-comment">//设置界面的标题</span><br><span class="hljs-built_in">this</span>.setTitle(<span class="hljs-string">&quot;登录&quot;</span>);<br><br><span class="hljs-comment">//设置界面置顶（位于所有页面最上方）</span><br><span class="hljs-built_in">this</span>.setAlwaysOnTop(<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">//设置界面，在屏幕中居中</span><br><span class="hljs-built_in">this</span>.setLocationRelativeTo(<span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">//设置关闭模式</span><br><span class="hljs-built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br><br><span class="hljs-comment">//让主界面显示出来</span><br>jFrame.setVisible(<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">//关闭当前页面</span><br>jFrame.setVisible(<span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">//关闭虚拟机</span><br>System.exit(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h4 id="3-利用继承简化代码"><a href="#3-利用继承简化代码" class="headerlink" title="3. 利用继承简化代码"></a>3. 利用继承简化代码</h4><h5 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h5><p>​如果把所有的代码都写在main方法中，那么main方法里面的代码，就包含游戏主界面的代码，登录界面的代码，注册界面的代码，会变得非常臃肿后期维护也是一件非常难的事情，所以我们需要用继承改进，改进之后，代码就可以分类了。</p><h5 id="2-目录"><a href="#2-目录" class="headerlink" title="2. 目录"></a>2. 目录</h5><div style="text-align:center;gap:5px">    <img src="/img/java_pic/26.png" alt="图片描述" style="zoom:40%;"></div><h5 id="3-LoginJFrame"><a href="#3-LoginJFrame" class="headerlink" title="3. LoginJFrame"></a>3. <code>LoginJFrame</code></h5><ul><li>注：其中this表示当前窗体的意思</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//登录界面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginJFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    <span class="hljs-comment">//LoginJFrame 表示登录界面</span><br>    <span class="hljs-comment">//以后所有跟登录相关的代码，都写在这里</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginJFrame</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//在创建登录界面的时候，同时给这个界面去设置一些信息</span><br>        <span class="hljs-comment">//比如，宽高，直接展示出来</span><br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">488</span>,<span class="hljs-number">430</span>);<br>        <span class="hljs-comment">//设置界面的标题</span><br>        <span class="hljs-built_in">this</span>.setTitle(<span class="hljs-string">&quot;拼图 登录&quot;</span>);<br>        <span class="hljs-comment">//设置界面置顶（位于所有页面最上方）</span><br>        <span class="hljs-built_in">this</span>.setAlwaysOnTop(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//设置界面，在屏幕中居中</span><br>        <span class="hljs-built_in">this</span>.setLocationRelativeTo(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//设置关闭模式</span><br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>        <span class="hljs-comment">//让显示显示出来，建议写在最后</span><br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-RegisterJFrame"><a href="#4-RegisterJFrame" class="headerlink" title="4. RegisterJFrame"></a>4. <code>RegisterJFrame</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注册界面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterJFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    <span class="hljs-comment">//跟注册相关的代码，都写在这个界面中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RegisterJFrame</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">488</span>,<span class="hljs-number">500</span>);<br>        <span class="hljs-comment">//设置界面的标题</span><br>        <span class="hljs-built_in">this</span>.setTitle(<span class="hljs-string">&quot;拼图 注册&quot;</span>);<br>        <span class="hljs-comment">//设置界面置顶</span><br>        <span class="hljs-built_in">this</span>.setAlwaysOnTop(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//设置界面居中</span><br>        <span class="hljs-built_in">this</span>.setLocationRelativeTo(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//设置关闭模式</span><br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>        <span class="hljs-comment">//让显示显示出来，建议写在最后</span><br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-GameJFrame"><a href="#5-GameJFrame" class="headerlink" title="5.GameJFrame"></a>5.<code>GameJFrame</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//游戏主界面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameJFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GameJFrame</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//设置界面的宽高</span><br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">603</span>, <span class="hljs-number">680</span>);<br>        <span class="hljs-comment">//设置界面的标题</span><br>        <span class="hljs-built_in">this</span>.setTitle(<span class="hljs-string">&quot;拼图单机版 v1.0&quot;</span>);<br>        <span class="hljs-comment">//设置界面置顶</span><br>        <span class="hljs-built_in">this</span>.setAlwaysOnTop(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//设置界面居中</span><br>        <span class="hljs-built_in">this</span>.setLocationRelativeTo(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//设置关闭模式</span><br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>        <span class="hljs-comment">//取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件</span><br>        <span class="hljs-built_in">this</span>.setLayout(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//让界面显示出来，建议写在最后</span><br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-主函数"><a href="#6-主函数" class="headerlink" title="6. 主函数"></a>6. 主函数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.ui.GameJFrame;<br><span class="hljs-keyword">import</span> com.itheima.ui.LoginJFrame;<br><span class="hljs-keyword">import</span> com.itheima.ui.RegisterJFrame;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//表示程序的启动入口</span><br>        <span class="hljs-comment">//如果我们想要开启一个界面，就创建谁的对象就可以了</span><br>        <span class="hljs-comment">//new LoginJFrame();</span><br>        <span class="hljs-comment">//new RegisterJFrame();</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">GameJFrame</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-菜单制作JMenuBar"><a href="#3-菜单制作JMenuBar" class="headerlink" title="3. 菜单制作JMenuBar"></a>3. 菜单制作<code>JMenuBar</code></h3><h4 id="1-界面效果-1"><a href="#1-界面效果-1" class="headerlink" title="1. 界面效果"></a>1. 界面效果</h4><div style="text-align:center;gap:5px">    <img src="/img/java_pic/27.png" alt="图片描述" style="zoom:60%;"></div>#### 2. 菜单组成<ul><li><p><code>JMenuBar</code>：整个项目的主体菜单</p></li><li><p><code>JMenu</code>：项目一级菜单</p></li><li><p><code>JMenuItem</code>：项目二级菜单</p></li></ul><div style="text-align:center;gap:5px">    <img src="/img/java_pic/28.png" alt="图片描述" style="zoom:60%;"></div>* 注：当添加三级菜单时，菜单主体为`JMenuBar`，一级菜单为`JMenu`，二级菜单为`JMenu`，三级菜单为`JMenuItem`<h4 id="3-JMenuBar菜单"><a href="#3-JMenuBar菜单" class="headerlink" title="3. JMenuBar菜单"></a>3. <code>JMenuBar</code>菜单</h4><h5 id="1-创建整个的主体菜单"><a href="#1-创建整个的主体菜单" class="headerlink" title="1. 创建整个的主体菜单"></a>1. 创建整个的主体菜单</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JMenuBar</span> <span class="hljs-variable">zhuti</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuBar</span>();<br></code></pre></td></tr></table></figure><h5 id="2-创建一级菜单，并加入至主体菜单"><a href="#2-创建一级菜单，并加入至主体菜单" class="headerlink" title="2. 创建一级菜单，并加入至主体菜单"></a>2. 创建一级菜单，并加入至主体菜单</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一级菜单</span><br><span class="hljs-type">JMenu</span> <span class="hljs-variable">yiji</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenu</span>(<span class="hljs-string">&quot;功能&quot;</span>);<br><br><span class="hljs-comment">//将一级菜单加至主体菜单</span><br>zhuti.add(yiji);<br></code></pre></td></tr></table></figure><h5 id="3-创建二级菜单，并加入至一级菜单"><a href="#3-创建二级菜单，并加入至一级菜单" class="headerlink" title="3. 创建二级菜单，并加入至一级菜单"></a>3. 创建二级菜单，并加入至一级菜单</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建二级菜单</span><br><span class="hljs-type">JMenuItem</span> <span class="hljs-variable">erji</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;重新游戏&quot;</span>);<br><br><span class="hljs-comment">//将二级菜单加至一级菜单</span><br>yiji.add(erji);<br></code></pre></td></tr></table></figure><h5 id="4-给整个界面设置主题菜单"><a href="#4-给整个界面设置主题菜单" class="headerlink" title="4. 给整个界面设置主题菜单"></a>4. 给整个界面设置主题菜单</h5><ul><li>此功能必须存在，且一般位于项目最后</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.setJMenuBar(zhuti);<br></code></pre></td></tr></table></figure><h4 id="4-项目代码"><a href="#4-项目代码" class="headerlink" title="4. 项目代码"></a>4. 项目代码</h4><p><code>GameJFrame</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.ui;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><br><span class="hljs-comment">//游戏主界面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameJFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GameJFrame</span><span class="hljs-params">()</span> &#123;<br>        ...<br>        <span class="hljs-comment">//初始化菜单</span><br>        initJMenuBar();<br><br>        <span class="hljs-comment">//让界面显示出来，建议写在最后</span><br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initJMenuBar</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//创建整个的菜单对象</span><br>        <span class="hljs-type">JMenuBar</span> <span class="hljs-variable">jMenuBar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuBar</span>();<br>        <span class="hljs-comment">//创建菜单上面的两个选项的对象  （功能 关于我们）</span><br>        <span class="hljs-type">JMenu</span> <span class="hljs-variable">functionJMenu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenu</span>(<span class="hljs-string">&quot;功能&quot;</span>);<br>        <span class="hljs-type">JMenu</span> <span class="hljs-variable">aboutJMenu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenu</span>(<span class="hljs-string">&quot;关于我们&quot;</span>);<br>        <span class="hljs-comment">//创建选项下面的条目对象</span><br>        <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">replayItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;重新游戏&quot;</span>);<br>        <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">reLoginItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;重新登陆&quot;</span>);<br>        <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">closeItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;关闭游戏&quot;</span>);<br>        <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">accountItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;公众号&quot;</span>);<br><br>        <span class="hljs-comment">//将菜单里面的两个选项添加到菜单当中</span><br>        jMenuBar.add(functionJMenu);<br>        jMenuBar.add(aboutJMenu);<br><br>        <span class="hljs-comment">//将每一个选项下面的条目添加到选项中</span><br>        functionJMenu.add(replayItem);<br>        functionJMenu.add(reLoginItem);<br>        functionJMenu.add(closeItem);<br>        aboutJMenu.add(accountItem);<br><br>        <span class="hljs-comment">//给整个界面设置菜单</span><br>        <span class="hljs-built_in">this</span>.setJMenuBar(jMenuBar);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-添加图片JLable"><a href="#4-添加图片JLable" class="headerlink" title="4. 添加图片JLable"></a>4. 添加图片<code>JLable</code></h3><h4 id="1-界面效果-2"><a href="#1-界面效果-2" class="headerlink" title="1. 界面效果"></a>1. 界面效果</h4><div style="text-align:center;gap:5px">    <img src="/img/java_pic/29.png" alt="图片描述" style="zoom:60%;"></div><ul><li>在上图中，其实是15张小图片。我们在添加图片的时候，要把添加图片的操作重复15次，才能把所有图片都添加到界面当中。</li></ul><h4 id="2-JLable管理容器"><a href="#2-JLable管理容器" class="headerlink" title="2. JLable管理容器*"></a>2. <code>JLable</code>管理容器*</h4><h5 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h5><p>作为管理容器，用于管理图片、文字的类，可以用来设置位置、宽高</p><h5 id="2-创建文字容器"><a href="#2-创建文字容器" class="headerlink" title="2. 创建文字容器"></a>2. 创建文字容器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JLabel</span> <span class="hljs-variable">textJLabel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;这是文本提示&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="3-创建图片容器"><a href="#3-创建图片容器" class="headerlink" title="3. 创建图片容器"></a>3. 创建图片容器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JLabel</span> <span class="hljs-variable">imgJLabel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;url&quot;</span>));<br></code></pre></td></tr></table></figure><h5 id="4-指定图片位置、宽高"><a href="#4-指定图片位置、宽高" class="headerlink" title="4. 指定图片位置、宽高"></a>4. 指定图片位置、宽高</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">imgJLabel.setBounds(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><h5 id="5-将容器添加到界面中"><a href="#5-将容器添加到界面中" class="headerlink" title="5. 将容器添加到界面中"></a>5. 将容器添加到界面中</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.getContentPane().add(imgJLabel);<br></code></pre></td></tr></table></figure><h4 id="3-位置坐标"><a href="#3-位置坐标" class="headerlink" title="3. 位置坐标"></a>3. 位置坐标</h4><div style="text-align:center;gap:5px">    <img src="/img/java_pic/30.png" alt="图片描述" style="zoom:60%;"></div><p>界面左上角的点可以看做是坐标的原点，横向的是X轴，纵向的是Y轴。</p><p>图片的位置其实取决于图片左上角的点，在坐标中的位置。</p><p>如果是（0,0）那么该图片会显示再屏幕的左上角。</p><h4 id="4-代码书写"><a href="#4-代码书写" class="headerlink" title="4. 代码书写"></a>4. 代码书写</h4><p><code>GameJFrame</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.ui;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><br><span class="hljs-comment">//游戏主界面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameJFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GameJFrame</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//初始化图片</span><br>        initImage();<br><br>        <span class="hljs-comment">//让界面显示出来，建议写在最后</span><br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initImage</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//外循环 --- 把内循环重复执行了4次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-comment">//内循环 --- 表示在一行添加4张图片</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>                <span class="hljs-comment">//创建一个JLabel的对象（管理容器）</span><br>                <span class="hljs-type">JLabel</span> <span class="hljs-variable">jLabel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;/Users/zhangchen/Documents/java_project/test01/puzzlegame1/image/animal/animal1/&quot;</span>+number+<span class="hljs-string">&quot;.jpg&quot;</span>));<br>                <span class="hljs-comment">//指定图片位置</span><br>                jLabel.setBounds(<span class="hljs-number">105</span>*j, <span class="hljs-number">105</span>*i, <span class="hljs-number">105</span>,<span class="hljs-number">105</span>);<br>                <span class="hljs-comment">//把管理容器添加到界面中</span><br>                <span class="hljs-built_in">this</span>.getContentPane().add(jLabel);<br>                <span class="hljs-comment">//添加一次之后number需要自增，表示下一次加载后面一张图片</span><br>                number++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-设置事件"><a href="#5-设置事件" class="headerlink" title="5. 设置事件"></a>5. 设置事件</h3><h4 id="1-常见的三种事件监听"><a href="#1-常见的三种事件监听" class="headerlink" title="1. 常见的三种事件监听"></a>1. 常见的三种事件监听</h4><ul><li>键盘监听 KeyListener</li><li>鼠标监听 MouseListener</li><li>动作监听 ActionListener</li></ul><h4 id="2-本类添加事件监听接口"><a href="#2-本类添加事件监听接口" class="headerlink" title="2. 本类添加事件监听接口"></a>2. 本类添加事件监听接口</h4><ul><li>第一步</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActionListener</span>, MouseListener, KeyListener &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第二步</li></ul><div style="text-align:center;gap:5px">    <img src="/img/java_pic/33.png" alt="图片描述" style="zoom:16%;">    <img src="/img/java_pic/34.png" alt="图片描述" style="zoom:16%;">    <img src="/img/java_pic/35.png" alt="图片描述" style="zoom:16%;"></div><h4 id="3-动作监听ActionListener"><a href="#3-动作监听ActionListener" class="headerlink" title="3. 动作监听ActionListener"></a>3. 动作监听<code>ActionListener</code></h4><h5 id="1-方法摘要"><a href="#1-方法摘要" class="headerlink" title="1.方法摘要"></a>1.方法摘要</h5><table><thead><tr><th>Modifier and Type</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void</td><td>actionPerformed(ActionEvent e)</td><td>鼠标左键点击 &#x2F; 按空格</td></tr></tbody></table><ul><li>相当于简化版的鼠标监听功能</li></ul><h5 id="2-JavaBean"><a href="#2-JavaBean" class="headerlink" title="2. JavaBean"></a>2. <code>JavaBean</code></h5><p><mark>鼠标在<code>public class</code>处，按键<code>option+回车</code>，会自动生成下方<code>@Override</code>代码</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActionListener</span> &#123;<br><br>    <span class="hljs-comment">//创建一个按钮对象</span><br>    <span class="hljs-type">JButton</span> <span class="hljs-variable">jtb1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;点我啊&quot;</span>);<br>    <span class="hljs-comment">//创建一个按钮对象</span><br>    <span class="hljs-type">JButton</span> <span class="hljs-variable">jtb2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;再点我啊&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyJFrame</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">JFrame</span> <span class="hljs-variable">jFrame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>();<br>        ...<br><br>        <span class="hljs-comment">//给按钮设置位置和宽高</span><br>        jtb1.setBounds(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>);<br>        <span class="hljs-comment">//给按钮添加事件</span><br>        jtb1.addActionListener(<span class="hljs-built_in">this</span>);<br><br>        <span class="hljs-comment">//给按钮设置位置和宽高</span><br>        jtb2.setBounds(<span class="hljs-number">100</span>,<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>);<br>        jtb2.addActionListener(<span class="hljs-built_in">this</span>);<br><br>        <span class="hljs-comment">//那按钮添加到整个界面当中</span><br>        <span class="hljs-built_in">this</span>.getContentPane().add(jtb1);<br>        <span class="hljs-built_in">this</span>.getContentPane().add(jtb2);<br><br>        <span class="hljs-comment">//让整个界面显示出来</span><br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>        <span class="hljs-comment">//对当前的按钮进行判断</span><br><br>        <span class="hljs-comment">//获取当前被操作的那个按钮对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> e.getSource();<br><br>        <span class="hljs-keyword">if</span>(source == jtb1)&#123;<br>            jtb1.setSize(<span class="hljs-number">200</span>,<span class="hljs-number">200</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(source == jtb2)&#123;<br>            <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>            jtb2.setLocation(r.nextInt(<span class="hljs-number">500</span>),r.nextInt(<span class="hljs-number">500</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-鼠标监听MouseListener"><a href="#4-鼠标监听MouseListener" class="headerlink" title="4. 鼠标监听MouseListener"></a>4. 鼠标监听<code>MouseListener</code></h4><h5 id="1-方法摘要-1"><a href="#1-方法摘要-1" class="headerlink" title="1.方法摘要"></a>1.方法摘要</h5><table><thead><tr><th>Modifier and Type</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void</td><td>mouseClicked(MouseEvent e)</td><td>鼠标单击</td></tr><tr><td>void</td><td>mousePressed(MouseEvent e)</td><td>鼠标按下不松</td></tr><tr><td>void</td><td>mouseReleased(MouseEvent e)</td><td>鼠标松开</td></tr><tr><td>void</td><td>mouseEntered(MouseEvent e)</td><td>鼠标滑入</td></tr><tr><td>void</td><td>mouseExited(MouseEvent e)</td><td>鼠标滑出</td></tr></tbody></table><h5 id="2-JavaBean-1"><a href="#2-JavaBean-1" class="headerlink" title="2. JavaBean"></a>2. <code>JavaBean</code></h5><p><mark>鼠标在<code>public class</code>处，按键<code>option+回车</code>，会自动生成下方<code>@Override</code>代码</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.test;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.event.MouseEvent;<br><span class="hljs-keyword">import</span> java.awt.event.MouseListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MouseListener</span> &#123;<br>    <span class="hljs-comment">// 创建一个点击对象</span><br>    <span class="hljs-type">JButton</span> <span class="hljs-variable">jtb1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;点击&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JFrame</span> <span class="hljs-variable">jFrame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>();<br>        ...<br><br>        <span class="hljs-comment">//设置位置和宽高</span><br>        jtb1.setBounds(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>);<br>        <span class="hljs-comment">//给按钮绑定鼠标事件</span><br>        jtb1.addMouseListener(<span class="hljs-built_in">this</span>);<br><br><br>        <span class="hljs-comment">//把按钮添加到界面当中</span><br>        jFrame.getContentPane().add(jtb1);<br>        jFrame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseClicked</span><span class="hljs-params">(MouseEvent e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;鼠标单击&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mousePressed</span><span class="hljs-params">(MouseEvent e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;鼠标按下不松&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseReleased</span><span class="hljs-params">(MouseEvent e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;鼠标松开&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseEntered</span><span class="hljs-params">(MouseEvent e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;鼠标滑入&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseExited</span><span class="hljs-params">(MouseEvent e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;鼠标滑出&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-键盘监听KeyListener"><a href="#5-键盘监听KeyListener" class="headerlink" title="5. 键盘监听KeyListener"></a>5. 键盘监听<code>KeyListener</code></h4><h5 id="1-方法摘要-2"><a href="#1-方法摘要-2" class="headerlink" title="1.方法摘要"></a>1.方法摘要</h5><table><thead><tr><th>Modifier and Type</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void</td><td>keyPressed(KeyEvent e)</td><td>键盘按下不松手</td></tr><tr><td>void</td><td>keyReleased(KeyEvent e)</td><td>松开键盘按键</td></tr></tbody></table><h5 id="2-JavaBean-2"><a href="#2-JavaBean-2" class="headerlink" title="2. JavaBean"></a>2. <code>JavaBean</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.test;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<br><span class="hljs-keyword">import</span> java.awt.event.KeyListener;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Test02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JFrame</span> <span class="hljs-variable">jFrame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>();<br>        ...<br><br>        <span class="hljs-comment">//给整个窗体添加键盘监听</span><br>        <span class="hljs-comment">//调用者this，本类对象，当前的界面对象，表示我要给整个界面添加监听</span><br>        <span class="hljs-comment">//addKeyListener:表示要给本界面添加键盘监听</span><br>        <span class="hljs-comment">//参数this：当事件被触发之后，会执行本类中的对应代码</span><br>        jFrame.addKeyListener(<span class="hljs-built_in">this</span>);<br><br>        jFrame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br><span class="hljs-comment">//几乎不使用此功能</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">//细节1：如果我们按下一个按键没有松开，那么会重复的去调用keyPressed方法</span><br>    <span class="hljs-comment">//细节2：键盘里面那么多按键，如何进行区分？ - 每一个按键都有一个编号与之对应</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;按下不松&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;按下松开&quot;</span>);<br>        <span class="hljs-comment">// 获取键盘上每一个按键的编号</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> e.getKeyCode();<br>        System.out.println(code);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-美化图片"><a href="#6-美化图片" class="headerlink" title="6. 美化图片"></a>6. 美化图片</h3><h4 id="1-主要工作"><a href="#1-主要工作" class="headerlink" title="1.主要工作"></a>1.主要工作</h4><ol><li><p>将15张小图片移动到界面的中央偏下方</p><p>整体在x、y轴进行偏移</p></li><li><p>添加背景图片</p><p>细节：代码中先加载的图片在在最上面，后加载的图片在下边</p></li><li><p>添加图片的边框</p><p><code>jLabel.setBorder(new BevelBorder(1));</code></p></li><li><p>优化路径</p><p>相对路径：<code>puzzlegame1/image/background.png</code></p><p>绝对路径：<code>/Users/zhangchen/Documents/java_project/test01/puzzlegame1/image/background.png</code></p></li></ol><h4 id="2-JavaBean-3"><a href="#2-JavaBean-3" class="headerlink" title="2. JavaBean"></a>2. <code>JavaBean</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.ui;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> javax.swing.border.BevelBorder;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">//游戏主界面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameJFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br><br>    <span class="hljs-comment">//创建一个二维数组</span><br>    <span class="hljs-comment">//目的：用来管理数据</span><br>    <span class="hljs-comment">//加载图片的时候，会根据二维数组中的数据进行加载</span><br>    <span class="hljs-type">int</span>[][] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GameJFrame</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">//初始化菜单</span><br>        initJMenuBar();<br>        <br>        <span class="hljs-comment">//初始化数据（打乱）</span><br>        initDate();<br><br>        <span class="hljs-comment">//初始化图片</span><br>        initImage();<br><br>        <span class="hljs-comment">//让界面显示出来，建议写在最后</span><br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.定义一个一维数组</span><br>        <span class="hljs-type">int</span>[] tempArr = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>&#125;;<br>        <span class="hljs-comment">//2.打乱数组中的数据的顺序</span><br>        <span class="hljs-comment">//遍历数组，得到每一个元素，拿着每一个元素跟随机索引上的数据进行交换</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempArr.length; i++) &#123;<br>            <span class="hljs-comment">//获取到随机索引</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> r.nextInt(tempArr.length);<br>            <span class="hljs-comment">//拿着遍历到的每一个数据，跟随机索引上的数据进行交换</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> tempArr[i];<br>            tempArr[i] = tempArr[index];<br>            tempArr[index] = temp;<br>        &#125;<br><br>        <span class="hljs-comment">//5.给二维数组添加数据</span><br>        <span class="hljs-comment">//遍历二维数组，给里面的每一个数据赋值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>                data[i][j] = tempArr[index];<br>                index++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//遍历二维数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>                System.out.print(data[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initJMenuBar</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//创建整个的菜单对象</span><br>        <span class="hljs-type">JMenuBar</span> <span class="hljs-variable">jMenuBar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuBar</span>();<br>        <span class="hljs-comment">//创建菜单上面的两个选项的对象  （功能 关于我们）</span><br>        <span class="hljs-type">JMenu</span> <span class="hljs-variable">functionJMenu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenu</span>(<span class="hljs-string">&quot;功能&quot;</span>);<br>        <span class="hljs-type">JMenu</span> <span class="hljs-variable">aboutJMenu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenu</span>(<span class="hljs-string">&quot;关于我们&quot;</span>);<br>        <span class="hljs-comment">//创建选项下面的条目对象</span><br>        <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">replayItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;重新游戏&quot;</span>);<br>        <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">reLoginItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;重新登陆&quot;</span>);<br>        <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">closeItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;关闭游戏&quot;</span>);<br>        <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">accountItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;公众号&quot;</span>);<br><br>        <span class="hljs-comment">//将菜单里面的两个选项添加到菜单当中</span><br>        jMenuBar.add(functionJMenu);<br>        jMenuBar.add(aboutJMenu);<br><br>        <span class="hljs-comment">//将每一个选项下面的条目添加到选项中</span><br>        functionJMenu.add(replayItem);<br>        functionJMenu.add(reLoginItem);<br>        functionJMenu.add(closeItem);<br>        aboutJMenu.add(accountItem);<br><br>        <span class="hljs-comment">//给整个界面设置菜单</span><br>        <span class="hljs-built_in">this</span>.setJMenuBar(jMenuBar);<br>    &#125;<br><br>    <span class="hljs-comment">//初始化图片</span><br>    <span class="hljs-comment">//添加图片的时候，就需要按照二维数组中管理的数据添加图片</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initImage</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//细节：代码中先加载的图片在在最上面，后加载的图片在下边</span><br><br><br>        <span class="hljs-comment">//外循环 --- 把内循环重复执行了4次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-comment">//内循环 --- 表示在一行添加4张图片</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>                <span class="hljs-comment">//获取当前要加载图片的序号</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> data[i][j];<br>                <span class="hljs-comment">//创建一个JLabel的对象（管理容器）</span><br>                <span class="hljs-type">JLabel</span> <span class="hljs-variable">jLabel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;puzzlegame1/image/animal/animal1/&quot;</span>+num+<span class="hljs-string">&quot;.jpg&quot;</span>));<br>                <span class="hljs-comment">//指定图片位置</span><br>                jLabel.setBounds(<span class="hljs-number">105</span>*j+<span class="hljs-number">83</span>, <span class="hljs-number">105</span>*i+<span class="hljs-number">134</span>, <span class="hljs-number">105</span>,<span class="hljs-number">105</span>);<br>                <span class="hljs-comment">//给图片添加边框</span><br>                jLabel.setBorder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BevelBorder</span>(<span class="hljs-number">1</span>));<br>                <span class="hljs-comment">//把管理容器添加到界面中</span><br>                <span class="hljs-built_in">this</span>.getContentPane().add(jLabel);<br>                <span class="hljs-comment">//添加一次之后number需要自增，表示下一次加载后面一张图片</span><br><span class="hljs-comment">//                number++;</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//添加背景图片</span><br>        <span class="hljs-type">JLabel</span> <span class="hljs-variable">background</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;puzzlegame1/image/background.png&quot;</span>));<br>        background.setBounds(<span class="hljs-number">40</span>,<span class="hljs-number">40</span>,<span class="hljs-number">508</span>,<span class="hljs-number">560</span>);<br>        <span class="hljs-comment">//把背景图片添加到界面中</span><br>        <span class="hljs-built_in">this</span>.getContentPane().add(background);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-Main"><a href="#3-Main" class="headerlink" title="3. Main"></a>3. <code>Main</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.ui.GameJFrame;<br><span class="hljs-keyword">import</span> com.itheima.ui.LoginJFrame;<br><span class="hljs-keyword">import</span> com.itheima.ui.RegisterJFrame;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//表示程序的启动入口</span><br>        <span class="hljs-comment">//如果我们想要开启一个界面，就创建谁的对象就可以了</span><br><span class="hljs-comment">//        new LoginJFrame();</span><br><span class="hljs-comment">//        new RegisterJFrame();</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">GameJFrame</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-移动图片"><a href="#7-移动图片" class="headerlink" title="7. 移动图片"></a>7. 移动图片</h3><ol><li>本类实现<code>KeyListener</code>接口，并重写所有抽象方法</li><li>给整个界面添加键盘监听事件</li><li>统计一下空白方块对应的数字0在二维数组中的位置</li><li>在<code>KeyReleased</code>方法当中实现移动的逻辑</li><li>Bug修复：当空白方块在最下方时，无法再次进行上移等</li></ol><h4 id="1-JavaBean"><a href="#1-JavaBean" class="headerlink" title="1.JavaBean"></a>1.<code>JavaBean</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initJFrame</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//设置界面的宽高</span><br>    <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">603</span>, <span class="hljs-number">680</span>);<br>    <span class="hljs-comment">//设置界面的标题</span><br>    <span class="hljs-built_in">this</span>.setTitle(<span class="hljs-string">&quot;拼图单机版 v1.0&quot;</span>);<br>    <span class="hljs-comment">//设置界面置顶</span><br>    <span class="hljs-built_in">this</span>.setAlwaysOnTop(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//设置界面居中</span><br>    <span class="hljs-built_in">this</span>.setLocationRelativeTo(<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//设置关闭模式</span><br>    <span class="hljs-built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    <span class="hljs-comment">//取消默认的居中放置，只有取消类才会按照XY轴的形式添加组件</span><br>    <span class="hljs-built_in">this</span>.setLayout(<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//给整个页面添加，键盘监听事件</span><br>    <span class="hljs-built_in">this</span>.addKeyListener(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//游戏主界面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameJFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span> &#123;<br><br>    <span class="hljs-comment">//创建一个二维数组</span><br>    <span class="hljs-comment">//目的：用来管理数据</span><br>    <span class="hljs-comment">//加载图片的时候，会根据二维数组中的数据进行加载</span><br>    <span class="hljs-type">int</span>[][] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br><br>    <span class="hljs-comment">//记录空白方块在二维数组中的位置</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//初始化图片</span><br>    <span class="hljs-comment">//添加图片的时候，就需要按照二维数组中管理的数据添加图片</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initImage</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 清空原本已经出现的所有图片</span><br>        <span class="hljs-built_in">this</span>.getContentPane().removeAll();<br><br>        <span class="hljs-comment">//细节：代码中先加载的图片在在最上面，后加载的图片在下边</span><br>        <span class="hljs-comment">//外循环 --- 把内循环重复执行了4次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-comment">//内循环 --- 表示在一行添加4张图片</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>                <span class="hljs-comment">//获取当前要加载图片的序号</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> data[i][j];<br>                <span class="hljs-comment">//创建一个JLabel的对象（管理容器）</span><br>                <span class="hljs-type">JLabel</span> <span class="hljs-variable">jLabel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;puzzlegame1/image/animal/animal1/&quot;</span>+num+<span class="hljs-string">&quot;.jpg&quot;</span>));<br>                <span class="hljs-comment">//指定图片位置</span><br>                jLabel.setBounds(<span class="hljs-number">105</span>*j+<span class="hljs-number">83</span>, <span class="hljs-number">105</span>*i+<span class="hljs-number">134</span>, <span class="hljs-number">105</span>,<span class="hljs-number">105</span>);<br>                <span class="hljs-comment">//给图片添加边框</span><br>                jLabel.setBorder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BevelBorder</span>(<span class="hljs-number">1</span>));<br>                <span class="hljs-comment">//把管理容器添加到界面中</span><br>                <span class="hljs-built_in">this</span>.getContentPane().add(jLabel);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//添加背景图片</span><br>        <span class="hljs-type">JLabel</span> <span class="hljs-variable">background</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;puzzlegame1/image/background.png&quot;</span>));<br>        background.setBounds(<span class="hljs-number">40</span>,<span class="hljs-number">40</span>,<span class="hljs-number">508</span>,<span class="hljs-number">560</span>);<br>        <span class="hljs-comment">//把背景图片添加到界面中</span><br>        <span class="hljs-built_in">this</span>.getContentPane().add(background);<br><br>        <span class="hljs-comment">//刷新一下图片</span><br>        <span class="hljs-built_in">this</span>.getContentPane().repaint();<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>    <span class="hljs-comment">// 对上、下、左、右进行判断</span><br>    <span class="hljs-comment">//左：37 ｜ 上：38 ｜ 右：39 ｜ 下：40</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> e.getKeyCode();<br>    System.out.println(<span class="hljs-string">&quot;code,&quot;</span>+code);<br>    <span class="hljs-keyword">if</span> (code == <span class="hljs-number">37</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;向左移动&quot;</span>);<br>        <span class="hljs-keyword">if</span> (y==<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        data[x][y] = data[x][y+<span class="hljs-number">1</span>];<br>        data[x][y+<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        y++;<br>        initImage();<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(code == <span class="hljs-number">38</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;向上移动&quot;</span>);<br>        <span class="hljs-comment">//表示空白方块已经在最下方了，他的相面没有图片可以再移动了</span><br>        <span class="hljs-keyword">if</span> (x==<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 逻辑：把空白方块下方的数字向上移动</span><br>        <span class="hljs-comment">// x，y 表示空白方块</span><br>        <span class="hljs-comment">// x+1，y 表示空白方块下方的数字</span><br><br>        <span class="hljs-comment">// 把空白方块下方的数字赋值给空白方块</span><br>        data[x][y] = data[x+<span class="hljs-number">1</span>][y];<br>        data[x+<span class="hljs-number">1</span>][y] = <span class="hljs-number">0</span>;<br>        x++;<br>        <span class="hljs-comment">//调用方法按照最新的数字进行加载</span><br>        initImage();<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(code == <span class="hljs-number">39</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;向右移动&quot;</span>);<br>        <span class="hljs-keyword">if</span> (y==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        data[x][y] = data[x][y-<span class="hljs-number">1</span>];<br>        data[x][y-<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        y--;<br>        <span class="hljs-comment">//调用方法按照最新的数字进行加载</span><br>        initImage();<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(code == <span class="hljs-number">40</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;向下移动&quot;</span>);<br>        <span class="hljs-keyword">if</span> (x==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        data[x][y] = data[x-<span class="hljs-number">1</span>][y];<br>        data[x-<span class="hljs-number">1</span>][y] = <span class="hljs-number">0</span>;<br>        x--;<br>        <span class="hljs-comment">//调用方法按照最新的数字进行加载</span><br>        initImage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-查看完整图片"><a href="#8-查看完整图片" class="headerlink" title="8. 查看完整图片"></a>8. 查看完整图片</h3><ul><li>当按住A不松时，显示完整图片</li><li>松开A显示随机打乱的图片</li></ul><h4 id="1-JavaBean-1"><a href="#1-JavaBean-1" class="headerlink" title="1.JavaBean"></a>1.<code>JavaBean</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initJFrame</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//设置界面的宽高</span><br>    <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">603</span>, <span class="hljs-number">680</span>);<br>    <span class="hljs-comment">//设置界面的标题</span><br>    <span class="hljs-built_in">this</span>.setTitle(<span class="hljs-string">&quot;拼图单机版 v1.0&quot;</span>);<br>    <span class="hljs-comment">//设置界面置顶</span><br>    <span class="hljs-built_in">this</span>.setAlwaysOnTop(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//设置界面居中</span><br>    <span class="hljs-built_in">this</span>.setLocationRelativeTo(<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//设置关闭模式</span><br>    <span class="hljs-built_in">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    <span class="hljs-comment">//取消默认的居中放置，只有取消类才会按照XY轴的形式添加组件</span><br>    <span class="hljs-built_in">this</span>.setLayout(<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//给整个页面添加，键盘监听事件</span><br>    <span class="hljs-built_in">this</span>.addKeyListener(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> e.getKeyCode();<br>    <span class="hljs-keyword">if</span> (code==<span class="hljs-number">65</span>)&#123;<br>        <span class="hljs-comment">//把界面所有的图片全部删除</span><br>        <span class="hljs-built_in">this</span>.getContentPane().removeAll();<br>        <span class="hljs-comment">//加载第一张完整的图片</span><br>        <span class="hljs-type">JLabel</span> <span class="hljs-variable">all</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(path+<span class="hljs-string">&quot;/all.jpg&quot;</span>));<br>        all.setBounds(<span class="hljs-number">83</span>, <span class="hljs-number">134</span>, <span class="hljs-number">420</span>, <span class="hljs-number">420</span>);<br>        <span class="hljs-built_in">this</span>.getContentPane().add(all);<br>        <span class="hljs-comment">//加载背景界面</span><br>        <span class="hljs-comment">//添加背景图片</span><br>        <span class="hljs-type">JLabel</span> <span class="hljs-variable">background</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;puzzlegame1/image/background.png&quot;</span>));<br>        background.setBounds(<span class="hljs-number">40</span>,<span class="hljs-number">40</span>,<span class="hljs-number">508</span>,<span class="hljs-number">560</span>);<br>        <span class="hljs-comment">//把背景图片添加到界面中</span><br>        <span class="hljs-built_in">this</span>.getContentPane().add(background);<br><br>        <span class="hljs-comment">//刷新一下图片</span><br>        <span class="hljs-built_in">this</span>.getContentPane().repaint();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> e.getKeyCode();<br>    System.out.println(<span class="hljs-string">&quot;code,&quot;</span>+code);<br>    <span class="hljs-keyword">if</span> (..)&#123;<br>        ...<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(code==<span class="hljs-number">65</span>)&#123;<br>        initImage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-作弊码"><a href="#9-作弊码" class="headerlink" title="9. 作弊码"></a>9. 作弊码</h3><ol><li><code>JavaBean</code></li></ol><p>按一下W直接胜利</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> e.getKeyCode();<br>    System.out.println(<span class="hljs-string">&quot;code,&quot;</span>+code);<br>    <span class="hljs-keyword">if</span> (..)&#123;<br>        ...<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(code==<span class="hljs-number">87</span>)&#123;<br>        <span class="hljs-comment">//作弊码-w键</span><br>        data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;<br>                &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,<br>                &#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;,<br>                &#123;<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>&#125;,<br>                &#123;<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>&#125;,<br>        &#125;;<br>        initImage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-判断胜利"><a href="#10-判断胜利" class="headerlink" title="10. 判断胜利"></a>10. 判断胜利</h3><ol><li><code>JavaBean</code></li></ol><p>判断二维数组中的数字是否按照顺序进行排列，如果排列正确，则显示胜利的图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义正确数组，用于胜利判断</span><br><span class="hljs-type">int</span> [][]win =&#123;<br>    &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,<br>    &#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;,<br>    &#123;<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>&#125;,<br>    &#123;<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化图片</span><br>    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initImage</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 清空原本已经出现的所有图片</span><br>    <span class="hljs-built_in">this</span>.getContentPane().removeAll();<br>    <span class="hljs-keyword">if</span>(victory())&#123;<br>        <span class="hljs-comment">//显示胜利图标</span><br>        <span class="hljs-type">JLabel</span> <span class="hljs-variable">winLable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;/Users/zhangchen/Documents/java_project/test01/puzzlegame1/image/win.png&quot;</span>));<br>        winLable.setBounds(<span class="hljs-number">203</span>,<span class="hljs-number">283</span>,<span class="hljs-number">197</span>,<span class="hljs-number">73</span>);<br>        <span class="hljs-built_in">this</span>.getContentPane().add(winLable);<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断data数组中的数据是否跟win数组中相同</span><br><span class="hljs-comment">//如果全部相同，返回true，否则返回false</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">victory</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[i].length; j++) &#123;<br>            <span class="hljs-keyword">if</span>(data[i][j] != win[i][j])&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-记步功能"><a href="#11-记步功能" class="headerlink" title="11.记步功能"></a>11.记步功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义变量，用来统计步数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initImage</span><span class="hljs-params">()</span>&#123;<br>    ...<br>    <span class="hljs-comment">// 添加管理容器至图像中</span><br>    <span class="hljs-type">JLabel</span> <span class="hljs-variable">stepCount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;步数：&quot;</span> + step);<br>    stepCount.setBounds(<span class="hljs-number">50</span>,<span class="hljs-number">30</span>,<span class="hljs-number">100</span>,<span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">this</span>.getContentPane().add(stepCount);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>    <span class="hljs-comment">// 每次移动图片都增加步数</span><br>    <span class="hljs-keyword">if</span> (code == <span class="hljs-number">37</span>)&#123;<br>        ..<br>        step++;<br>        initImage();<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(code == <span class="hljs-number">38</span>)&#123;<br>        ..<br>        step++;<br>        initImage();<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(code == <span class="hljs-number">39</span>)&#123;<br>        ..<br>        step++;<br>        initImage();<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(code == <span class="hljs-number">40</span>)&#123;<br>        ..<br>        step++;<br>        initImage();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="12-其他功能添加"><a href="#12-其他功能添加" class="headerlink" title="12. 其他功能添加"></a>12. 其他功能添加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//游戏主界面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameJFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span>, ActionListener &#123;<br>...<br>    <span class="hljs-comment">//创建选项下面的条目对象</span><br>    <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">replayItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;重新游戏&quot;</span>);<br>    <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">reLoginItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;重新登陆&quot;</span>);<br>    <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">closeItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;关闭游戏&quot;</span>);<br>    <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">accountItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;公众号&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initJMenuBar</span><span class="hljs-params">()</span> &#123;<br>    ...<br><span class="hljs-comment">//给条目绑定点击事件</span><br>    replayItem.addActionListener(<span class="hljs-built_in">this</span>);<br>    reLoginItem.addActionListener(<span class="hljs-built_in">this</span>);<br>    closeItem.addActionListener(<span class="hljs-built_in">this</span>);<br>    accountItem.addActionListener(<span class="hljs-built_in">this</span>);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br><span class="hljs-comment">// 获取当前被点击的条目对象</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> e.getSource();<br>    <span class="hljs-comment">// 判断</span><br>    <span class="hljs-keyword">if</span>(obj == replayItem)&#123;<br>        System.out.println(<span class="hljs-string">&quot;重新游戏&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj == reLoginItem) &#123;<br>        System.out.println(<span class="hljs-string">&quot;重新登陆&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj == closeItem) &#123;<br>        System.out.println(<span class="hljs-string">&quot;关闭游戏&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj == accountItem) &#123;<br>        System.out.println(<span class="hljs-string">&quot;公众号&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="九、Tips"><a href="#九、Tips" class="headerlink" title="九、Tips"></a><font color=#1E90FF>九、Tips</font></h1><h2 id="1-创建一个随机数"><a href="#1-创建一个随机数" class="headerlink" title="1. 创建一个随机数"></a><font color=#1E90FF>1. 创建一个随机数</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">UUID</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID();<br>System.out.println(uuid);    <span class="hljs-comment">// d589f5f0-7205-4794-ba88-f7b3d28bf1b2</span><br></code></pre></td></tr></table></figure><h2 id="2-所选表达式具有void类型"><a href="#2-所选表达式具有void类型" class="headerlink" title="2. 所选表达式具有void类型"></a><font color=#1E90FF>2. 所选表达式具有void类型</font></h2><div style="text-align:center;gap:5px">    <img src="/img/java_pic/42.png" alt="图片描述" style="zoom:50%;"></div><ul><li>当通过<code>option + commend + v</code>快速生成表达式左边的时候，出现提示所选表达式具有<code>void</code>类型时</li><li>说明该方法没有返回值，无法生成左边，函数本身已经发生了改变</li></ul><h2 id="3-打印内容为地址值"><a href="#3-打印内容为地址值" class="headerlink" title="3. 打印内容为地址值"></a><font color=#1E90FF>3. 打印内容为地址值</font></h2><div style="text-align:center;gap:5px">    <img src="/img/java_pic/43.png" alt="图片描述" style="zoom:30%;"></div><ul><li>当打印的内容为地址值时，可以使用<code>Arrays.toString</code>打印具体内容</li></ul><h2 id="4-结果保留两位小数"><a href="#4-结果保留两位小数" class="headerlink" title="4. 结果保留两位小数"></a><font color=#1E90FF>4. 结果保留两位小数</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.DecimalFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">qualityScore</span> <span class="hljs-operator">=</span> <span class="hljs-number">85.6789</span>;<br><br>        <span class="hljs-comment">// 创建一个DecimalFormat实例，指定格式为保留两位小数</span><br>        <span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;#.00&quot;</span>);<br><br>        <span class="hljs-comment">// 格式化qualityScore</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">formattedQualityScore</span> <span class="hljs-operator">=</span> df.format(qualityScore);<br><br>        System.out.println(<span class="hljs-string">&quot;Quality Score: &quot;</span> + formattedQualityScore);   <span class="hljs-comment">// 85.68</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语言</tag>
      
      <tag>开发</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown</title>
    <link href="/2023/11/30/Markdown/"/>
    <url>/2023/11/30/Markdown/</url>
    
    <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><ol><li>软件准备<br> 推荐使用Typora软件</li><li>为什么要用markdown<br> 轻量级、易读、易写的标记语言</li><li>文件格式：.md</li><li>学习链接<br> <a href="https://blog.csdn.net/TeFuirnever">https://blog.csdn.net/TeFuirnever</a><br> <a href="https://blog.csdn.net/qq_40818172">https://blog.csdn.net/qq_40818172</a></li><li>IDE：建议安装Typora编辑.md文件<br> <a href="https://www.typora.io/">https://www.typora.io/</a></li></ol><h1 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h1><h2 id="1-标题-commend"><a href="#1-标题-commend" class="headerlink" title="1. 标题 commend"></a>1. 标题 <code>commend</code></h2><p><code># 标题名</code> 或  <code>commend + 数字</code></p><h2 id="2-分割线-—"><a href="#2-分割线-—" class="headerlink" title="2. 分割线 —"></a>2. 分割线 —</h2><p><code>—— 或 *** 或 ---</code></p><h2 id="3-斜体"><a href="#3-斜体" class="headerlink" title="3. 斜体 *"></a>3. 斜体 *</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 斜体文本 <span class="hljs-emphasis">*</span><br></code></pre></td></tr></table></figure><h2 id="4-字体加粗"><a href="#4-字体加粗" class="headerlink" title="4. 字体加粗 &lt;strong&gt; **"></a>4. 字体加粗 <code>&lt;strong&gt; **</code></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span></span> 粗体文本 <span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span><br>或<br>** 粗体文本 <span class="hljs-strong">**</span><br></code></pre></td></tr></table></figure><h2 id="5-大-小字体"><a href="#5-大-小字体" class="headerlink" title="5. 大&amp;小字体 &lt;big&gt;&amp;&lt;small&gt;"></a>5. 大&amp;小字体 <code>&lt;big&gt;&amp;&lt;small&gt;</code></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">big</span>&gt;</span></span>大字体<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">big</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span></span>小字体<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">samll</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="6-字体样式和颜色"><a href="#6-字体样式和颜色" class="headerlink" title="6. 字体样式和颜色 &lt;font&gt;"></a>6. 字体样式和颜色 <code>&lt;font&gt;</code></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;courier New&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">#1E90FF</span>&gt;</span></span>这是道奇蓝色courier New字体<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="7-区块"><a href="#7-区块" class="headerlink" title="7. 区块 &gt;"></a>7. 区块 &gt;</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&gt; 区块<span class="hljs-number">1</span><br><span class="hljs-meta prompt_">&gt;&gt;</span> 区块<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8. 代码块 &#96;&#96;"></a>8. 代码块 &#96;&#96;</h2><ol><li>单行代码：</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">`代码`</span><br></code></pre></td></tr></table></figure><ol start="2"><li>多行代码：</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">``</span><span class="hljs-string">`代码块`</span><span class="hljs-string">``</span><br></code></pre></td></tr></table></figure><div style="text-align:center">    <img src="/img/markdown_pic/4.jpg" alt="图片描述" style="zoom:60%"></div><h2 id="9-超链接-压缩包"><a href="#9-超链接-压缩包" class="headerlink" title="9. 超链接&#x2F;压缩包 []()"></a>9. 超链接&#x2F;压缩包 <code>[]()</code></h2><p>在Markdown中插入链接，以便读者可以下载压缩包，可以按照以下格式插入链接：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-name">下载压缩包</span>](<span class="hljs-name">/downloads/your_file.zip</span>)<br></code></pre></td></tr></table></figure><ol><li>在博客根目录下创建一个名为 <code>download.md</code> 的文件</li><li>将 <code>your_file.zip</code> 替换为你要下载的文件的文件名</li></ol><h2 id="10-插入图片"><a href="#10-插入图片" class="headerlink" title="10. 插入图片"></a>10. 插入图片</h2><h3 id="1-插入单张图片"><a href="#1-插入单张图片" class="headerlink" title="1. 插入单张图片"></a>1. 插入单张图片</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/img/markdown_pic/4.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片描述&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;zoom:60%&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-插入多张图片"><a href="#2-插入多张图片" class="headerlink" title="2. 插入多张图片"></a>2. 插入多张图片</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/img/markdown_pic/3.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片描述&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;zoom:60%&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/img/markdown_pic/4.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片描述&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;zoom:60%&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center;display:flex;gap:5px">    <img src="/img/markdown_pic/5.jpg" alt="图片描述"></div><h2 id="11-标记文本-黄色"><a href="#11-标记文本-黄色" class="headerlink" title="11. 标记文本-黄色 &lt;mark&gt;"></a>11. 标记文本-黄色 <code>&lt;mark&gt;</code></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span></span>要标黄的文字<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="12-删除文本"><a href="#12-删除文本" class="headerlink" title="12. 删除文本 &lt;del&gt; ~"></a>12. 删除文本 <code>&lt;del&gt; ~</code></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span></span>要删除的文字<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span></span><br>或<br><span class="hljs-code">`~~要删除的文字~~`</span><br></code></pre></td></tr></table></figure><h2 id="13-表格"><a href="#13-表格" class="headerlink" title="13. 表格 |"></a>13. 表格 <code>|</code></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 列1 | 列2 |<br></code></pre></td></tr></table></figure><h2 id="14-换行"><a href="#14-换行" class="headerlink" title="14. 换行 &lt;br&gt;"></a>14. 换行 <code>&lt;br&gt;</code></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 列1 | 列2 |<br>| --- | --- |<br>| 行1单元格1<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span>行1单元格2 | 行1单元格3<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span>行1单元格4 |<br>| 行2单元格1<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span>行2单元格2 | 行2单元格3<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span>行2单元格4 |<br></code></pre></td></tr></table></figure><h2 id="15-数字上标和下标"><a href="#15-数字上标和下标" class="headerlink" title="15. 数字上标和下标 &lt;sup&gt;&amp;&lt;sub&gt;"></a>15. 数字上标和下标 <code>&lt;sup&gt;&amp;&lt;sub&gt;</code></h2><p><code>2n&lt;sup&gt;2&lt;/sup&gt;</code>   —   2n<sup>2</sup></p><p><code>2log&lt;sub&gt;n&lt;/sub&gt;</code>   —   2log<sub>n</sub></p><h1 id="三、tips"><a href="#三、tips" class="headerlink" title="三、tips"></a>三、tips</h1><h2 id="1-Typora中的标题标签有方框"><a href="#1-Typora中的标题标签有方框" class="headerlink" title="1. Typora中的标题标签有方框"></a>1. Typora中的标题标签有方框</h2><p>在输入标题时，使用了特殊字符或者空格，导致Typora无法正确解析该标题</p><h2 id="2-Typora图片重新加载"><a href="#2-Typora图片重新加载" class="headerlink" title="2. Typora图片重新加载"></a>2. Typora图片重新加载</h2><ul><li><p>在文件夹中修改图片名称后，Typora未自动修改为正确路径图片</p></li><li><p>选择Typora - 格式 - 图像 - 重新加载所有图片</p></li></ul><div style="text-align:center;gap:5px">    <img src="/img/markdown_pic/6.png" alt="图片描述" style="zoom:60%;"></div><h2 id="3-博客标题设计"><a href="#3-博客标题设计" class="headerlink" title="3. 博客标题设计"></a>3. 博客标题设计</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">big</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">#1E90FF</span>&gt;</span></span>这是一个加粗变大的蓝色小标题<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">big</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong><big><font color=#1E90FF>这是一个加粗变大的蓝色小标题</font></big></strong></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>工具</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互联网黑话</title>
    <link href="/2023/11/30/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E8%AF%9D/"/>
    <url>/2023/11/30/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E8%AF%9D/</url>
    
    <content type="html"><![CDATA[<h2 id="一、软件测试"><a href="#一、软件测试" class="headerlink" title="一、软件测试"></a>一、软件测试</h2><ol><li><p><code>crud</code>：一种常见的计算机编程术语，它代表了四个基本的数据操作：创建（Create）、读取（Read）、更新（Update）和删除（Delete）</p></li><li><p><code>beta用户</code>：内测用户</p></li><li><p><code>FYI</code>：For Your Information</p></li><li><p><code>QA</code>：Quality Assurance的缩写，中文翻译为质量保证。在软件开发领域，QA通常指的是质量保证工程师，也称为测试工程师或测试人员。</p></li><li><p><code>TE</code>：test enginer，测试工程师</p></li><li><p><code>FO</code>：feature owner</p></li><li><p><code>ODM</code>：Original Design Manufacture，原始设计制造商。ODM业务模式能够为品牌厂商提供从产品研发、物料采购、生产制造到物流管控的 “一条龙” 服务。</p></li><li><p><code>ODC</code>：Outsourced Development Center，合作伙伴。</p></li><li><p><code>FDE</code>：测试功能设计师</p></li><li><p><code>CCB</code>：ODM漏测问题处理策略</p></li><li><p><code>gap</code>：差距、缺口  </p></li><li><p><code>冒烟测试</code>：</p><div style="text-align:center;gap:5px">    <img src="/img/Internet_slang_pic/2.png" alt="图片描述"></div></li><li><p><code>SOP</code>：”Standard Operating Procedure”，意思是标准操作规程，是一种详细描述特定任务或过程的文件，旨在确保在执行任务或过程时遵循一致的方法和步骤。SOP通常用于组织、公司、政府机构等组织中，以确保工作的一致性和质量</p></li><li><p><code>TWS耳机</code>：<code>True Wireless Stereo耳机</code> - 无线耳机</p></li><li><p>回归测试：是软件测试中的一种测试方法，用于验证在进行软件修改或更新后，原有的功能是否仍然能够正常工作，确保修改或更新不会对原有的功能产生负面影响。</p></li><li><p>功耗DOU：基于设备功率的损耗，以及电池容量，计算设备可使用的天数（days-of-ues）</p></li><li><p><code>Wiki</code>：全称是维基百科（Wikipedia），是一种基于Web的协作软件，允许多个用户在网页上共同创作和编辑内容。Wiki的特点是开放性、易于编辑和协作，使得它成为了一种非常流行的知识共享和协作工具。</p></li><li><p>SKU：是“Stock Keeping Unit”的缩写，中文意思是“库存量单位”。在零售业中，SKU通常是指一种特定的产品或商品，每个SKU都有一个唯一的编码，用于跟踪库存和销售。SKU通常包括产品的名称、颜色、尺寸、材料等信息，以便更好地管理库存和销售。</p></li><li><p>黑盒测试：将整个程序当做黑色的盒子，看不到里面做了什么事，只能通过输入输出看到测试结果</p></li><li><p>灰盒测试：常用于接口测试，不仅关注输入、输出的正确性，同时也关注程序内部的情况</p></li><li><p>白盒测试：也称为白盒测试或者驱动测试，是针对被测单元内部是如何进行工作的测试</p></li><li><p>强弱依赖：异常发生时，不影响核心业务流程、不影响系统可用性的依赖称作弱依赖，反之为强依赖</p><ol><li><p>强依赖：如果商品详情页对下游依赖是强依赖，例如<strong>当下游依赖库存、优惠、物流出现故障的时候，将导致业务流程无法推进</strong>，会出现类似如下的说明，严重影响用户体验。</p><div style="text-align:center;gap:5px">    <img src="/img/Internet_slang_pic/3.png" alt="图片描述"></div></li><li><p><strong>弱依赖：</strong>如果商品详情页对下游依赖是弱依赖，例如<strong>当下游依赖评价、店铺等系统出现故障的时候，将导致商品详情页部分内容加载不全</strong>，出现如下图的情况，<strong>但核心业务流程仍可继续推进</strong>，用户体验并未受到太多影响。</p><div style="text-align:center;gap:5px">    <img src="/img/Internet_slang_pic/4.png" alt="图片描述"></div></li></ol></li><li><p>UI &#x2F; UE</p><p>UI：（User Interface）<strong>用户界面</strong>，指的是用户与系统进行交互的界面</p><p>UE：（User Experience）<strong>用户体验</strong>，指的是用户在使用产品或服务过程中所体验到的整体感受</p></li></ol><h2 id="二、广告投放"><a href="#二、广告投放" class="headerlink" title="二、广告投放"></a>二、广告投放</h2><table><thead><tr><th>英文缩写</th><th>英文全称</th><th>中文</th><th>使用场景</th></tr></thead><tbody><tr><td><code>CPT</code></td><td><code>Cost Per Time</code></td><td>按时间计费</td><td>竞价一般用的比较少，使用于品牌采买</td></tr><tr><td><code>CPM</code></td><td><code>Cost Per Mille</code></td><td>每千人展示成本</td><td>CPM&#x3D;总消费&#x2F;曝光量*1000，品牌采买较多</td></tr><tr><td><code>CPC</code></td><td><code>Cost Per Click</code></td><td>按点击计费</td><td></td></tr><tr><td><code>CPD</code></td><td><code>Cost Per Download</code></td><td>按下载收费</td><td>常见于app类投放，在应用商店、积分墙、流量联盟比较常见</td></tr><tr><td><code>CPS</code></td><td><code>Cost Per Sales</code></td><td>按销售收费</td><td>佣金常见，销售额1000，CPS3%，广告费30</td></tr><tr><td><code>CPA</code></td><td><code>Cost Per Action</code></td><td>按行为收费</td><td>a代表很多，下载，注册，付费，按具体使用环境</td></tr><tr><td><code>oCPX</code></td><td><code>Optimized Cost Per x</code></td><td>优化x付费（智能优化）</td><td>本质还是按照cpm付费，但是系统会自动优化点击转换率，以结算方式的选择优化</td></tr></tbody></table><ol><li><code>mapi</code>：MAPI（Marketing API）是一套广告投放平台功能的接口服务，客户可接入 Marketing API，将自有平台与快手广告投放平台整合打通，并且实现广告投放过程中的各项功能</li><li>泳道：实际开发测试中存在这样的场景，假如某个改坏了开播接口，一旦开播就报错，而公司内大量测试都依赖开播能力，如果是单一的环境，必须等待该 bug 修复后才能继续工作，工作效率大打折扣。因此测试环境的设计必须保证多个服务的改动互不干扰，保障主干道环境的稳定性，业界的通常做法是每个需求有单独的“需求环境”或“联调环境”，在快手，是通过泳道机制实现的，因此又叫“泳道环境”</li></ol>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>黑话</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电源测试方法</title>
    <link href="/2023/11/30/%E5%85%85%E7%94%B5%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/11/30/%E5%85%85%E7%94%B5%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、DL24"><a href="#一、DL24" class="headerlink" title="一、DL24"></a>一、DL24</h1><h2 id="1-工具介绍"><a href="#1-工具介绍" class="headerlink" title="1. 工具介绍"></a>1. 工具介绍</h2><ul><li>DL24是一种电池放电测试设备，可以模拟电池在实际使用中的放电过程，测试电池的性能、电压、电流、容量等参数。</li><li>此工具可用于测试各种类型的电池，包括锂离子电池、镍氢电池、铅酸电池等，广泛应用于电池制造、电池测试、电池研究等领域。</li><li>此工具具有高精度、高可靠性和易于使用的特点，可以通过电脑或移动设备进行控制和监测，还可以生成详细的测试报告和数据分析。</li></ul><div style="text-align:center;gap:5px">    <img src="/img/charge_test_pic/2.jpg" alt="图片描述" style="zoom:40%;"></div><h2 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h2><ol><li>DL24配置</li></ol><ul><li><p>注：此文档使用二线制方法</p><ol><li><p>A+和V+短接，下称”DL24正极”</p></li><li><p>A-和V-短接，下称”DL24负极”</p></li></ol></li></ul><div style="text-align:center;gap:5px">    <img src="/img/charge_test_pic/8.jpg" alt="图片描述" style="zoom:80%;"></div>3. 设备连接<div style="text-align:center;gap:5px">    <img src="/img/charge_test_pic/9.jpg" alt="图片描述" style="zoom:80%;"></div>4. 工具使用   1. 连接完成后点击ON/OFF键开启耗电。<h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h2><ol><li>放电时要控制电流小于0.1A，防止耳机被烧坏。</li><li>风扇仅在插头第一次连接电源时会转动，其他时间不会转动</li></ol><h1 id="二、-Power-Z"><a href="#二、-Power-Z" class="headerlink" title="二、 Power-Z"></a>二、 Power-Z</h1><h2 id="1-工具介绍-1"><a href="#1-工具介绍-1" class="headerlink" title="1. 工具介绍"></a>1. 工具介绍</h2><ul><li>Power-Z是一款结合了硬件检测的软件工具，主要用于电源测试。它可以测试电源的输出电压、电流、功率、效率、温度等参数。</li><li>在软件测试中Power-Z仅用于有关充电时间的测试</li><li>通过生成的充放电曲线图，用户可以直观了解电源和硬件的实际性能表现。</li></ul><h2 id="2-使用方法-1"><a href="#2-使用方法-1" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h2><ol><li>软件准备</li></ol><p><a href="/download/charge_test_download/POWER-Z.zip">下载软件压缩包</a></p><ol start="2"><li><p>设备连接</p><ol><li>此方法记录的是输入耳机中的电量</li></ol><div style="text-align:center;gap:5px">    <img src="/img/charge_test_pic/10.jpg" alt="图片描述" style="zoom:80%;"></div><ol start="2"><li>此方法记录的是充电头输出的电量</li></ol><div style="text-align:center;gap:5px">    <img src="/img/charge_test_pic/11.jpg" alt="图片描述" style="zoom:80%;"></div><ol start="3"><li><p>两种方法数值差不多，仅在Power-Z软件中的电流有“-&gt;”或“&lt;-”的不同，代表电流方向。</p></li><li><p>Power-Z直接插在充电头上更好，距离机器远，发热少。</p></li></ol></li><li><p>设备使用</p></li></ol><div style="text-align:center;gap:5px">    <img src="/img/charge_test_pic/12.jpg" alt="图片描述" style="zoom:80%;"></div><h2 id="3-注意事项-1"><a href="#3-注意事项-1" class="headerlink" title="3.注意事项"></a>3.注意事项</h2><ol><li>在充电的一瞬间，电压会突然下降（握手原则），如下图。</li></ol><div style="text-align:center;gap:5px">    <img src="/img/charge_test_pic/5.jpg" alt="图片描述" style="zoom:25%;"></div><ol start="2"><li>一段时间后电流逐渐上升，达到稳定若充电发热严重，电流会下降一段以保护产品，如下图。</li></ol><div style="text-align:center;gap:5px">    <img src="/img/charge_test_pic/6.jpg" alt="图片描述" style="zoom:25%;"></div><ol start="3"><li>有线充电会非常平稳，如下图。</li></ol><div style="text-align:center;gap:5px">    <img src="/img/charge_test_pic/7.jpg" alt="图片描述" style="zoom:25%;"></div><h1 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h1><ol><li>出场首次：船运模式</li><li>出场非首次：恢复出厂</li><li>软重启：恢复出场设置</li><li>硬重启：删除一切记录，需要时间恢复，期间无法连接蓝牙，重新连接需要的时间非常长。</li><li>Power off状态：低电关机，开关盒之后点击蓝牙设备连接，手机端无法回连</li><li>domant状态：蓝牙耳机休眠，自动断开，但点击连接后会回连</li></ol>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
      <tag>电源测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>办公快捷键汇总</title>
    <link href="/2023/11/30/%E5%8A%9E%E5%85%AC%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/"/>
    <url>/2023/11/30/%E5%8A%9E%E5%85%AC%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Excel-飞书表格"><a href="#1-Excel-飞书表格" class="headerlink" title="1. Excel&#x2F;飞书表格"></a>1. Excel&#x2F;飞书表格</h2><h3 id="1-跨表格计算方法"><a href="#1-跨表格计算方法" class="headerlink" title="1. 跨表格计算方法"></a>1. 跨表格计算方法</h3><ol><li>‘表格名称’!元素问题</li><li>注：以上所有标点符号需使用英文符号</li><li>例：计算’时延’P40到P80的数据平均值<ol><li>&#x3D;AVERAGE(‘时延’!P40:P80)</li></ol></li></ol><div style="text-align:center;gap:5px">    <img src="/img/office_software_skills_pic/2.png" alt="图片描述"></div><h3 id="2-清除表格中的线"><a href="#2-清除表格中的线" class="headerlink" title="2. 清除表格中的线"></a>2. 清除表格中的线</h3><div style="text-align:center;gap:5px">    <img src="/img/office_software_skills_pic/3.png" alt="图片描述"></div><h2 id="2-Outlook"><a href="#2-Outlook" class="headerlink" title="2. Outlook"></a>2. Outlook</h2><h3 id="1-outlook数据在单元格中上下居中"><a href="#1-outlook数据在单元格中上下居中" class="headerlink" title="1. outlook数据在单元格中上下居中"></a>1. outlook数据在单元格中上下居中</h3><div style="text-align:center;gap:5px">    <img src="/img/office_software_skills_pic/4.png" alt="图片描述" style="zoom:45%;">    <img src="/img/office_software_skills_pic/5.png" alt="图片描述" style="zoom:45%;"></div><h2 id="3-电脑快捷键"><a href="#3-电脑快捷键" class="headerlink" title="3. 电脑快捷键"></a>3. 电脑快捷键</h2><h3 id="1-MacOS"><a href="#1-MacOS" class="headerlink" title="1. MacOS"></a>1. MacOS</h3><ol><li>撤销：<code>command + z</code></li><li>撤销恢复：<code>command + shift + z</code></li><li>电脑后台界面切换：<code>command + Tab</code></li><li>开启浏览器无痕模式：<code>command + shift + n</code></li><li>网页页面导航条消失：<code>commend + shift + f</code></li></ol><p>使用前后：</p><div style="text-align:center;gap:5px">    <img src="/img/office_software_skills_pic/6.png" alt="图片描述" style="zoom:13%;">    <img src="/img/office_software_skills_pic/7.png" alt="图片描述" style="zoom:13%;"></div><h3 id="2-windows"><a href="#2-windows" class="headerlink" title="2. windows"></a>2. windows</h3><ol><li>撤销：<code>ctrl + z</code></li><li>撤销恢复：<code>ctrl + y</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>办公软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>功耗测试方法</title>
    <link href="/2023/11/30/%E5%8A%9F%E8%80%97%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/11/30/%E5%8A%9F%E8%80%97%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、耳机功耗测试"><a href="#一、耳机功耗测试" class="headerlink" title="一、耳机功耗测试"></a>一、耳机功耗测试</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><h3 id="1-相关知识"><a href="#1-相关知识" class="headerlink" title="1. 相关知识"></a>1. 相关知识</h3><p>HV-Power-Monitor 用来供给飞线耳机电源，<br>其中耳机、耳机盒需要3.8V，手表、手机、手环需要3.85V</p><h3 id="2-电脑软件准备"><a href="#2-电脑软件准备" class="headerlink" title="2. 电脑软件准备"></a>2. 电脑软件准备</h3><p>第一次进行功耗测试</p><ol><li><p>下载PowerTool，压缩包所占内存较大，当前存储于本地电脑中</p></li><li><p>右键此电脑-管理-设备管理器-系统设备-Inter(R) power Engine Plug-in-右键更新驱动程序。</p><div style="text-align:center;display:flex;gap:5px"> <img src="/img/power_test_pic/2.jpg" alt="图片描述"></div></li></ol><h3 id="3-手机准备"><a href="#3-手机准备" class="headerlink" title="3. 手机准备"></a>3. 手机准备</h3><h4 id="1-手机刷机"><a href="#1-手机刷机" class="headerlink" title="1. 手机刷机"></a>1. 手机刷机</h4><h4 id="2-蓝牙插件化"><a href="#2-蓝牙插件化" class="headerlink" title="2. 蓝牙插件化"></a>2. 蓝牙插件化</h4><ul><li>注：此操作为了获取“详细的蓝牙界面”</li></ul><h4 id="3-软件准备"><a href="#3-软件准备" class="headerlink" title="3.软件准备"></a>3.软件准备</h4><p>关闭佩戴检测、数据、WiFi、消息页面下拉的第二页整页（非必要应用通知）<br>打开息屏模式至最大，飞行模式</p><h4 id="4-音乐准备"><a href="#4-音乐准备" class="headerlink" title="4. 音乐准备"></a>4. 音乐准备</h4><p>压缩包所占内存较大，当前存储于本地电脑中</p><h3 id="4-耳机准备"><a href="#4-耳机准备" class="headerlink" title="4. 耳机准备"></a>4. 耳机准备</h3><h4 id="1-连接准备"><a href="#1-连接准备" class="headerlink" title="1. 连接准备"></a>1. 连接准备</h4><ol><li>耳机连接HV-Power-Monitor 用来供给飞线耳机电源，其中耳机需要3.8V，手表手机需要3.85V。</li><li>打开软件,点击右上角Set Vout-Custom设为3.8V。</li><li>设置完电压后点击Vout-Disable，黑盒的两个黄灯亮起，开始给耳机供电，相当于耳机的电池，双飞线耳机可以正常工作。<br>注：若此时亮灯为一红一黄，则代表此时电源串电（焊接点处线材交叉打结），此时先关闭软件端电源（点击Vout Enable下电），再关闭硬件端电源（按动Power-Monitor按钮关机后，再次按动Power-Monitor按钮开机）。梳理电源线，必要时可以缠绕黑色绝缘胶带，完成后重复连接。</li><li>黑盒俯视图及尾端如下所示，黑盒尾端共有两根黑线，其中一根(末尾带一圆环)连接电源，供给飞线耳机工作；另一根连接电脑，传输信息。</li></ol><div style="text-align:center;display:flex;gap:5px">    <img src="/img/power_test_pic/3.jpg" alt="图片描述" style="zoom:35%;">    <img src="/img/power_test_pic/4.jpg" alt="图片描述" style="zoom:35%;"></div><ol start="5"><li>Power-Monitor 前端如图所示共有两根线，红正黑负。因为此耳机为双飞线耳机，其中第一飞线为三引脚插头，用来抓取log；第二飞线为红、金两条线，用来连接黑盒作为电池，其中红正金负。当拆开耳机头部后可以看到，距离耳机外侧（麦克风）近的是正极，正常应该是红色。</li></ol><div style="text-align:center;display:flex;gap:5px">    <img src="/img/power_test_pic/5.jpg" alt="图片描述" style="zoom:35%;">    <img src="/img/power_test_pic/6.jpg" alt="图片描述" style="zoom:35%;"></div><p>若顺利连接，耳机在耳机盒中电量应该显示为40%（L71） 25%（M75A）左右（因为输入电压为3.8V）</p><h2 id="2-具体操作"><a href="#2-具体操作" class="headerlink" title="2. 具体操作"></a>2. 具体操作</h2><h3 id="1-基本步骤"><a href="#1-基本步骤" class="headerlink" title="1. 基本步骤"></a>1. 基本步骤</h3><ol><li><p>下载Power Tool软件 </p></li><li><p>如图上图所示顺利连接后，如果电脑第一次连接黑盒，进入控制面板-电脑设备管理器-power驱动升级-&gt;可以使用。</p></li><li><p>因为两只耳机，连接两个黑盒，故开两个系统，其中数据参数调制下图所示</p><div style="text-align:center;display:flex;gap:5px"> <img src="/img/power_test_pic/7.jpg" alt="图片描述"></div></li><li><p>初次使用、以及单双耳切换后均需等待蓝牙广播三分钟。</p></li><li><p>点击Set Capture Triggers-Manual After 180s。</p></li><li><p>点击两个软件中的Run，并等待180s后自动暂停。</p></li><li><p>记录Average Current（平均电流值，单位为mA），其中电流与预期相比，低了可以，高了不行（代表耗电过高）。</p></li></ol><h2 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h2><h3 id="1-通用"><a href="#1-通用" class="headerlink" title="1. 通用"></a>1. 通用</h3><ol><li>ANC指的是降噪</li><li>关闭低延迟、佩戴检测和双连接.</li><li>空间音频分为手机空间音频和耳机空间音频，开启空间音频后，需要同时开启头部追踪。</li><li>音频解码要是没写的话，默认AAC模式。</li><li>当进行双耳-&gt;单耳时，不要移动耳机，在软件上点击“下电”Vout-Disable，就可以关闭一只耳机的电源，进入单耳模式。</li><li>降噪需要调到深度模式。</li><li>50%音量:音量调至零的情况下，摁7次音量上键。</li><li>测量通话过程中的功耗时，身边的噪音对其影响不大，但是也要尽量保持安静。</li><li>手机上方贴金属条是为了模拟人耳模式，检测时耳机连接另一块金属，几次调试后进入双儿入耳模式。因为单耳时耳机无法进入降噪模式，所以单耳成功连接为√ × √；双耳均成功连接为√ √ √ </li><li>耳机恢复出场设置：长摁关机键，至闪白灯-闪红灯-闪白灯</li><li>语音识别：在蓝牙插件化中的更多设置中</li><li>环绕立体音：插件化设置中没有的话，可以在设置-声音与振动-最下方音质音效-开启虚拟环绕音替代</li><li>空间音频指的是手机端空间音频</li><li>手机端空间音频与LHDC-192khz采样率互斥，无法测试；耳机端空间音频与LHDC-192khz采样率不互斥</li><li>测试过程中发现异常数据、波形且无法恢复，可以耳机软恢复出场。</li></ol><h3 id="2-待机"><a href="#2-待机" class="headerlink" title="2. 待机"></a>2. 待机</h3><ol><li>测试耳机待机性能时，不开网、双连接；打开飞行模式，蓝牙，方向锁，息屏时间开至最大。</li></ol><h3 id="3-音乐"><a href="#3-音乐" class="headerlink" title="3. 音乐"></a>3. 音乐</h3><ol><li>测试耳机音乐性能时，不开网、双连接，需打开飞行模式，并使用固定音源，在系统软件选择已经考入本地的音乐-加州旅馆。</li></ol><h3 id="4-通话"><a href="#4-通话" class="headerlink" title="4. 通话"></a>4. 通话</h3><ol><li>测试耳机通话时，开网，关飞行。</li><li>每测一次通话，都重新拨打一次。</li><li>通话时，需要在通话界面调至50%音量（不是媒体音量），因为原有1格的音量，所有按音乐上键6次即可。</li><li>测试音乐播放，空间音频、环绕立体声时：双耳机先放耳机盒里，主手机需要下载小米耳机，手机打开双设备模式-连接两台手机，关闭佩戴检测，打开空间音频，不用打开空间立体声</li></ol><h3 id="5-双连接"><a href="#5-双连接" class="headerlink" title="5. 双连接"></a>5. 双连接</h3><ol><li>需要打开空间音频以及立体声，如果手机蓝牙设置有的话（小米耳机、手机），则不用额外下载“小米手机app”；当测试竞品的时候需要下载。</li></ol><h3 id="6-OTA升级"><a href="#6-OTA升级" class="headerlink" title="6. OTA升级"></a>6. OTA升级</h3><ol><li>手机蓝牙插件化后，输入以下adb命令adb shell setprop log.tag.MMAServiceOTAtest VERBOSE可以打开耳机端更多设置，用于耳机无线OTA升级或循环升级。</li><li>无法进行OTA升级过程中的功耗测试，因为升级过程中需要耳机在耳机盒中关盒升级，电流值会是负数。</li></ol>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
      <tag>功耗测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于hexo的个人Blog</title>
    <link href="/2023/11/30/%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84%E4%B8%AA%E4%BA%BABlog/"/>
    <url>/2023/11/30/%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84%E4%B8%AA%E4%BA%BABlog/</url>
    
    <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h2 id="1-第一个项目-熟悉流程"><a href="#1-第一个项目-熟悉流程" class="headerlink" title="1. 第一个项目-熟悉流程"></a>1. 第一个项目-熟悉流程</h2><ol><li><p>参考文档：<a href="https://www.cnblogs.com/huanhao/p/hexobase.html">https://www.cnblogs.com/huanhao/p/hexobase.html</a></p></li><li><p>文档中的坑：</p><ol><li><p>蓝框处命名必须相同</p><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/2.png" alt="图片描述"></div></li><li><p>红框处应为<code>main</code></p><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/3.png" alt="图片描述"></div></li><li><p>样式大全：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></li><li><p>此项目建立在个人Mac电脑上</p><ol><li><p>电脑ip - 对应得ip为10.220.164.103</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ifconfig | grep &quot;inet&quot;<br></code></pre></td></tr></table></figure></li><li><p>博客网址：<a href="http://10.220.164.103:4000/">http://10.220.164.103:4000/</a></p></li></ol></li></ol></li></ol><h2 id="2-第二个项目-最终版"><a href="#2-第二个项目-最终版" class="headerlink" title="2. 第二个项目 - 最终版"></a>2. 第二个项目 - 最终版</h2><ul><li>参考第一个项目的流程，进行第二个项目的配置</li><li>项目链接：<a href="https://flashchen2.github.io/">https://flashchen2.github.io/</a></li></ul><h3 id="1-配置安装hexo项目"><a href="#1-配置安装hexo项目" class="headerlink" title="1. 配置安装hexo项目"></a>1. 配置安装hexo项目</h3><ol><li><p>hexo安装、建站：<a href="https://hexo.io/zh-cn/docs/setup">https://hexo.io/zh-cn/docs/setup</a></p></li><li><p>安装使用手册：<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B</a></p></li><li><p>github中的高星、高更新项目：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p></li><li><p>以上内容完成后，可以启动本地项目查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ./Documents/flashchen2blog<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo s / hexo server<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-利用github上云"><a href="#2-利用github上云" class="headerlink" title="2. 利用github上云"></a>2. 利用github上云</h3><ol><li><p>此处流程参考：<a href="https://www.cnblogs.com/huanhao/p/hexobase.html%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%9B%BE%E5%A4%84">https://www.cnblogs.com/huanhao/p/hexobase.html中的下图处</a></p><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/4.png" alt="图片描述"></div></li></ol><h3 id="3-细节配置指南"><a href="#3-细节配置指南" class="headerlink" title="3. 细节配置指南"></a>3. 细节配置指南</h3><ol><li>参考文档：<a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a></li><li>提问地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid/issues">https://github.com/fluid-dev/hexo-theme-fluid/issues</a></li></ol><h1 id="二、注意事项"><a href="#二、注意事项" class="headerlink" title="二、注意事项"></a>二、注意事项</h1><h2 id="1-本地启动项目"><a href="#1-本地启动项目" class="headerlink" title="1. 本地启动项目"></a>1. 本地启动项目</h2><ol><li><p>进入对应目录打开终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ./Documents/flashchen2blog<br></code></pre></td></tr></table></figure></li><li><p>启动项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo s / hexo server<br></code></pre></td></tr></table></figure></li><li><p>Mac电脑访问项目</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost:4000/</span><br></code></pre></td></tr></table></figure></li><li><p>退出<code>hexo</code>项目</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">control + <span class="hljs-keyword">c</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="2-云端启动项目"><a href="#2-云端启动项目" class="headerlink" title="2. 云端启动项目"></a>2. 云端启动项目</h2><ol><li><p>直接访问，无需启动</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//flashchen2.github.io/</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="3-上传修改后的项目至GitHub"><a href="#3-上传修改后的项目至GitHub" class="headerlink" title="3. 上传修改后的项目至GitHub"></a>3. 上传修改后的项目至GitHub</h2><ol><li><p>分别运行以下代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure></li><li><p>代码成功拉到github后，需要等待大概30分后生效</p></li></ol><h2 id="4-markdown文本所在路径位置"><a href="#4-markdown文本所在路径位置" class="headerlink" title="4. markdown文本所在路径位置"></a>4. markdown文本所在路径位置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./documents/source/_posts<br></code></pre></td></tr></table></figure><h2 id="5-如何新建一个markdown文本"><a href="#5-如何新建一个markdown文本" class="headerlink" title="5. 如何新建一个markdown文本 *"></a>5. 如何新建一个markdown文本 *</h2><ol><li>方法1 - 不推荐</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ./Documents/flashchen2blog<br><br>hexo new post &quot;文件名称&quot;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>方法2 - 推荐</p><ol><li>用Typora打开_posts文件夹</li><li>右键_posts文件-新建文件-新建.md文件</li></ol><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/19.png" alt="图片描述" style="zoom:50%;"></div></li></ol><h2 id="6-本地修改后，本地运行未生效"><a href="#6-本地修改后，本地运行未生效" class="headerlink" title="6. 本地修改后，本地运行未生效"></a>6. 本地修改后，本地运行未生效</h2><ul><li>清除一下缓存</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br></code></pre></td></tr></table></figure><h1 id="三、配置主题"><a href="#三、配置主题" class="headerlink" title="三、配置主题"></a>三、配置主题</h1><h2 id="1-站点配置文件-主题配置文件"><a href="#1-站点配置文件-主题配置文件" class="headerlink" title="1. 站点配置文件&#x2F;主题配置文件"></a>1. 站点配置文件&#x2F;主题配置文件</h2><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/5.png" alt="图片描述" style="zoom:50%;">    <img src="/img/blog_based_on_hexo_pic/6.png" alt="图片描述" style="zoom:46%;"></div><h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2. 标题"></a>2. 标题</h2><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/7.png" alt="图片描述" style="zoom:40%;">    <img src="/img/blog_based_on_hexo_pic/8.png" alt="图片描述" style="zoom:50%;"></div><h2 id="3-访问人次"><a href="#3-访问人次" class="headerlink" title="3. 访问人次"></a>3. 访问人次</h2><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/9.png" alt="图片描述" style="zoom:43%;">    <img src="/img/blog_based_on_hexo_pic/10.png" alt="图片描述" style="zoom:45%;"></div><h2 id="4-关于信息"><a href="#4-关于信息" class="headerlink" title="4. 关于信息"></a>4. 关于信息</h2><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/11.png" alt="图片描述" style="zoom:40%;">    <img src="/img/blog_based_on_hexo_pic/12.png" alt="图片描述" style="zoom:53%;"></div><h2 id="5-文章页操作一览"><a href="#5-文章页操作一览" class="headerlink" title="5. 文章页操作一览"></a>5. 文章页操作一览</h2><ul><li>配置指南：<a href="https://hexo.fluid-dev.com/docs/guide/#%E6%96%87%E7%AB%A0%E9%A1%B5">https://hexo.fluid-dev.com/docs/guide/#%E6%96%87%E7%AB%A0%E9%A1%B5</a></li><li>注：front-matter处的注释，只能用“#”</li></ul><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/13.png" alt="图片描述" style="zoom:45%;">    <img src="/img/blog_based_on_hexo_pic/14.png" alt="图片描述" style="zoom:45%;"></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br><span class="hljs-section"># 文章标题</span><br>title: Hello World<br><br><span class="hljs-section"># 作者姓名</span><br>author: 张辰<br><br><span class="hljs-section"># 文本建立时间</span><br>date: 2023-11-28 20:00:00<br><br><span class="hljs-section"># 文章在首页的封面图</span><br>index<span class="hljs-emphasis">_img: /img/hello_</span>hexo.jpg<br><br><span class="hljs-section"># 文章页顶部大图</span><br>banner<span class="hljs-emphasis">_img: /img/banner_</span>hexo.jpg<br><br><span class="hljs-section"># 文章分类</span><br>categories:<br><span class="hljs-bullet"> -</span> Diary<br> <br><span class="hljs-section"># 文章标签</span><br>tags:<br><span class="hljs-bullet"> -</span> 前端<br><span class="hljs-section"> - html</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><h2 id="6-front-matter都包涵什么"><a href="#6-front-matter都包涵什么" class="headerlink" title="6. front-matter都包涵什么"></a>6. front-matter都包涵什么</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br><span class="hljs-section"># 文章标题</span><br>title: blog整体规划<br><br><span class="hljs-section"># 文章摘要</span><br>excerpt: 讲述作为一名测试开发工程师，工作1.5年过程中的自白。以及对测试技术与开发技术的积累与感悟。<br><br><span class="hljs-section"># 作者姓名</span><br>author: 张辰<br><br><span class="hljs-section"># 文本建立时间</span><br>date: 2023-11-20 20:00:00<br><br><span class="hljs-section"># 允许画mermaid图</span><br>mermaid: true<br><br><span class="hljs-section"># 文章在首页的封面图</span><br>index<span class="hljs-emphasis">_img: /img/blog_</span>plan<span class="hljs-emphasis">_hexo1.jpg</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 文章页顶部大图</span><br><span class="hljs-emphasis">banner_</span>img: /img/banner<span class="hljs-emphasis">_hexo.jpg</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 图片根目录</span><br><span class="hljs-emphasis">typora-root-url: /Users/zhangchen/Documents/flashchen2blog/source/</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 文章分类</span><br><span class="hljs-emphasis">categories:</span><br><span class="hljs-emphasis"> - 总结</span><br><span class="hljs-emphasis"> </span><br><span class="hljs-emphasis"># 文章标签</span><br><span class="hljs-emphasis">tags:</span><br><span class="hljs-emphasis"> - 总结</span><br><span class="hljs-emphasis">---</span><br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/15.png" alt="图片描述" style="zoom:50%;"></div><h1 id="四、Tips"><a href="#四、Tips" class="headerlink" title="四、Tips"></a>四、Tips</h1><h2 id="1-绘制mermaid图"><a href="#1-绘制mermaid图" class="headerlink" title="1. 绘制mermaid图"></a>1. 绘制mermaid图</h2><ul><li>front-matter中设置</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 允许画mermaid图</span><br>mermaid: true<br></code></pre></td></tr></table></figure><ol><li>绘制流程图</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% mermaid %&#125;<br><span class="hljs-section"># 纵向</span><br>graph TD;<br><br><span class="hljs-section"># 横向</span><br>graph LR;<br><br>A--&gt;B;<br>A--&gt;C;<br>B--&gt;D;<br>C--&gt;D;<br>&#123;% endmermaid %&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/16.png" alt="图片描述" style="zoom:40%;"></div><h2 id="2-便签"><a href="#2-便签" class="headerlink" title="2. 便签"></a>2. 便签</h2><p><code>&lt;p class=&quot;note note-primary&quot;&gt; &lt;/p&gt;</code></p><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/17.png" alt="图片描述" style="zoom:50%;"></div><h3 id="1-标签中插入字符"><a href="#1-标签中插入字符" class="headerlink" title="1. 标签中插入字符"></a>1. 标签中插入字符</h3><p>分别使用HTML实体<code>&lt;</code>和<code>&gt;</code>来代替<code>&lt;</code>和<code>&gt;</code>符号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落，其中包含一个<span class="hljs-symbol">&amp;lt;</span>img<span class="hljs-symbol">&amp;gt;</span>字符。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-在标签中加粗"><a href="#2-在标签中加粗" class="headerlink" title="2. 在标签中加粗"></a>2. 在标签中加粗</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-info&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight:bold;&quot;</span>&gt;</span><br>        注:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>    后期我们会通过CSS样式修改掉这些效果<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-在Typora和hexo中都能正确显示图片的方式"><a href="#3-在Typora和hexo中都能正确显示图片的方式" class="headerlink" title="3. 在Typora和hexo中都能正确显示图片的方式"></a>3. 在Typora和hexo中都能正确显示图片的方式</h2><ol><li>在front-matter中设置Typora中的根目录</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 图片根目录</span><br>typora-root-url: <span class="hljs-regexp">/Users/</span>zhangchen<span class="hljs-regexp">/Documents/</span>flashchen2blog<span class="hljs-regexp">/source/</span><br></code></pre></td></tr></table></figure><ol start="2"><li>设置图片</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;gap:5px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/img/markdown_pic/5.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片描述&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;zoom:85%;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>图片皆可正确显示，左hexo，右Typora</li></ol><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/18.png" alt="图片描述" style="zoom:60%;"></div><h2 id="4-更换电脑后继续使用hexo博客"><a href="#4-更换电脑后继续使用hexo博客" class="headerlink" title="4. 更换电脑后继续使用hexo博客"></a>4. 更换电脑后继续使用hexo博客</h2><ol><li>将原电脑中的flashchen2blog文件，压缩发送至新电脑中</li></ol><div style="text-align:center;gap:5px">    <img src="/img/blog_based_on_hexo_pic/20.png" alt="图片描述" style="zoom:40%;"></div><ol start="2"><li><p>给新电脑添加hexo框架</p></li><li><p>给新电脑添加git权限</p><ol><li><p>生成ssh秘钥，并将公钥添加至Github账户中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> ~/.ssh<br></code></pre></td></tr></table></figure></li><li><p><mark>如果没有看到<code>id_rsa</code>和<code>id_rsa.pub</code>文件</mark>，可以通过以下命令生成：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span>-keygen -t rsa -b <span class="hljs-number">4096</span> -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>生成公钥，并将其添加到GitHub账户-Settings-左侧SSH and GPG keys</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure></li><li><p>上述完成后，本地连接github，检查是否成功</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">ssh -T git@github.com<br><br><span class="hljs-comment"># 运行上述代码，若链接成功，存在以下提示</span><br>Hi username! You&#x27;ve successfully authenticated, <span class="hljs-keyword">but</span> GitHub <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> provide shell access.<br></code></pre></td></tr></table></figure></li></ol></li><li><p>新电脑试运行，上传修改后的md文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能测试方法</title>
    <link href="/2023/11/30/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/11/30/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、手表、手环性能测试"><a href="#一、手表、手环性能测试" class="headerlink" title="一、手表、手环性能测试"></a>一、手表、手环性能测试</h1><ol><li>基础性能：成功率、时长、主观体验</li><li>流畅度：滑动帧率、丢帧率<br>CPU计算，GPU渲染<br>显示过慢：一次丢帧(janck) 一次撕裂<br>显示过快：</li><li>时延：应用启动、滑动响应、滑动完成、点击完成、其他时延<br>公式：（结束帧数-启示帧数）*1000ms&#x2F;240</li><li>应用启动<ol><li>热启动：点击进入应用后，退出应用。5s内再次点击进入应用</li><li>冷启动：每一次点击进入应用后，重启设备，再次点击进入应用</li></ol></li><li>时延<ol><li>录制视频30帧、60帧，就是每秒播放30、60个画面，也就是30f、60f<br> 1&#x2F;30&#x3D;0.03333秒&#x3D;33.33毫秒<br> 1&#x2F;60&#x3D;0.01666秒&#x3D;16.66毫秒</li></ol></li></ol><h1 id="二、耳机性能测试"><a href="#二、耳机性能测试" class="headerlink" title="二、耳机性能测试"></a>二、耳机性能测试</h1><h2 id="1-音画延迟"><a href="#1-音画延迟" class="headerlink" title="1. 音画延迟"></a>1. 音画延迟</h2><h3 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1. 前置条件"></a>1. 前置条件</h3><h4 id="1-硬件前置条件"><a href="#1-硬件前置条件" class="headerlink" title="1. 硬件前置条件"></a>1. 硬件前置条件</h4><ol><li>安静的办公室&#x2F;屏蔽室</li><li>远离蓝牙&#x2F;wifi干扰信号源</li><li>准备一台支持录制慢动作240帧率功能的辅助手机（iphone 12）</li></ol><h4 id="2-软件前置条件"><a href="#2-软件前置条件" class="headerlink" title="2. 软件前置条件"></a>2. 软件前置条件</h4><ol><li>耳机蓝牙连接手机1；耳机放在手机2（iPhone 12）出音口处。</li><li>在手机端“更多设置”里调节编码格式（AAC&#x2F;SBC&#x2F;LHDC&#x2F;APTX）</li><li>在LHDC&#x2F;APTX模式下开启低延迟开关</li><li>下载“和平精英”游戏，在游戏设置里将，游戏背景音调到最小，总音量调到最大</li><li>进入到“训练室”选择MK47枪械，单发模式</li></ol><div style="text-align:center;display:flex;gap:5px">    <img src="/img/performance_test_pic/2.jpg" alt="图片描述" style="zoom:25%;">    <img src="/img/performance_test_pic/3.jpg" alt="图片描述" style="zoom:25%;">    <img src="/img/performance_test_pic/4.jpg" alt="图片描述" style="zoom:25%;"></div><h3 id="2-测试过程"><a href="#2-测试过程" class="headerlink" title="2.测试过程"></a>2.测试过程</h3><ol><li>手机端音量调到最大，辅助机打开录制视频慢动作240帧模式。</li><li>测试耳机贴到辅助机的话筒处。</li><li><div style="text-align:center;display:flex;gap:5px">    <img src="/img/power_test_pic/7.jpg" alt="图片描述"></div></li></ol><h3 id="3-数据处理"><a href="#3-数据处理" class="headerlink" title="3.数据处理"></a>3.数据处理</h3><h4 id="1-ffmpeg驱动"><a href="#1-ffmpeg驱动" class="headerlink" title="1. ffmpeg驱动"></a>1. ffmpeg驱动</h4><ol><li><p>下载ffmpeg工具，压缩包过大，目前存储于本地电脑中</p></li><li><p>初次使用时，按如下图示配置环境变量</p></li><li><p>我的电脑-属性-高级系统设置-配置路径选择到bin文件所在目录</p></li></ol><div style="text-align:center;display:flex;gap:5px">    <img src="/img/performance_test_pic/5.jpg" alt="图片描述" style="zoom:45%;">    <img src="/img/performance_test_pic/6.jpg" alt="图片描述" style="zoom:45%;">    <img src="/img/performance_test_pic/7.jpg" alt="图片描述" style="zoom:45%;"></div><ol start="4"><li>将录制视频导入电脑桌面；在桌面新建一个文件夹，重命名为file_dir。</li><li>win+r打开CMD窗口后使用ffmepg命令解析视频<ol><li>输入 cd Desktop</li></ol></li></ol><ul><li><p>此步骤含义为进入桌面新建的文件夹。</p></li><li><p>其中黄标处可更改为如下图二路径（一般不用改）</p>  <div style="text-align:center;display:flex;gap:5px">      <img src="/img/performance_test_pic/8.jpg" alt="图片描述" style="zoom:35%;">      <img src="/img/performance_test_pic/9.jpg" alt="图片描述" style="zoom:35%;">  </div><ol start="2"><li>输入ffmpeg -i 2021_05_25_11_35_IMG_0740.MOV -r 240 file_dir\f%05d.png</li></ol></li><li><p>此步骤为将视频分解为每一帧图片。</p></li><li><p>黄1为桌面此视频的名称（需要更改）；黄2为桌面文件夹的名称（一般不用改）</p><ol start="3"><li>继续输入ffmpeg -i 2021_05_25_11_35_IMG_0740.MOV -vn -y -acodec copy 123.aac</li></ol></li><li><p>此步骤为抽出aac格式音频。</p></li><li><p>黄1为桌面此视频的名称（需要更改）；黄2为生成的acc音频名称（一般不用改）</p></li></ul><h4 id="2-AAC-MP3"><a href="#2-AAC-MP3" class="headerlink" title="2. AAC MP3"></a>2. AAC MP3</h4><ol><li><p>下载HooTech工具，压缩包过大，目前存储于本地电脑中</p></li><li><p>将aac格式音频转换为wav格式（工具使用HooTech_AAC_MP3_Converter）</p><div style="text-align:center;display:flex;gap:5px"> <img src="/img/performance_test_pic/10.jpg" alt="图片描述"></div></li><li><p>点击Add Files 选择转换成功的aac文件</p></li><li><p>点击Convert（自动）选择已经转换成功的的wav文件，并将此wav文件拖拽桌面</p></li></ol><h4 id="3-Cool-Edit-Pro"><a href="#3-Cool-Edit-Pro" class="headerlink" title="3. Cool Edit Pro"></a>3. Cool Edit Pro</h4><ol><li><p>下载CoolEditPro工具，压缩包过大，目前存储于本地电脑中</p></li><li><p>使用Cool Edit Pro打开wav格式音频，得到音频波形图</p></li><li><p>打开Cool Edit Pro，点击Keep Evaluating（可能需要等待一段时间）</p></li><li><p>点击红框中的图标，选择已经转换成功的的wav文件，并打开。</p><div style="text-align:center;display:flex;gap:5px"> <img src="/img/performance_test_pic/11.jpg" alt="图片描述" style="zoom:35%;"> <img src="/img/performance_test_pic/12.jpg" alt="图片描述" style="zoom:35%;"></div></li><li><p>筛除视频底噪（不是必须步骤）</p><div style="text-align:center;display:flex;gap:5px"> <img src="/img/performance_test_pic/13.jpg" alt="图片描述" style="zoom:25%;"> <img src="/img/performance_test_pic/14.jpg" alt="图片描述" style="zoom:25%;"> <img src="/img/performance_test_pic/15.jpg" alt="图片描述" style="zoom:25%;"></div></li></ol><h4 id="4-数据分析"><a href="#4-数据分析" class="headerlink" title="4. 数据分析"></a>4. 数据分析</h4><div style="text-align:center;display:flex;gap:5px">    <img src="/img/performance_test_pic/16.jpg" alt="图片描述"></div><ol><li>在wav文件中，找到第一次开枪，听到声音那一刻的时间，并记录下方数据a1。<br>注：开枪那一刻波形会突然变粗，可以听个大概，然后找到特殊波形处，选择特殊波形前一刻定为开枪声音出现的时间即可。</li><li>在分解出的图片中找到枪冒火那一帧（不是手机点击的那一刻），记录图片数据序号a2。<br>对应的ms值a3&#x3D;a2÷240</li><li>实际延迟 a4&#x3D; (a1-a3)×1000</li><li>记录上述方法，并重复五次开枪数据，记录实际延迟，取五次平均值。</li></ol><h2 id="2-WALT"><a href="#2-WALT" class="headerlink" title="2. WALT"></a>2. WALT</h2><h3 id="1-前置条件-1"><a href="#1-前置条件-1" class="headerlink" title="1.前置条件"></a>1.前置条件</h3><ol><li><p>手机端安装walt工具，压缩包过大，目前存储于本地电脑中</p></li><li><p>手机蓝牙连接耳机，手机开到最大音量，walt工具连接手机，开启下方中间的电源键。</p></li><li><p>取单耳耳机放置walt上，用蓝丁胶粘好</p><div style="text-align:center;display:flex;gap:5px"> <img src="/img/performance_test_pic/17.jpg" alt="图片描述"></div></li><li><p>在手机端蓝牙连接的耳机设备-音效设置-里调节编码格式（AAC&#x2F;SBC&#x2F;LHDC&#x2F;APTX） </p></li><li><p>在手机端-更多设置-开发者选项-蓝牙音频编解码器中调制LHDC V3&#x2F;V4 及LHDC3.0&#x2F;4.0<br>注：需先调整耳机内格式，再调整开发者选项。单独更改开发者选项，LHDC不会生效。</p></li><li><p>在LHDC3.0&#x2F;LHDC4.0模式下开启低延迟开关 （位置：蓝牙-连接的耳机设备-音效设置-低延迟）</p></li><li><p>蓝牙-连接的耳机设备-通透 （在实际测试之前需要检查一遍，可能存在耳机自动跳转到通透模式）</p></li><li><p>蓝牙-连接的耳机设备-LHDC-192k（根据用例选择）</p></li><li><p>手机连接walt硬件测试工具的一端；walt测试工具的另一端连接一只耳机，橡皮泥用来收音、固定。</p></li><li><p>在手机端开发者模式下关闭：wlan扫描 和 enable bluetooth page scan(其它按默认)</p></li><li><p>关闭状态栏里边的wifi&#x2F;数据&#x2F;定位&#x2F;NFC等功能；打开飞行模式和蓝牙</p><div style="text-align:center;display:flex;gap:5px"><img src="/img/performance_test_pic/18.jpg" alt="图片描述"></div></li></ol><h3 id="2-测试过程-1"><a href="#2-测试过程-1" class="headerlink" title="2. 测试过程"></a>2. 测试过程</h3><ol><li><p>打开WALT测试APP：Settings-Audio-Audio output test length(数值设置200) </p><div style="text-align:center;display:flex;gap:5px"> <img src="/img/performance_test_pic/19.jpg" alt="图片描述" style="zoom:35%;"> <img src="/img/performance_test_pic/20.jpg" alt="图片描述" style="zoom:35%;"> <img src="/img/performance_test_pic/21.jpg" alt="图片描述" style="zoom:35%;"></div></li><li><p>返回到主页面点击Audio latency-选择Continuous Playback Latency模式 </p><div style="text-align:center;display:flex;gap:5px"> <img src="/img/performance_test_pic/22.jpg" alt="图片描述" style="zoom:35%;"> <img src="/img/performance_test_pic/23.jpg" alt="图片描述" style="zoom:35%;"></div></li><li><p>数据处理</p><ol><li>点击开始并截图记录每次所测的数值，重复三次，记录数据并取平均值。<div style="text-align:center;display:flex;gap:5px"> <img src="/img/performance_test_pic/24.jpg" alt="图片描述" style="zoom:35%;"> <img src="/img/performance_test_pic/25.jpg" alt="图片描述" style="zoom:35%;"> <img src="/img/performance_test_pic/26.jpg" alt="图片描述" style="zoom:35%;"></div></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
      <tag>性能测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matplotlib+Numpy+Pandas数据分析</title>
    <link href="/2023/11/30/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <url>/2023/11/30/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Matplotlib"><a href="#一、Matplotlib" class="headerlink" title="一、Matplotlib"></a>一、Matplotlib</h1><p>介绍：最流行的Python底层会图库，主要做数据可视化图表，名字取材于Matlab</p><p>***图例复用地址：<a href="https://matplotlib.org/stable/gallery/index.html">图例复用地址</a></p><p>学习链接: <a href="https://www.bilibili.com/video/BV1hx411d7jb?p=8&vd_source=4cf7b60c223a665538a4d958765c91a5">学习链接</a></p><h2 id="1-基本要点"><a href="#1-基本要点" class="headerlink" title="1. 基本要点"></a>1. 基本要点</h2><h3 id="1-导入pyplot"><a href="#1-导入pyplot" class="headerlink" title="1. 导入pyplot"></a>1. 导入<code>pyplot</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br></code></pre></td></tr></table></figure><h3 id="2-创建可迭代对象"><a href="#2-创建可迭代对象" class="headerlink" title="2. 创建可迭代对象"></a>2. 创建可迭代对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">26</span>,<span class="hljs-number">2</span>)<br><span class="hljs-comment"># [2,4,6,8...22,24] 包头不包尾</span><br></code></pre></td></tr></table></figure><h3 id="4-展示图形"><a href="#4-展示图形" class="headerlink" title="4. 展示图形"></a>4. 展示图形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pit.show()<br></code></pre></td></tr></table></figure><h3 id="5-设置图片大小"><a href="#5-设置图片大小" class="headerlink" title="5. 设置图片大小"></a>5. 设置图片大小</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># figure指我们画的图，宽20px，高8px</span><br><span class="hljs-comment"># 在图片模糊的时候可以穿入dpi参数，让图片更加清晰</span><br>fig = plt.figure(figsize=(<span class="hljs-number">20</span>,<span class="hljs-number">8</span>),dpi=<span class="hljs-number">80</span>)<br><br><span class="hljs-comment"># 设置画布大小和边距</span><br>fig, ax = plt.subplots(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">6</span>)) <span class="hljs-comment">#根据自身的需要调整相应的参数</span><br>fig.subplots_adjust(left=<span class="hljs-number">0.1</span>, right=<span class="hljs-number">0.9</span>, bottom=<span class="hljs-number">0.11</span>, top=<span class="hljs-number">0.9</span>)<br></code></pre></td></tr></table></figure><h3 id="6-设置图片标题名称"><a href="#6-设置图片标题名称" class="headerlink" title="6.设置图片标题名称"></a>6.设置图片标题名称</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.title(<span class="hljs-string">&quot;xx折线图&quot;</span>)<br><br>plt.title(<span class="hljs-string">&quot;xx折线图&quot;</span>, fontsize=<span class="hljs-number">12</span>)  <span class="hljs-comment">#设置标题大小</span><br></code></pre></td></tr></table></figure><h3 id="7-保存图片"><a href="#7-保存图片" class="headerlink" title="7. 保存图片"></a>7. 保存图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 保存为svg这种矢量图的格式，放大不会有锯齿</span><br>plt.savefig(<span class="hljs-string">&quot;./sig_size.svg&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="8-设置坐标刻度"><a href="#8-设置坐标刻度" class="headerlink" title="8.设置坐标刻度"></a>8.设置坐标刻度</h3><h4 id="1-基础坐标"><a href="#1-基础坐标" class="headerlink" title="1. 基础坐标"></a>1. 基础坐标</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">26</span>,<span class="hljs-number">2</span>)<br>plt.xticks(x)       <span class="hljs-comment"># 刻度为2,4,6,8...22,24 包头不包尾</span><br></code></pre></td></tr></table></figure><h4 id="2-步长坐标"><a href="#2-步长坐标" class="headerlink" title="2. 步长坐标*"></a>2. 步长坐标*</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">26</span>,<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 当刻度过于密集的时候，可以再使用列表的步长（间隔取值）来解决</span><br>plt.xticks(x[::<span class="hljs-number">2</span>])  <span class="hljs-comment"># 刻度为2，8，14...</span><br></code></pre></td></tr></table></figure><h4 id="3-y轴最值坐标"><a href="#3-y轴最值坐标" class="headerlink" title="3. y轴最值坐标"></a>3. y轴最值坐标</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">y = [<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14.5</span>]<br><span class="hljs-comment"># 包头不包尾，顾+1</span><br>plt.yticks(<span class="hljs-built_in">range</span>[<span class="hljs-built_in">min</span>(y),<span class="hljs-built_in">max</span>(y)+<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h4 id="4-字符串坐标"><a href="#4-字符串坐标" class="headerlink" title="4. 字符串坐标*"></a>4. 字符串坐标*</h4><p>​数字和字符串一一对应，对整体的坐标进行替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 元素数据</span><br>x = <span class="hljs-built_in">range</span>(<span class="hljs-number">0.120</span>)<br><span class="hljs-comment"># 设计坐标步长</span><br>_x = <span class="hljs-built_in">list</span>(x)[::<span class="hljs-number">10</span>]<br><span class="hljs-comment"># int坐标变为str坐标</span><br>_xtick_labels = [<span class="hljs-string">&quot;hi&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> _x]<br><span class="hljs-comment"># 数字坐标的值和字符串一一对应</span><br>plt.xticks(_x,_xtick_labels)   <span class="hljs-comment"># hi0, hi10, hi20...</span><br><span class="hljs-comment"># plt.xticks(_x,labels=_xtick_labels)   # hi0, hi10, hi20...</span><br></code></pre></td></tr></table></figure><h4 id="5-旋转坐标值"><a href="#5-旋转坐标值" class="headerlink" title="5.旋转坐标值"></a>5.旋转坐标值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">26</span>,<span class="hljs-number">2</span>)<br>plt.xticks(x,rotation=<span class="hljs-number">45</span>) <br></code></pre></td></tr></table></figure><h3 id="9-显示中文和符号"><a href="#9-显示中文和符号" class="headerlink" title="9. 显示中文和符号"></a>9. 显示中文和符号</h3><h4 id="1-前期一次性配置"><a href="#1-前期一次性配置" class="headerlink" title="1. 前期一次性配置"></a>1. 前期一次性配置</h4><p>软件包下载地址：<a href="https://blog.csdn.net/jlb1024/article/details/98037525/?ops_request_misc=&request_id=&biz_id=102&utm_term=%E4%B8%8B%E8%BD%BDSimHei%E5%AD%97%E4%BD%93&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-98037525.142">下载地址</a></p><p>配置文档：<a href="https://blog.csdn.net/sinat_40875078/article/details/104326855?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170599703416800213039292%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170599703416800213039292&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-104326855-null-null.142">文档链接</a></p><h4 id="2-日常使用"><a href="#2-日常使用" class="headerlink" title="2.日常使用"></a>2.日常使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]  <span class="hljs-comment"># 设置显示中文字体</span><br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span>    <span class="hljs-comment"># 设置正常显示符号</span><br></code></pre></td></tr></table></figure><h3 id="10-x轴和y轴名称"><a href="#10-x轴和y轴名称" class="headerlink" title="10. x轴和y轴名称"></a>10. x轴和y轴名称</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.xlabel(<span class="hljs-string">&quot;x轴&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;y轴&quot;</span>, fontsize=<span class="hljs-number">12</span>)  <span class="hljs-comment"># 设置轴名称的大小</span><br></code></pre></td></tr></table></figure><h3 id="11-添加图例"><a href="#11-添加图例" class="headerlink" title="11. 添加图例 *"></a>11. 添加图例 *</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.plot(x,y1,label=<span class="hljs-string">&quot;自己&quot;</span>)<br>plt.plot(x,y1,label=<span class="hljs-string">&quot;同桌&quot;</span>)<br><br><span class="hljs-comment"># 添加图例</span><br>plt.legend()<br>plt.legend(loc=<span class="hljs-string">&quot;upper left&quot;</span>)   <span class="hljs-comment"># 设置图例位置</span><br></code></pre></td></tr></table></figure><h2 id="2-线性图表"><a href="#2-线性图表" class="headerlink" title="2. 线性图表"></a>2. 线性图表</h2><h3 id="1-绘制线性图表"><a href="#1-绘制线性图表" class="headerlink" title="1. 绘制线性图表"></a>1. 绘制线性图表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>y = [<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14.5</span>]<br><br>plt.plot(x,y)   <span class="hljs-comment"># 绘制线性图表</span><br>plt.plot(x,y,linewidth=<span class="hljs-number">5</span>)  <span class="hljs-comment">#设置线条粗细</span><br></code></pre></td></tr></table></figure><h3 id="2-绘制网格"><a href="#2-绘制网格" class="headerlink" title="2. 绘制网格"></a>2. 绘制网格</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.grid()     <span class="hljs-comment"># 绘制网格</span><br>plt.grid(alpha=<span class="hljs-number">0.4</span>)   <span class="hljs-comment"># 设置网格透明度</span><br></code></pre></td></tr></table></figure><h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]  <span class="hljs-comment"># 设置显示中文字体</span><br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span>    <span class="hljs-comment"># 设置正常显示符号</span><br><br>x = <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>, <span class="hljs-number">31</span>)<br>y1 = [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>y2 = [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br><br><span class="hljs-comment"># 设置图形大小</span><br>plt.figure(figsize=(<span class="hljs-number">20</span>, <span class="hljs-number">8</span>), dpi=<span class="hljs-number">80</span>)<br><br><span class="hljs-comment"># 绘制两条线</span><br>plt.plot(x, y1, label=<span class="hljs-string">&quot;自己&quot;</span>, color=<span class="hljs-string">&quot;orange&quot;</span>, linestyle=<span class="hljs-string">&quot;:&quot;</span>)<br>plt.plot(x, y2, label=<span class="hljs-string">&quot;同桌&quot;</span>, color=<span class="hljs-string">&quot;cyan&quot;</span>, linestyle=<span class="hljs-string">&quot;--&quot;</span>)<br><br><span class="hljs-comment"># 设置x轴刻度</span><br>_xtick_labels = [<span class="hljs-string">&quot;&#123;&#125;岁&quot;</span>.<span class="hljs-built_in">format</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x]<br>plt.xticks(x, _xtick_labels)<br><br><span class="hljs-comment"># 绘制网格</span><br>plt.grid(alpha=<span class="hljs-number">0.4</span>, linestyle=<span class="hljs-string">&quot;:&quot;</span>)<br><br><span class="hljs-comment"># 添加图例</span><br>plt.legend()<br><br><span class="hljs-comment"># 展示</span><br>plt.show()<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/data_analysis_pic/2.png" alt="图片描述" style="zoom:60%;"></div><h1 id="二、Numpy"><a href="#二、Numpy" class="headerlink" title="二、Numpy"></a>二、Numpy</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><ol><li>一个开源的python科学计算库</li><li>使用Numpy可以方便的使用数组、矩阵进行计算</li><li>包含线性代数、傅立叶变换、随机数生成等大量函数</li></ol><h2 id="2-基本要点"><a href="#2-基本要点" class="headerlink" title="2. 基本要点"></a>2. 基本要点</h2><h3 id="1-创建数组"><a href="#1-创建数组" class="headerlink" title="1.创建数组"></a>1.创建数组</h3><ul><li>3种创建数组的方法</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> numpy as np<br><span class="hljs-attribute">a</span> = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br><span class="hljs-attribute">b</span> = np.array(range(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>))<br><span class="hljs-attribute">c</span> = np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><ul><li><code>np.arange</code>的用法：<code>arange(start, stop, step)</code></li></ul><h1 id="三、Pandas"><a href="#三、Pandas" class="headerlink" title="三、Pandas"></a>三、Pandas</h1>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>续航测试方法</title>
    <link href="/2023/11/30/%E7%BB%AD%E8%88%AA%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/11/30/%E7%BB%AD%E8%88%AA%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、耳机续航测试"><a href="#一、耳机续航测试" class="headerlink" title="一、耳机续航测试"></a>一、耳机续航测试</h1><h2 id="1-前提事项"><a href="#1-前提事项" class="headerlink" title="1.前提事项"></a>1.前提事项</h2><ol><li>测试格式：AAC、SBC、LHDC、APTX（根据要求）</li><li>安装ble.apk（与小爱有关）</li><li>测试前根据要求在更多设置-开发者模式下，提前设置好ble.apk，为了方便后期输出测试报告和监控测试过程</li></ol><ul><li>长续航测试前要保证完全充满电</li><li>耳机充电5分钟需提前确认，提前规划测试时间</li></ul><h2 id="2-测试要求"><a href="#2-测试要求" class="headerlink" title="2.测试要求"></a>2.测试要求</h2><ol><li>最少准备5组设备，越多越好</li><li>测试过程中需有间隔查看编码格式是否正确（通透、降噪）</li><li>白天测：ANC、HT、通话（时间段）</li><li>晚上测：SBC全off（时间长，测试前确保手机电量充足）</li></ol>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
      <tag>续航测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法入门至精通</title>
    <link href="/2023/11/30/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E8%87%B3%E7%B2%BE%E9%80%9A/"/>
    <url>/2023/11/30/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E8%87%B3%E7%B2%BE%E9%80%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="一、复杂度分析"><a href="#一、复杂度分析" class="headerlink" title="一、复杂度分析"></a>一、复杂度分析</h1><p>学习链接：<a href="https://www.hello-algo.com/">https://www.hello-algo.com/</a></p><h2 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1. 时间复杂度"></a>1. 时间复杂度</h2><p>运行时间可以直观且准确地反映算法的效率。如果我们想准确预估一段代码的运行时间，应该如何操作呢？</p><ol><li><strong>确定运行平台</strong>，包括硬件配置、编程语言、系统环境等，这些因素都会影响代码的运行效率。</li><li><strong>评估各种计算操作所需的运行时间</strong>，例如加法操作 <code>+</code> 需要 1 ns ，乘法操作 <code>*</code> 需要 10 ns ，打印操作 <code>print()</code> 需要 5 ns 等。</li><li><strong>统计代码中所有的计算操作</strong>，并将所有操作的执行时间求和，从而得到运行时间。</li></ol><p>例如在以下代码中，输入数据大小为 n ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在某运行平台下</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">algorithm</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;  <span class="hljs-comment">// 1 ns</span><br>    a = a + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 1 ns</span><br>    a = a * <span class="hljs-number">2</span>;  <span class="hljs-comment">// 10 ns</span><br>    <span class="hljs-comment">// 循环 n 次</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;  <span class="hljs-comment">// 1 ns ，每轮都要执行 i++</span><br>        System.out.println(<span class="hljs-number">0</span>);     <span class="hljs-comment">// 5 ns</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据以上方法，可以得到算法的运行时间为 (6n+12) ns ：</p><center>1+1+10+(1+5)×n=6n+12</center><p>但实际上，<strong>统计算法的运行时间既不合理也不现实</strong>。首先，我们不希望将预估时间和运行平台绑定，因为算法需要在各种不同的平台上运行。其次，我们很难获知每种操作的运行时间，这给预估过程带来了极大的难度。</p><h3 id="1-统计时间增长趋势"><a href="#1-统计时间增长趋势" class="headerlink" title="1. 统计时间增长趋势"></a>1. 统计时间增长趋势</h3><p>时间复杂度分析统计的不是算法运行时间，<strong>而是算法运行时间随着数据量变大时的增长趋势</strong>。</p><p>“时间增长趋势”这个概念比较抽象，我们通过一个例子来加以理解。假设输入数据大小为 n ，给定三个算法 <code>A</code>、<code>B</code> 和 <code>C</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 算法 A 的时间复杂度：常数阶</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">algorithm_A</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    System.out.println(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-comment">// 算法 B 的时间复杂度：线性阶</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">algorithm_B</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        System.out.println(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 算法 C 的时间复杂度：常数阶</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">algorithm_C</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++) &#123;<br>        System.out.println(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下图展示了以上三个算法函数的时间复杂度。</p><ul><li>算法 <code>A</code> 只有 1 个打印操作，算法运行时间不随着 n 增大而增长。我们称此算法的时间复杂度为“常数阶”。</li><li>算法 <code>B</code> 中的打印操作需要循环 n 次，算法运行时间随着 n 增大呈线性增长。此算法的时间复杂度被称为“线性阶”。</li><li>算法 <code>C</code> 中的打印操作需要循环 1000000 次，虽然运行时间很长，但它与输入数据大小 n 无关。因此 <code>C</code> 的时间复杂度和 <code>A</code> 相同，仍为“常数阶”。</li></ul><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/9.png" alt="图片描述"></div><p>相较于直接统计算法的运行时间，时间复杂度分析有哪些特点呢？</p><ul><li><strong>时间复杂度能够有效评估算法效率</strong>。例如，算法 <code>B</code> 的运行时间呈线性增长，在 n&gt;1 时比算法 <code>A</code> 更慢，在 n&gt;1000000 时比算法 <code>C</code> 更慢。事实上，只要输入数据大小 n 足够大，复杂度为“常数阶”的算法一定优于“线性阶”的算法，这正是时间增长趋势的含义。</li><li><strong>时间复杂度的推算方法更简便</strong>。显然，运行平台和计算操作类型都与算法运行时间的增长趋势无关。因此在时间复杂度分析中，我们可以简单地将所有计算操作的执行时间视为相同的“单位时间”，从而将“计算操作运行时间统计”简化为“计算操作数量统计”，这样一来估算难度就大大降低了。</li><li><strong>时间复杂度也存在一定的局限性</strong>。例如，尽管算法 <code>A</code> 和 <code>C</code> 的时间复杂度相同，但实际运行时间差别很大。同样，尽管算法 <code>B</code> 的时间复杂度比 <code>C</code> 高，但在输入数据大小 n 较小时，算法 <code>B</code> 明显优于算法 <code>C</code> 。在这些情况下，我们很难仅凭时间复杂度判断算法效率的高低。当然，尽管存在上述问题，复杂度分析仍然是评判算法效率最有效且常用的方法。</li></ul><h3 id="2-函数渐近上界"><a href="#2-函数渐近上界" class="headerlink" title="2. 函数渐近上界"></a>2. 函数渐近上界</h3><p>给定一个输入大小为 n 的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">algorithm</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// +1</span><br>    a = a + <span class="hljs-number">1</span>;  <span class="hljs-comment">// +1</span><br>    a = a * <span class="hljs-number">2</span>;  <span class="hljs-comment">// +1</span><br>    <span class="hljs-comment">// 循环 n 次</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123; <span class="hljs-comment">// +1（每轮都执行 i ++）</span><br>        System.out.println(<span class="hljs-number">0</span>);    <span class="hljs-comment">// +1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设算法的操作数量是一个关于输入数据大小 n 的函数，记为 T(n) ，则以上函数的操作数量为：</p><center>T(n)=3+2n</center><p>T(n) 是一次函数，说明其运行时间的增长趋势是线性的，因此它的时间复杂度是线性阶。</p><p>我们将线性阶的时间复杂度记为 O(n) ，这个数学符号称为「大 O 记号 big-O notation」，表示函数 T(n) 的「渐近上界 asymptotic upper bound」。</p><p>时间复杂度分析本质上是计算“操作数量 T(n)”的渐近上界，它具有明确的数学定义。</p><ul><li><strong>函数渐近上界</strong></li></ul><p>若存在正实数 c 和实数 n<sub>0 </sub>，使得对于所有的 n&gt;n<sub>0</sub> ，均有 T(n)≤c⋅f(n) ，则可认为 f(n) 给出了 T(n) 的一个渐近上界，记为 T(n)&#x3D;O(f(n)) 。</p><p>如下图所示，计算渐近上界就是寻找一个函数 f(n) ，使得当 n 趋向于无穷大时，T(n) 和 f(n) 处于相同的增长级别，仅相差一个常数项 c 的倍数。</p><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/10.png" alt="图片描述"></div><h3 id="3-推算方法"><a href="#3-推算方法" class="headerlink" title="3. 推算方法"></a>3. 推算方法</h3><ol><li><p><strong>时间复杂度由 T(n) 中最高阶的项来决定</strong>。这是因为在 n 趋于无穷大时，最高阶的项将发挥主导作用，其他项的影响都可以忽略。</p><p>例：</p><table><thead><tr><th>操作数量T(n)</th><th>时间复杂符O(f(n))</th></tr></thead><tbody><tr><td>100000</td><td>O(1)</td></tr><tr><td>3n + 2</td><td>O(n)</td></tr><tr><td>2n<sup>2</sup> + 3n + 2</td><td>O(n<sup>2</sup>)</td></tr><tr><td>n<sup>3</sup>+10000n<sup>2</sup></td><td>O(n<sup>3</sup>)</td></tr><tr><td>2<sup>n</sup> + 10000n<sup>10000</sup></td><td>O(2<sup>n</sup>)</td></tr></tbody></table></li><li><p>常见类型</p><p>O(1) &lt; O(log<sub>n</sub>) &lt; O(n) &lt; O(nlog<sub>n</sub>) &lt; O(n<sup>2</sup>) &lt;  O(2<sup>n</sup>) &lt; O(n!)</p><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/3.png" alt="图片描述"></div></li></ol><h3 id="4-常见类型"><a href="#4-常见类型" class="headerlink" title="4. 常见类型"></a>4. 常见类型</h3><h4 id="1-常数阶O-1"><a href="#1-常数阶O-1" class="headerlink" title="1. 常数阶O(1)"></a>1. 常数阶O(1)</h4><p>常数阶的操作数量与输入数据大小n无关，即不随着n的变化而变化。</p><p>在以下函数中，尽管操作数量 <code>size</code> 可能很大，但由于其与输入数据大小n无关，因此时间复杂度仍为O(1) ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 常数阶 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">constant</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)<br>        count++;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-线性阶O-n"><a href="#2-线性阶O-n" class="headerlink" title="2. 线性阶O(n)"></a>2. 线性阶O(n)</h4><p>线性阶的操作数量相对于输入数据大小n以线性级别增长。线性阶通常出现在单层循环中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 线性阶 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">linear</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>        count++;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历数组和遍历链表等操作的时间复杂度均为O(n) ，其中n为数组或链表的长度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 线性阶（遍历数组） */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">arrayTraversal</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 循环次数与数组长度成正比</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>值得注意的是，<strong>输入数据大小n需根据输入数据的类型来具体确定</strong>。比如在第一个示例中，变量n为输入数据大小；在第二个示例中，数组长度n为数据大小。</p><h4 id="3-平方阶O-n2"><a href="#3-平方阶O-n2" class="headerlink" title="3. 平方阶O(n2)"></a>3. 平方阶O(n<sup>2</sup>)</h4><p>平方阶的操作数量相对于输入数据大小n以平方级别增长。平方阶通常出现在嵌套循环中，外层循环和内层循环的时间复杂度都为O(n) ，因此总体的时间复杂度为O(n<sup>2</sup>) ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 平方阶 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">quadratic</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 循环次数与数组长度成平方关系</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            count++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>下图对比了常数阶、线性阶和平方阶三种时间复杂度。</p><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/4.png" alt="图片描述"></div><p>以冒泡排序为例，外层循环执行 n−1 次，内层循环执行 n−1、n−2、…、2、1 次，平均为 n&#x2F;2 次，因此时间复杂度为 O((n−1)n&#x2F;2)&#x3D;O(n<sup>2</sup>) ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 平方阶（冒泡排序） */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 计数器</span><br>    <span class="hljs-comment">// 外循环：未排序区间为 [0, i]</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-comment">// 内循环：将未排序区间 [0, i] 中的最大元素交换至该区间的最右端</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[j] &gt; nums[j + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-comment">// 交换 nums[j] 与 nums[j + 1]</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> nums[j];<br>                nums[j] = nums[j + <span class="hljs-number">1</span>];<br>                nums[j + <span class="hljs-number">1</span>] = tmp;<br>                count += <span class="hljs-number">3</span>; <span class="hljs-comment">// 元素交换包含 3 个单元操作</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-指数阶O-2n"><a href="#5-指数阶O-2n" class="headerlink" title="5. 指数阶O(2n)"></a>5. 指数阶O(2<sup>n</sup>)</h4><p>生物学的“细胞分裂”是指数阶增长的典型例子：初始状态为 1 个细胞，分裂一轮后变为 2 个，分裂两轮后变为 4 个，以此类推，分裂 n 轮后有 2<sup>n</sup> 个细胞。</p><p>下和以下代码模拟了细胞分裂的过程，时间复杂度为 ）O(2<sup>n</sup>) ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 指数阶（循环实现） */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">exponential</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, base = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 细胞每轮一分为二，形成数列 1, 2, 4, 8, ..., 2^(n-1)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; base; j++) &#123;<br>            count++;<br>        &#125;<br>        base *= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-comment">// count = 1 + 2 + 4 + 8 + .. + 2^(n-1) = 2^n - 1</span><br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/5.png" alt="图片描述"></div><p>在实际算法中，指数阶常出现于递归函数中。例如在以下代码中，其递归地一分为二，经过n次分裂后停止：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 指数阶（递归实现） */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">expRecur</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> expRecur(n - <span class="hljs-number">1</span>) + expRecur(n - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>指数阶增长非常迅速，在穷举法（暴力搜索、回溯等）中比较常见。对于数据规模较大的问题，指数阶是不可接受的，通常需要使用动态规划或贪心算法等来解决。</p><h4 id="6-对数阶O-logn"><a href="#6-对数阶O-logn" class="headerlink" title="6. 对数阶O(logn)"></a>6. 对数阶O(log<sub>n</sub>)</h4><p>与指数阶相反，对数阶反映了“每轮缩减到一半”的情况。设输入数据大小为n，由于每轮缩减到一半，因此循环次数是 log<sub>2</sub><sup>n</sup>，即 2<sup>n</sup> 的反函数。</p><p>下图和以下代码模拟了“每轮缩减到一半”的过程，时间复杂度为 O(log<sub>2</sub><sup>n</sup>) ，简记为 O(log⁡<sup>n</sup>) ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 对数阶（循环实现） */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">logarithmic</span><span class="hljs-params">(<span class="hljs-type">float</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">1</span>) &#123;<br>        n = n / <span class="hljs-number">2</span>;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/6.png" alt="图片描述"></div><p>与指数阶类似，对数阶也常出现于递归函数中。以下代码形成了一棵高度为 log<sub>2</sub><sup>⁡n</sup> 的递归树：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 对数阶（递归实现） */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">logRecur</span><span class="hljs-params">(<span class="hljs-type">float</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> logRecur(n / <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对数阶常出现于基于分治策略的算法中，体现了“一分为多”和“化繁为简”的算法思想。它增长缓慢，是仅次于常数阶的理想的时间复杂度。</p><h4 id="7-线性对数阶-O-nlog⁡n"><a href="#7-线性对数阶-O-nlog⁡n" class="headerlink" title="7. 线性对数阶 O(nlog⁡n)"></a>7. 线性对数阶 O(nlog⁡<sup>n</sup>)</h4><p>线性对数阶常出现于嵌套循环中，两层循环的时间复杂度分别为 O(log⁡<sup>n</sup>) 和 O(n) 。相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 线性对数阶 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">linearLogRecur</span><span class="hljs-params">(<span class="hljs-type">float</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> linearLogRecur(n / <span class="hljs-number">2</span>) + linearLogRecur(n / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>下图展示了线性对数阶的生成方式。二叉树的每一层的操作总数都为n，树共有 log<sub>2</sub><sup>n</sup>+1 层，因此时间复杂度为 O(nlog⁡<sup>n</sup>) 。</p><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/7.png" alt="图片描述"></div><p>主流排序算法的时间复杂度通常为 O(nlog⁡<sup>n</sup>) ，例如快速排序、归并排序、堆排序等。</p><h4 id="8-阶乘阶-O-n"><a href="#8-阶乘阶-O-n" class="headerlink" title="8.  阶乘阶 O(n!)"></a>8.  阶乘阶 O(n!)</h4><p>阶乘阶对应数学上的“全排列”问题。给定 n 个互不重复的元素，求其所有可能的排列方案，方案数量为：</p><center>n!=n×(n−1)×(n−2)×⋯×2×1</center><p>阶乘通常使用递归实现。如下图 和以下代码所示，第一层分裂出 n 个，第二层分裂出 n−1 个，以此类推，直至第 n 层时停止分裂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 阶乘阶（递归实现） */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">factorialRecur</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 从 1 个分裂出 n 个</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        count += factorialRecur(n - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/8.png" alt="图片描述"></div><ul><li>请注意，因为当 n≥4 时恒有 n! &gt; 2<sup>n</sup> ，所以阶乘阶比指数阶增长得更快，在 n 较大时也是不可接受的。</li></ul><h3 id="5-最差、最佳、平均时间复杂度"><a href="#5-最差、最佳、平均时间复杂度" class="headerlink" title="5. 最差、最佳、平均时间复杂度"></a>5. 最差、最佳、平均时间复杂度</h3><p><strong>算法的时间效率往往不是固定的，而是与输入数据的分布有关</strong>。假设输入一个长度为 n 的数组 <code>nums</code> ，其中 <code>nums</code> 由从 1 至 n 的数字组成，每个数字只出现一次；但元素顺序是随机打乱的，任务目标是返回元素 1 的索引。我们可以得出以下结论。</p><ul><li>当 <code>nums = [?, ?, ..., 1]</code> ，即当末尾元素是 1 时，需要完整遍历数组，<strong>达到最差时间复杂度 O(n)</strong> 。</li><li>当 <code>nums = [1, ?, ?, ...]</code> ，即当首个元素为 1 时，无论数组多长都不需要继续遍历，<strong>达到最佳时间复杂度 Ω(1)</strong> 。</li></ul><p>“最差时间复杂度”对应函数渐近上界，使用大 O 记号表示。相应地，“最佳时间复杂度”对应函数渐近下界，用 Ω 记号表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 生成一个数组，元素为 &#123; 1, 2, ..., n &#125;，顺序被打乱 */</span><br><span class="hljs-type">int</span>[] randomNumbers(<span class="hljs-type">int</span> n) &#123;<br>    Integer[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[n];<br>    <span class="hljs-comment">// 生成数组 nums = &#123; 1, 2, 3, ..., n &#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        nums[i] = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 随机打乱数组元素</span><br>    Collections.shuffle(Arrays.asList(nums));<br>    <span class="hljs-comment">// Integer[] -&gt; int[]</span><br>    <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        res[i] = nums[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">/* 查找数组 nums 中数字 1 所在索引 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">findOne</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-comment">// 当元素 1 在数组头部时，达到最佳时间复杂度 O(1)</span><br>        <span class="hljs-comment">// 当元素 1 在数组尾部时，达到最差时间复杂度 O(n)</span><br>        <span class="hljs-keyword">if</span> (nums[i] == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>值得说明的是，我们在实际中很少使用最佳时间复杂度，因为通常只有在很小概率下才能达到，可能会带来一定的误导性。<strong>而最差时间复杂度更为实用，因为它给出了一个效率安全值</strong>，让我们可以放心地使用算法。</p><p>从上述示例可以看出，最差时间复杂度和最佳时间复杂度只出现于“特殊的数据分布”，这些情况的出现概率可能很小，并不能真实地反映算法运行效率。相比之下，<strong>平均时间复杂度可以体现算法在随机输入数据下的运行效率</strong>，用 Θ 记号来表示。</p><p>对于部分算法，我们可以简单地推算出随机数据分布下的平均情况。比如上述示例，由于输入数组是被打乱的，因此元素 1 出现在任意索引的概率都是相等的，那么算法的平均循环次数就是数组长度的一半 n&#x2F;2 ，平均时间复杂度为 Θ(n&#x2F;2)&#x3D;Θ(n) 。</p><p>但对于较为复杂的算法，计算平均时间复杂度往往比较困难，因为很难分析出在数据分布下的整体数学期望。在这种情况下，我们通常使用最差时间复杂度作为算法效率的评判标准。</p><ul><li>为什么很少看到 Θ 符号？</li></ul><p>可能由于 O 符号过于朗朗上口，因此我们常常使用它来表示平均时间复杂度。但从严格意义上讲，这种做法并不规范。在本书和其他资料中，若遇到类似“平均时间复杂度 O(n)”的表述，请将其直接理解为 Θ(n) 。</p><h2 id="2-空间复杂度"><a href="#2-空间复杂度" class="headerlink" title="2.  空间复杂度"></a>2.  空间复杂度</h2><p>「空间复杂度 space complexity」用于衡量算法占用内存空间随着数据量变大时的增长趋势。这个概念与时间复杂度非常类似，只需将“运行时间”替换为“占用内存空间”。</p><h3 id="1-算法相关空间"><a href="#1-算法相关空间" class="headerlink" title="1.  算法相关空间"></a>1.  算法相关空间</h3><p>算法在运行过程中使用的内存空间主要包括以下几种。</p><ul><li><strong>输入空间</strong>：用于存储算法的输入数据。</li><li><strong>暂存空间</strong>：用于存储算法在运行过程中的变量、对象、函数上下文等数据。</li><li><strong>输出空间</strong>：用于存储算法的输出数据。</li></ul><p>一般情况下，空间复杂度的统计范围是“暂存空间”加上“输出空间”。</p><p>暂存空间可以进一步划分为三个部分。</p><ul><li><strong>暂存数据</strong>：用于保存算法运行过程中的各种常量、变量、对象等。</li><li><strong>栈帧空间</strong>：用于保存调用函数的上下文数据。系统在每次调用函数时都会在栈顶部创建一个栈帧，函数返回后，栈帧空间会被释放。</li><li><strong>指令空间</strong>：用于保存编译后的程序指令，在实际统计中通常忽略不计。</li></ul><p>在分析一段程序的空间复杂度时，<strong>我们通常统计暂存数据、栈帧空间和输出数据三部分</strong>，如下图所示。</p><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/11.png" alt="图片描述"></div><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 类 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    Node next;<br>    Node(<span class="hljs-type">int</span> x) &#123; val = x; &#125;<br>&#125;<br><br><span class="hljs-comment">/* 函数 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">function</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 执行某些操作...</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">algorithm</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;        <span class="hljs-comment">// 输入数据</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;          <span class="hljs-comment">// 暂存数据（常量）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;                <span class="hljs-comment">// 暂存数据（变量）</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 暂存数据（对象）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> function();       <span class="hljs-comment">// 栈帧空间（调用函数）</span><br>    <span class="hljs-keyword">return</span> a + b + c;         <span class="hljs-comment">// 输出数据</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-推算方法"><a href="#2-推算方法" class="headerlink" title="2.  推算方法"></a>2.  推算方法</h3><p>空间复杂度的推算方法与时间复杂度大致相同，只需将统计对象从“操作数量”转为“使用空间大小”。</p><p>而与时间复杂度不同的是，<strong>我们通常只关注最差空间复杂度</strong>。这是因为内存空间是一项硬性要求，我们必须确保在所有输入数据下都有足够的内存空间预留。</p><p>观察以下代码，最差空间复杂度中的“最差”有两层含义。</p><ol><li><strong>以最差输入数据为准</strong>：当 n&lt;10 时，空间复杂度为 O(1) ；但当 n&gt;10 时，初始化的数组 <code>nums</code> 占用 O(n) 空间，因此最差空间复杂度为 O(n) </li><li><strong>以算法运行中的峰值内存为准</strong>：例如，程序在执行最后一行之前，占用 O(1) 空间；当初始化数组 <code>nums</code> 时，程序占用 O(n) 空间，因此最差空间复杂度为 O(n) 。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">algorithm</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;                   <span class="hljs-comment">// O(1)</span><br>    <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10000</span>];    <span class="hljs-comment">// O(1)</span><br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">10</span>)<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n]; <span class="hljs-comment">// O(n)</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在递归函数中，需要注意统计栈帧空间</strong>。观察以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">function</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 执行某些操作</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* 循环 O(1) */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        function();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 递归 O(n) */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">recur</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">return</span> recur(n - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>函数 <code>loop()</code> 和 <code>recur()</code> 的时间复杂度都为 O(n) ，但空间复杂度不同。</p><ul><li>函数 <code>loop()</code> 在循环中调用了 n 次 <code>function()</code> ，每轮中的 <code>function()</code> 都返回并释放了栈帧空间，因此空间复杂度仍为 O(1) 。</li><li>递归函数 <code>recur()</code> 在运行过程中会同时存在 n 个未返回的 <code>recur()</code> ，从而占用 O(n) 的栈帧空间。</li></ul><h3 id="3-常见类型"><a href="#3-常见类型" class="headerlink" title="3. 常见类型"></a>3. 常见类型</h3><p>设输入数据大小为 n ，下图展示了常见的空间复杂度类型（从低到高排列）。</p><center>O(1) < O(log<sub>n</sub>) < O(n) < O(n<sub>2</sub>) < O(2<sup>n</sup>)</center><center>常数阶 < 对数阶 < 线性阶 < 平方阶 < 指数阶</center><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/12.png" alt="图片描述"></div><h4 id="1-常数阶-O-1"><a href="#1-常数阶-O-1" class="headerlink" title="1.常数阶 O(1)"></a>1.常数阶 O(1)</h4><p>常数阶常见于数量与输入数据大小 n 无关的常量、变量、对象。</p><p>需要注意的是，在循环中初始化变量或调用函数而占用的内存，在进入下一循环后就会被释放，因此不会累积占用空间，空间复杂度仍为 O(1) ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 函数 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">function</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 执行某些操作</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 常数阶 */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">constant</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">// 常量、变量、对象占用 O(1) 空间</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10000</span>];<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 循环中的变量占用 O(1) 空间</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 循环中的函数占用 O(1) 空间</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        function();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-线性阶-O-n"><a href="#2-线性阶-O-n" class="headerlink" title="2.线性阶 O(n)"></a>2.线性阶 O(n)</h4><p>线性阶常见于元素数量与 n 成正比的数组、链表、栈、队列等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 线性阶 */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">linear</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">// 长度为 n 的数组占用 O(n) 空间</span><br>    <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    <span class="hljs-comment">// 长度为 n 的列表占用 O(n) 空间</span><br>    List&lt;ListNode&gt; nodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        nodes.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(i));<br>    &#125;<br>    <span class="hljs-comment">// 长度为 n 的哈希表占用 O(n) 空间</span><br>    Map&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        map.put(i, String.valueOf(i));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如下图所示，此函数的递归深度为 n ，即同时存在 n 个未返回的 <code>linear_recur()</code> 函数，使用 O(n) 大小的栈帧空间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 线性阶（递归实现） */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">linearRecur</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;递归 n = &quot;</span> + n);<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span>;<br>    linearRecur(n - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/13.png" alt="图片描述"></div><h4 id="3-平方阶-O-n2"><a href="#3-平方阶-O-n2" class="headerlink" title="3. 平方阶 O(n2)"></a>3. 平方阶 O(n<sup>2</sup>)</h4><p>平方阶常见于矩阵和图，元素数量与 n 成平方关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 平方阶 */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">quadratic</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">// 矩阵占用 O(n^2) 空间</span><br>    <span class="hljs-type">int</span>[][] numMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br>    <span class="hljs-comment">// 二维列表占用 O(n^2) 空间</span><br>    List&lt;List&lt;Integer&gt;&gt; numList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        List&lt;Integer&gt; tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            tmp.add(<span class="hljs-number">0</span>);<br>        &#125;<br>        numList.add(tmp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如下图所示，该函数的递归深度为 n ，在每个递归函数中都初始化了一个数组，长度分别为 n、n−1、…、2、1 ，平均长度为 n&#x2F;2 ，因此总体占用 O(n<sup>2</sup>) 空间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 平方阶（递归实现） */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">quadraticRecur</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 数组 nums 长度为 n, n-1, ..., 2, 1</span><br>    <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    System.out.println(<span class="hljs-string">&quot;递归 n = &quot;</span> + n + <span class="hljs-string">&quot; 中的 nums 长度 = &quot;</span> + nums.length);<br>    <span class="hljs-keyword">return</span> quadraticRecur(n - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/14.png" alt="图片描述"></div><h4 id="4-指数阶-O-2n"><a href="#4-指数阶-O-2n" class="headerlink" title="4.指数阶 O(2n)"></a>4.指数阶 O(2<sup>n</sup>)</h4><p>指数阶常见于二叉树。观察下图 ，层数为 n 的“满二叉树”的节点数量为 2<sup>n</sup>−1 ，占用 O(2<sup>n</sup>) 空间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 指数阶（建立满二叉树） */</span><br>TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">0</span>);<br>    root.left = buildTree(n - <span class="hljs-number">1</span>);<br>    root.right = buildTree(n - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/15.png" alt="图片描述"></div><h4 id="5-对数阶-O-logn⁡"><a href="#5-对数阶-O-logn⁡" class="headerlink" title="5. 对数阶 O(logn⁡)"></a>5. 对数阶 O(log<sub>n</sub>⁡)</h4><p>对数阶常见于分治算法。例如归并排序，输入长度为 n 的数组，每轮递归将数组从中点处划分为两半，形成高度为 log⁡<sub>n</sub> 的递归树，使用 O(log⁡<sub>n</sub>) 栈帧空间。</p><p>再例如将数字转化为字符串，输入一个正整数 n ，它的位数为 ⌊log<sub>10</sub><sup>⁡n</sup>⌋+1 ，即对应字符串长度为 ⌊log<sub>10</sub><sup>⁡n</sup>⌋+1 ，因此空间复杂度为 O(log<sub>10</sub><sup>⁡n</sup>+1)&#x3D;O(log⁡<sub>n</sub>) 。</p><h4 id="6-权衡时间与空间"><a href="#6-权衡时间与空间" class="headerlink" title="6. 权衡时间与空间"></a>6. 权衡时间与空间</h4><p>理想情况下，我们希望算法的时间复杂度和空间复杂度都能达到最优。然而在实际情况中，同时优化时间复杂度和空间复杂度通常非常困难。</p><p><strong>降低时间复杂度通常需要以提升空间复杂度为代价，反之亦然</strong>。我们将牺牲内存空间来提升算法运行速度的思路称为“以空间换时间”；反之，则称为“以时间换空间”。</p><p>选择哪种思路取决于我们更看重哪个方面。在大多数情况下，<mark>时间比空间更宝贵</mark>，因此“以空间换时间”通常是更常用的策略。当然，在数据量很大的情况下，控制空间复杂度也非常重要。</p><h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h2><h3 id="1-重点回顾"><a href="#1-重点回顾" class="headerlink" title="1.  重点回顾"></a>1.  重点回顾</h3><p><strong>算法效率评估</strong></p><ul><li>时间效率和空间效率是衡量算法优劣的两个主要评价指标。</li><li>我们可以通过实际测试来评估算法效率，但难以消除测试环境的影响，且会耗费大量计算资源。</li><li>复杂度分析可以消除实际测试的弊端，分析结果适用于所有运行平台，并且能够揭示算法在不同数据规模下的效率。</li></ul><p><strong>时间复杂度</strong></p><ul><li>时间复杂度用于衡量算法运行时间随数据量增长的趋势，可以有效评估算法效率，但在某些情况下可能失效，如在输入的数据量较小或时间复杂度相同时，无法精确对比算法效率的优劣。</li><li>最差时间复杂度使用大 O 符号表示，对应函数渐近上界，反映当 n 趋向正无穷时，操作数量 T(n) 的增长级别。</li><li>推算时间复杂度分为两步，首先统计操作数量，然后判断渐近上界。</li><li>常见时间复杂度从低到高排列有 O(1)、O(log⁡<sub>n</sub>)、O(n)、O(nlog⁡<sub>n</sub>)、O(n<sup>2</sup>)、O(2<sup>n</sup>) 和 O(n!) 等。</li><li>某些算法的时间复杂度非固定，而是与输入数据的分布有关。时间复杂度分为最差、最佳、平均时间复杂度，最佳时间复杂度几乎不用，因为输入数据一般需要满足严格条件才能达到最佳情况。</li><li>平均时间复杂度反映算法在随机数据输入下的运行效率，最接近实际应用中的算法性能。计算平均时间复杂度需要统计输入数据分布以及综合后的数学期望。</li></ul><p><strong>空间复杂度</strong></p><ul><li>空间复杂度的作用类似于时间复杂度，用于衡量算法占用内存空间随数据量增长的趋势。</li><li>算法运行过程中的相关内存空间可分为输入空间、暂存空间、输出空间。通常情况下，输入空间不纳入空间复杂度计算。暂存空间可分为暂存数据、栈帧空间和指令空间，其中栈帧空间通常仅在递归函数中影响空间复杂度。</li><li>我们通常只关注最差空间复杂度，即统计算法在最差输入数据和最差运行时刻下的空间复杂度。</li><li>常见空间复杂度从低到高排列有 O(1)、O(log⁡<sub>n</sub>)、O(n)、O(n<sup>2</sup>) 和 O(2<sup>n</sup>) 等。</li></ul><h3 id="2-Q-A"><a href="#2-Q-A" class="headerlink" title="2.  Q &amp; A"></a>2.  Q &amp; A</h3><p><strong>Q</strong>：尾递归的空间复杂度是 O(1) 吗？</p><p>理论上，尾递归函数的空间复杂度可以优化至 O(1) 。不过绝大多数编程语言（例如 Java、Python、C++、Go、C# 等）不支持自动优化尾递归，因此通常认为空间复杂度是 O(n) 。</p><p><strong>Q</strong>：函数和方法这两个术语的区别是什么？</p><p>「函数 function」可以被独立执行，所有参数都以显式传递。「方法 method」与一个对象关联，被隐式传递给调用它的对象，能够对类的实例中包含的数据进行操作。</p><p>下面以几种常见的编程语言为例来说明。</p><ul><li>C 语言是过程式编程语言，没有面向对象的概念，所以只有函数。但我们可以通过创建结构体（struct）来模拟面向对象编程，与结构体相关联的函数就相当于其他编程语言中的方法。</li><li>Java 和 C# 是面向对象的编程语言，代码块（方法）通常作为某个类的一部分。静态方法的行为类似于函数，因为它被绑定在类上，不能访问特定的实例变量。</li><li>C++ 和 Python 既支持过程式编程（函数），也支持面向对象编程（方法）。</li></ul><h1 id="二、数据结构"><a href="#二、数据结构" class="headerlink" title="二、数据结构"></a>二、数据结构</h1><h2 id="1-线性与非线性"><a href="#1-线性与非线性" class="headerlink" title="1. 线性与非线性"></a>1. 线性与非线性</h2><p><strong>逻辑结构揭示了数据元素之间的逻辑关系</strong>。在数组和链表中，数据按照一定顺序排列，体现了数据之间的线性关系；而在树中，数据从顶部向下按层次排列，表现出“祖先”与“后代”之间的派生关系；图则由节点和边构成，反映了复杂的网络关系。</p><p>如下图所示，逻辑结构可分为“线性”和“非线性”两大类。线性结构比较直观，指数据在逻辑关系上呈线性排列；非线性结构则相反，呈非线性排列。</p><ul><li><strong>线性数据结构</strong>：数组、链表、栈、队列、哈希表，元素之间是一对一的顺序关系。</li><li><strong>非线性数据结构</strong>：树、堆、图、哈希表。</li></ul><p>非线性数据结构可以进一步划分为树形结构和网状结构。</p><ul><li><strong>树形结构</strong>：树、堆、哈希表，元素之间是一对多的关系。</li><li><strong>网状结构</strong>：图，元素之间是多对多的关系。</li></ul><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/16.png" alt="图片描述"></div><h1 id="三、数组与链表"><a href="#三、数组与链表" class="headerlink" title="三、数组与链表"></a>三、数组与链表</h1><h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a>1. 数组</h2><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/17.png" alt="图片描述" style="zoom:50%"></div><h3 id="1-数组常用操作"><a href="#1-数组常用操作" class="headerlink" title="1.  数组常用操作"></a>1.  数组常用操作</h3><h4 id="1-初始化数组"><a href="#1-初始化数组" class="headerlink" title="1.  初始化数组"></a>1.  初始化数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 无初始值，默认初始化为0</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">// &#123; 0, 0, 0, 0, 0 &#125;</span><br><span class="hljs-comment">// 给定初始值</span><br><span class="hljs-type">int</span>[] nums = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span> &#125;;<br></code></pre></td></tr></table></figure><h4 id="2-访问元素"><a href="#2-访问元素" class="headerlink" title="2.  访问元素"></a>2.  访问元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 整型数组</span><br><span class="hljs-type">int</span>[] array1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> array1[<span class="hljs-number">2</span>];<br>System.out.println(a);   <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 字符串形式数组</span><br>String[] array2 = &#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> array2[<span class="hljs-number">2</span>];<br>System.out.println(b);  <span class="hljs-comment">// c</span><br><br><span class="hljs-comment">// 循环取值</span><br>String[] array3 = &#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array3.length ; i++) &#123;<br>    System.out.print(array3[i]);    <span class="hljs-comment">// abcde</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-添加元素"><a href="#3-添加元素" class="headerlink" title="3. 添加元素"></a>3. 添加元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test12</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;      <span class="hljs-comment">// 逻辑大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;  <span class="hljs-comment">// 容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] arry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[capacity];  <span class="hljs-comment">// 创建静态数组</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addList</span><span class="hljs-params">(<span class="hljs-type">int</span> element)</span>&#123;<br>        arry[size] = element;<br>        size++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-插入元素"><a href="#3-插入元素" class="headerlink" title="3. 插入元素"></a>3. 插入元素</h4><p>如果想在数组中间插入一个元素，则需要将该元素之后的所有元素都向后移动一位，之后再把元素赋值给该索引。</p><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/19.png" alt="图片描述" style="zoom:50%"></div><p>值得注意的是，由于数组的长度是固定的，因此插入一个元素必定会导致数组尾部元素“丢失”。我们将这个问题的解决方案留在“列表”章节中讨论。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 在数组的索引 index 处插入元素 num */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// 把索引 index 以及之后的所有元素向后移动一位</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>; i &gt; index; i--) &#123;<br>        nums[i] = nums[i - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-comment">// 将 num 赋给 index 处的元素</span><br>    nums[index] = num;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-删除元素"><a href="#4-删除元素" class="headerlink" title="4. 删除元素"></a>4. 删除元素</h4><p>如下图所示，若想删除索引 i 处的元素，则需要把索引 i 之后的元素都向前移动一位。</p><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/19.png" alt="图片描述"></div><p>请注意，删除元素完成后，原先末尾的元素变得“无意义”了，所以我们无须特意去修改它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 删除索引 index 处的元素 */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// 把索引 index 之后的所有元素向前移动一位</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> index; i &lt; nums.length - <span class="hljs-number">1</span>; i++) &#123;<br>        nums[i] = nums[i + <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总的来看，数组的插入与删除操作有以下缺点。</p><ul><li><strong>时间复杂度高</strong>：数组的插入和删除的平均时间复杂度均为 O(n) ，其中 n 为数组长度。</li><li><strong>丢失元素</strong>：由于数组的长度不可变，因此在插入元素后，超出数组长度范围的元素会丢失。</li><li><strong>内存浪费</strong>：我们可以初始化一个比较长的数组，只用前面一部分，这样在插入数据时，丢失的末尾元素都是“无意义”的，但这样做会造成部分内存空间浪费。</li></ul><h4 id="5-遍历数组"><a href="#5-遍历数组" class="headerlink" title="5. 遍历数组"></a>5. 遍历数组</h4><p>在大多数编程语言中，我们既可以通过索引遍历数组，也可以直接遍历获取数组中的每个元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 遍历数组 */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">traverse</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 通过索引遍历数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        count += nums[i];<br>    &#125;<br>    <span class="hljs-comment">// 直接遍历数组元素</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>        count += num;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-查找元素"><a href="#6-查找元素" class="headerlink" title="6.  查找元素"></a>6.  查找元素</h4><p>在数组中查找指定元素需要遍历数组，每轮判断元素值是否匹配，若匹配则输出对应索引。</p><p>因为数组是线性数据结构，所以上述查找操作被称为“线性查找”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 在数组中查找指定元素 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] == target)<br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-扩容数组"><a href="#7-扩容数组" class="headerlink" title="7. 扩容数组"></a>7. 扩容数组</h4><p>在复杂的系统环境中，程序难以保证数组之后的内存空间是可用的，从而无法安全地扩展数组容量。因此在大多数编程语言中，<strong>数组的长度是不可变的</strong>。</p><p>如果我们希望扩容数组，则需重新建立一个更大的数组，然后把原数组元素依次复制到新数组。这是一个 O(n) 的操作，在数组很大的情况下非常耗时。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 扩展数组长度 */</span><br><span class="hljs-type">int</span>[] extend(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> enlarge) &#123;<br>    <span class="hljs-comment">// 初始化一个扩展长度后的数组</span><br>    <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length + enlarge];<br>    <span class="hljs-comment">// 将原数组中的所有元素复制到新数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        res[i] = nums[i];<br>    &#125;<br>    <span class="hljs-comment">// 返回扩展后的新数组</span><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-数组的优点与局限性"><a href="#2-数组的优点与局限性" class="headerlink" title="2. 数组的优点与局限性"></a>2. 数组的优点与局限性</h3><p>数组存储在连续的内存空间内，且元素类型相同。这种做法包含丰富的先验信息，系统可以利用这些信息来优化数据结构的操作效率。</p><ul><li><strong>空间效率高</strong>：数组为数据分配了连续的内存块，无须额外的结构开销。</li><li><strong>支持随机访问</strong>：数组允许在 O(1) 时间内访问任何元素。</li><li><strong>缓存局部性</strong>：当访问数组元素时，计算机不仅会加载它，还会缓存其周围的其他数据，从而借助高速缓存来提升后续操作的执行速度。</li></ul><p>连续空间存储是一把双刃剑，其存在以下局限性。</p><ul><li><strong>插入与删除效率低</strong>：当数组中元素较多时，插入与删除操作需要移动大量的元素。</li><li><strong>长度不可变</strong>：数组在初始化后长度就固定了，扩容数组需要将所有数据复制到新数组，开销很大。</li><li><strong>空间浪费</strong>：如果数组分配的大小超过实际所需，那么多余的空间就被浪费了。</li></ul><h3 id="3-数组典型应用"><a href="#3-数组典型应用" class="headerlink" title="3. 数组典型应用"></a>3. 数组典型应用</h3><p>数组是一种基础且常见的数据结构，既频繁应用在各类算法之中，也可用于实现各种复杂数据结构。</p><ul><li><strong>随机访问</strong>：如果我们想随机抽取一些样本，那么可以用数组存储，并生成一个随机序列，根据索引实现随机抽样。</li><li><strong>排序和搜索</strong>：数组是排序和搜索算法最常用的数据结构。快速排序、归并排序、二分查找等都主要在数组上进行。</li><li><strong>查找表</strong>：当需要快速查找一个元素或其对应关系时，可以使用数组作为查找表。假如我们想实现字符到 ASCII 码的映射，则可以将字符的 ASCII 码值作为索引，对应的元素存放在数组中的对应位置。</li><li><strong>机器学习</strong>：神经网络中大量使用了向量、矩阵、张量之间的线性代数运算，这些数据都是以数组的形式构建的。数组是神经网络编程中最常使用的数据结构。</li><li><strong>数据结构实现</strong>：数组可以用于实现栈、队列、哈希表、堆、图等数据结构。例如，图的邻接矩阵表示实际上是一个二维数组。</li></ul><h2 id="2-链表"><a href="#2-链表" class="headerlink" title="2. 链表"></a>2. 链表</h2><p>内存空间是所有程序的公共资源，在一个复杂的系统运行环境下，空闲的内存空间可能散落在内存各处。我们知道，存储数组的内存空间必须是连续的，而当数组非常大时，内存可能无法提供如此大的连续空间。此时链表的灵活性优势就体现出来了。</p><p>「链表 linked list」是一种线性数据结构，其中的每个元素都是一个节点对象，各个节点通过“引用”相连接。引用记录了下一个节点的内存地址，通过它可以从当前节点访问到下一个节点。</p><p>链表的设计使得各个节点可以分散存储在内存各处，它们的内存地址无须连续。</p><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/21.png" alt="图片描述"></div><p>如上图所示，链表的组成单位是「节点 node」对象。每个节点都包含两项数据：节点的“值”和指向下一节点的“引用”。</p><ul><li>链表的首个节点被称为“头节点”，最后一个节点被称为“尾节点”。</li><li>尾节点指向的是“空”，它在 Java、C++ 和 Python 中分别被记为 <code>null</code>、<code>nullptr</code> 和 <code>None</code> 。</li><li>在 C、C++、Go 和 Rust 等支持指针的语言中，上述“引用”应被替换为“指针”。</li></ul><p>如以下代码所示，链表节点 <code>ListNode</code> 除了包含值，还需额外保存一个引用（指针）。因此在相同数据量下，<strong>链表比数组占用更多的内存空间</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 链表节点类 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;        <span class="hljs-comment">// 节点值</span><br>    ListNode next;  <span class="hljs-comment">// 指向下一节点的引用</span><br>    ListNode(<span class="hljs-type">int</span> x) &#123; val = x; &#125;  <span class="hljs-comment">// 构造函数</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-链表常用操作"><a href="#1-链表常用操作" class="headerlink" title="1.  链表常用操作"></a>1.  链表常用操作</h3><h4 id="1-初始化链表"><a href="#1-初始化链表" class="headerlink" title="1.  初始化链表"></a>1.  初始化链表</h4><p>建立链表分为两步，第一步是初始化各个节点对象，第二步是构建节点之间的引用关系。初始化完成后，我们就可以从链表的头节点出发，通过引用指向 <code>next</code> 依次访问所有节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 初始化链表 1 -&gt; 3 -&gt; 2 -&gt; 5 -&gt; 4 */</span><br><span class="hljs-comment">// 初始化各个节点</span><br><span class="hljs-type">ListNode</span> <span class="hljs-variable">n0</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">1</span>);<br><span class="hljs-type">ListNode</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">3</span>);<br><span class="hljs-type">ListNode</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">2</span>);<br><span class="hljs-type">ListNode</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">5</span>);<br><span class="hljs-type">ListNode</span> <span class="hljs-variable">n4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">4</span>);<br><span class="hljs-comment">// 构建节点之间的引用</span><br>n0.next = n1;<br>n1.next = n2;<br>n2.next = n3;<br>n3.next = n4;<br></code></pre></td></tr></table></figure><p>数组整体是一个变量，比如数组 <code>nums</code> 包含元素 <code>nums[0]</code> 和 <code>nums[1]</code> 等，而链表是由多个独立的节点对象组成的。<strong>我们通常将头节点当作链表的代称</strong>，比如以上代码中的链表可记作链表 <code>n0</code> 。</p><h4 id="2-插入节点"><a href="#2-插入节点" class="headerlink" title="2.  插入节点"></a>2.  插入节点</h4><p>在链表中插入节点非常容易。如图 4-6 所示，假设我们想在相邻的两个节点 <code>n0</code> 和 <code>n1</code> 之间插入一个新节点 <code>P</code> ，<strong>则只需改变两个节点引用（指针）即可</strong>，时间复杂度为 O(1) 。</p><p>相比之下，在数组中插入元素的时间复杂度为 O(n) ，在大数据量下的效率较低。</p><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/22.png" alt="图片描述"></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 在链表的节点 n0 之后插入节点 P */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(ListNode n0, ListNode P)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> n0.next;<br>    P.next = n1;<br>    n0.next = P;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-删除节点"><a href="#3-删除节点" class="headerlink" title="3.  删除节点"></a>3.  删除节点</h4><p>如下图所示，在链表中删除节点也非常方便，<strong>只需改变一个节点的引用（指针）即可</strong>。</p><p>请注意，尽管在删除操作完成后节点 <code>P</code> 仍然指向 <code>n1</code> ，但实际上遍历此链表已经无法访问到 <code>P</code> ，这意味着 <code>P</code> 已经不再属于该链表了。</p><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/23.png" alt="图片描述"></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 删除链表的节点 n0 之后的首个节点 */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(ListNode n0)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n0.next == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// n0 -&gt; P -&gt; n1</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">P</span> <span class="hljs-operator">=</span> n0.next;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> P.next;<br>    n0.next = n1;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-访问节点"><a href="#4-访问节点" class="headerlink" title="4.  访问节点"></a>4.  访问节点</h4><p><strong>在链表中访问节点的效率较低</strong>。如上一节所述，我们可以在 O(1) 时间下访问数组中的任意元素。链表则不然，程序需要从头节点出发，逐个向后遍历，直至找到目标节点。也就是说，访问链表的第 i 个节点需要循环 i−1 轮，时间复杂度为 O(n) 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 访问链表中索引为 index 的节点 */</span><br>ListNode <span class="hljs-title function_">access</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        head = head.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-查找节点"><a href="#5-查找节点" class="headerlink" title="5.  查找节点"></a>5.  查找节点</h4><p>遍历链表，查找其中值为 <code>target</code> 的节点，输出该节点在链表中的索引。此过程也属于线性查找。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 在链表中查找值为 target 的首个节点 */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (head.val == target)<br>            <span class="hljs-keyword">return</span> index;<br>        head = head.next;<br>        index++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-数组-vs-链表"><a href="#2-数组-vs-链表" class="headerlink" title="2.  数组 vs. 链表"></a>2.  数组 vs. 链表</h3><p>下表总结了数组和链表的各项特点并对比了操作效率。由于它们采用两种相反的存储策略，因此各种性质和操作效率也呈现对立的特点。</p><center>数组与链表的效率对比</center><table><thead><tr><th align="left"></th><th align="left">数组</th><th align="left">链表</th></tr></thead><tbody><tr><td align="left">存储方式</td><td align="left">连续内存空间</td><td align="left">分散内存空间</td></tr><tr><td align="left">容量扩展</td><td align="left">长度不可变</td><td align="left">可灵活扩展</td></tr><tr><td align="left">内存效率</td><td align="left">元素占用内存少、但可能浪费空间</td><td align="left">元素占用内存多</td></tr><tr><td align="left">访问元素</td><td align="left">O(1)</td><td align="left">O(n)</td></tr><tr><td align="left">添加元素</td><td align="left">O(n)</td><td align="left">O(1)</td></tr><tr><td align="left">删除元素</td><td align="left">O(n)</td><td align="left">O(1)</td></tr></tbody></table><h3 id="3-常见链表类型"><a href="#3-常见链表类型" class="headerlink" title="3.  常见链表类型"></a>3.  常见链表类型</h3><p>如下图所示，常见的链表类型包括三种。</p><ul><li><strong>单向链表</strong>：即前面介绍的普通链表。单向链表的节点包含值和指向下一节点的引用两项数据。我们将首个节点称为头节点，将最后一个节点称为尾节点，尾节点指向空 <code>None</code> 。</li><li><strong>环形链表</strong>：如果我们令单向链表的尾节点指向头节点（首尾相接），则得到一个环形链表。在环形链表中，任意节点都可以视作头节点。</li><li><strong>双向链表</strong>：与单向链表相比，双向链表记录了两个方向的引用。双向链表的节点定义同时包含指向后继节点（下一个节点）和前驱节点（上一个节点）的引用（指针）。相较于单向链表，双向链表更具灵活性，可以朝两个方向遍历链表，但相应地也需要占用更多的内存空间。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 双向链表节点类 */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;        <span class="hljs-comment">// 节点值</span><br>    ListNode next;  <span class="hljs-comment">// 指向后继节点的引用</span><br>    ListNode prev;  <span class="hljs-comment">// 指向前驱节点的引用</span><br>    ListNode(<span class="hljs-type">int</span> x) &#123; val = x; &#125;  <span class="hljs-comment">// 构造函数</span><br>&#125;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/24.png" alt="图片描述"></div><h3 id="4-链表典型应用"><a href="#4-链表典型应用" class="headerlink" title="4.  链表典型应用"></a>4.  链表典型应用</h3><p>单向链表通常用于实现栈、队列、哈希表和图等数据结构。</p><ul><li><strong>栈与队列</strong>：当插入和删除操作都在链表的一端进行时，它表现出先进后出的特性，对应栈；当插入操作在链表的一端进行，删除操作在链表的另一端进行，它表现出先进先出的特性，对应队列。</li><li><strong>哈希表</strong>：链式地址是解决哈希冲突的主流方案之一，在该方案中，所有冲突的元素都会被放到一个链表中。</li><li><strong>图</strong>：邻接表是表示图的一种常用方式，其中图的每个顶点都与一个链表相关联，链表中的每个元素都代表与该顶点相连的其他顶点。</li></ul><p>双向链表常用于需要快速查找前一个和后一个元素的场景。</p><ul><li><strong>高级数据结构</strong>：比如在红黑树、B 树中，我们需要访问节点的父节点，这可以通过在节点中保存一个指向父节点的引用来实现，类似于双向链表。</li><li><strong>浏览器历史</strong>：在网页浏览器中，当用户点击前进或后退按钮时，浏览器需要知道用户访问过的前一个和后一个网页。双向链表的特性使得这种操作变得简单。</li><li><strong>LRU 算法</strong>：在缓存淘汰（LRU）算法中，我们需要快速找到最近最少使用的数据，以及支持快速添加和删除节点。这时候使用双向链表就非常合适。</li></ul><p>环形链表常用于需要周期性操作的场景，比如操作系统的资源调度。</p><ul><li><strong>时间片轮转调度算法</strong>：在操作系统中，时间片轮转调度算法是一种常见的 CPU 调度算法，它需要对一组进程进行循环。每个进程被赋予一个时间片，当时间片用完时，CPU 将切换到下一个进程。这种循环操作可以通过环形链表来实现。</li><li><strong>数据缓冲区</strong>：在某些数据缓冲区的实现中，也可能会使用环形链表。比如在音频、视频播放器中，数据流可能会被分成多个缓冲块并放入一个环形链表，以便实现无缝播放。</li></ul><h1 id="十、搜索"><a href="#十、搜索" class="headerlink" title="十、搜索"></a>十、搜索</h1><h2 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h2><p>二分查找算法也称折半查找，是一种非常高效的工作于有序数组的查找算法。后续的课程中还会学习更多的查找算法，但在此之前，不妨用它作为入门。</p><h3 id="1-需求说明"><a href="#1-需求说明" class="headerlink" title="1. 需求说明"></a>1. 需求说明</h3><div style="text-align:center;gap:5px">    <img src="/img/algorithm_pic/2.png" alt="图片描述"></div><h3 id="2-java实现"><a href="#2-java实现" class="headerlink" title="2. java实现"></a>2. java实现</h3><h4 id="1-基础版（左闭右闭）"><a href="#1-基础版（左闭右闭）" class="headerlink" title="1. 基础版（左闭右闭）"></a>1. 基础版（左闭右闭）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Params：a - 待查找的升序数组</span><br><span class="hljs-comment">//        target - 待查找的目标值</span><br><span class="hljs-comment">// Returns：找到则返回值索引</span><br><span class="hljs-comment">//    找不到返回 -1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;   <span class="hljs-comment">//设置前后的指针</span><br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;           <span class="hljs-comment">// i-j范围内有东西</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;     <span class="hljs-comment">// 无符号右移，相当于除2后取整</span><br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<span class="hljs-comment">// 目标值在左边</span><br>            j = m - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;<span class="hljs-comment">// 目标值在右边</span><br>            i = m + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;                   <span class="hljs-comment">// 找到了</span><br>            <span class="hljs-keyword">return</span> m;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-进阶版（左闭右开）"><a href="#2-进阶版（左闭右开）" class="headerlink" title="2. 进阶版（左闭右开）"></a>2. 进阶版（左闭右开）</h4><p>左边指针只作为一个边界，不参与运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length;   <br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;           <br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;     <br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<br>            j = m ;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;<br>            i = m + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;                   <br>            <span class="hljs-keyword">return</span> m;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-复杂度"><a href="#3-复杂度" class="headerlink" title="3. 复杂度"></a>3. 复杂度</h3><p>时间复杂度：用来衡量一个算法的执行，随数据规模增大，而增长的时间成本</p><ul><li><p>最坏情况：<code>O(log n)</code></p></li><li><p>最好情况：如果待查找元素恰好在数组中央，只需要循环一次 <code>O(1)</code></p></li></ul><p>空间复杂度：用来衡量一个算法执行随数据规模增大，而增长的<strong>额外</strong>空间成本</p><ul><li>需要常数个指针 <code>i,j,m</code>，因此额外占用的空间是 <code>O(1)</code></li></ul><h3 id="4-tips"><a href="#4-tips" class="headerlink" title="4. tips"></a>4. tips</h3><ol><li>无符号右移：<code>int m = (i + j) &gt;&gt;&gt; 1;</code>，底层原理是将十进制数字转为2进制数字，并将二进制数向右移动1位</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">偶数无符号右移</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">除2</span><br><span class="hljs-number">16</span>         <span class="hljs-bullet">-</span> <span class="hljs-number">0000 </span><span class="hljs-number">1000</span> <span class="hljs-bullet">-</span> <span class="hljs-number">16</span><br><span class="hljs-string">(16)</span> <span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-number">1</span> <span class="hljs-bullet">-</span> <span class="hljs-number">0000 </span><span class="hljs-number">0100</span> <span class="hljs-bullet">-</span> <span class="hljs-number">8</span><br><br><span class="hljs-string">基数数无符号右移</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">除2-1</span><br><span class="hljs-number">9</span>         <span class="hljs-bullet">-</span> <span class="hljs-number">0000 </span><span class="hljs-number">0101</span> <span class="hljs-bullet">-</span> <span class="hljs-number">9</span><br><span class="hljs-string">(9)</span> <span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-number">1</span> <span class="hljs-bullet">-</span> <span class="hljs-number">0000 </span><span class="hljs-number">0010</span> <span class="hljs-bullet">-</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><ol start="2"><li>用<code>int m = (i + j) &gt;&gt;&gt; 1;</code>，而不用<code>int m = (i + j) / 2;</code>的原因，后者数字过大容易超出int限制出现负值</li></ol><h1 id="二、数据结构-1"><a href="#二、数据结构-1" class="headerlink" title="二、数据结构"></a>二、数据结构</h1><h2 id="1-数组-1"><a href="#1-数组-1" class="headerlink" title="1. 数组"></a>1. 数组</h2>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django Web框架</title>
    <link href="/2023/11/29/Django%20Web%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/11/29/Django%20Web%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a><font color=#1E90FF>一、准备工作</font></h1><h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a><font color=#1E90FF>1. 新建项目</font></h2><ol><li><p>需要 pycharm 专业版</p></li><li><p>复用解释器</p><div style="text-align:center;gap:5px"> <img src="/img/django_pic/2.jpg" alt="图片描述" style="zoom:35%;"> <img src="/img/django_pic/3.jpg" alt="图片描述" style="zoom:35%;"></div></li><li><p>创建django后的第一步，删除两红框部分</p><ol><li>templates文件夹</li><li>settings中templates中dirs，仅保留空列表<div style="text-align:center"> <img src="/img/django_pic/4.jpg" alt="图片描述" style="zoom:45%;"></div></li></ol></li></ol><h2 id="2-目录"><a href="#2-目录" class="headerlink" title="2. 目录"></a><font color=#1E90FF>2. 目录</font></h2><ol><li><p>目录概念</p><div style="text-align:center"> <img src="/img/django_pic/5.jpg" alt="图片描述" style="zoom:45%;"></div></li><li><p>新建django中的子app项目</p><ol><li>pycharm终端中输入：<code>python manage.py startapp app01</code>（想要生成的文件夹名）</li><li>生成的目录概念如下 <div style="text-align:center"> <img src="/img/django_pic/6.jpg" alt="图片描述" style="zoom:45%;"> </div></li></ol></li><li><p>于终端路径下输入<code>tree</code>，可以获得此文件下的所有文件架构</p><div style="text-align:center"> <img src="/img/django_pic/7.jpg" alt="图片描述"></div></li><li><p>各软件版本<br>python3.11+django2.2.3+mysql5.7.31</p></li></ol><h2 id="3-新建app"><a href="#3-新建app" class="headerlink" title="3. 新建app"></a><font color=#1E90FF>3. 新建app</font></h2><ol><li>查看app名字【app】</li><li>将app注册【settings】<div style="text-align:center;gap:5px"> <img src="/img/django_pic/8.jpg" alt="图片描述" style="zoom:50%;"> <img src="/img/django_pic/9.jpg" alt="图片描述" style="zoom:55%;"></div></li></ol><h1 id="二、基本框架"><a href="#二、基本框架" class="headerlink" title="二、基本框架"></a><font color=#1E90FF>二、基本框架</font></h1><h2 id="1-地址-后端"><a href="#1-地址-后端" class="headerlink" title="1. 地址-&gt;后端"></a><font color=#1E90FF>1. 地址-&gt;后端</font></h2><ol><li>创建app的视图【views】</li><li>链接app视图与app路径间的关系【urls】</li><li>文本的输出方式为<code>HttpResponse(&quot;欢迎使用&quot;)</code><div style="text-align:center;gap:5px"> <img src="/img/django_pic/10.jpg" alt="图片描述" style="zoom:55%;"> <img src="/img/django_pic/11.jpg" alt="图片描述" style="zoom:40%;"></div></li></ol><h2 id="1-后端-前端"><a href="#1-后端-前端" class="headerlink" title="1. 后端-&gt;前端"></a><font color=#1E90FF>1. 后端-&gt;前端</font></h2><ol><li>默认会去此app目录下的templates文件夹寻找html文件【views】</li><li>html的输出方式为<code>return render(request, &quot;user_list.html&quot;)</code><div style="text-align:center;gap:5px"> <img src="/img/django_pic/12.jpg" alt="图片描述" style="zoom:50%;">  <img src="/img/django_pic/13.jpg" alt="图片描述" style="zoom:50%;"></div></li></ol><h2 id="3-启动运行程序"><a href="#3-启动运行程序" class="headerlink" title="3. 启动运行程序"></a><font color=#1E90FF>3. 启动运行程序</font></h2><div style="text-align:center">    <img src="/img/django_pic/14.jpg" alt="图片描述"></div><h2 id="4-静态文件-导入插件"><a href="#4-静态文件-导入插件" class="headerlink" title="4. 静态文件 - 导入插件"></a><font color=#1E90FF>4. 静态文件 - 导入插件</font></h2><ul><li>将<code>css、bootstrap、fontawesome</code>等插件集中导入至父模板中</li></ul><div style="text-align:center">    <img src="/img/django_pic/62.jpg" alt="图片描述" style="zoom:30%"></div><h1 id="三、模板语法"><a href="#三、模板语法" class="headerlink" title="三、模板语法"></a><font color=#1E90FF>三、模板语法</font></h1><h2 id="1-占位符"><a href="#1-占位符" class="headerlink" title="1. 占位符"></a><font color=#1E90FF>1. 占位符</font></h2><ol><li>目的：将后端的数据传递给前端</li><li>整体构成：</li></ol><div style="text-align:center;gap:5px">    <img src="/img/django_pic/16.jpg" alt="图片描述" style="zoom:60%;"></div>3. 后端样式：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;xx.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;name&#x27;</span>:name, <span class="hljs-string">&#x27;skills&#x27;</span>:skills, <span class="hljs-string">&#x27;lists&#x27;</span>:lists&#125;)<br></code></pre></td></tr></table></figure><ol start="4"><li>前端样式：</li></ol><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">// 使用双花括号接收数据</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; name &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">// 使用花括号+百分号，进行判断或循环遍历</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> skill <span class="hljs-keyword">in</span> skills %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; skill &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">// 使用小数点调用数据</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; lists.0 &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="2-父模版的继承"><a href="#2-父模版的继承" class="headerlink" title="2. 父模版的继承"></a><font color=#1E90FF>2. 父模版的继承</font></h2><ol><li>各子模版公用一套父模版，修改一处即可修改全部，具体代码如下：</li><li>在templates文件夹下，新建layout.html文件，将父模板中的固定内容填入模板中，并留下占位符</li></ol><p><code>layout.html --- 父模板</code></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"># 此处为父模板统一固定的内容</span><br><span class="language-xml"></span><br><span class="language-xml"># 为填入灵活内容部分，预留占位符</span><br><span class="language-xml"># 若有多处修改，可预留多个占位符，占位符名称不能相同</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content_style %&#125;</span><span class="language-xml"> </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"># 此处为父模板统一固定的内容</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content_body %&#125;</span><span class="language-xml"> </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><p><code>子模板.html</code></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"># 导入模板</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">extends</span></span> &#x27;layout.html&#x27; %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content_style %&#125;</span><span class="language-xml"> 此处为子模板中的内容 </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content_body %&#125;</span><span class="language-xml"> 此处为子模板中的内容 </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="四、请求"><a href="#四、请求" class="headerlink" title="四、请求"></a><font color=#1E90FF>四、请求</font></h1><h2 id="1-json请求"><a href="#1-json请求" class="headerlink" title="1. json请求"></a><font color=#1E90FF>1. json请求</font></h2><ol><li><p>发送请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>url = <span class="hljs-string">&#x27;http://10.221.113.135:8000/Web_API/log_auto_analysis&#x27;</span><br>data = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">30</span>&#125;<br><br>headers = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>&#125;<br><br>response = requests.post(url, data=json.dumps(data), headers=headers)<br><br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure></li><li><p>获取参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_view</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        data = json.loads(request.body)<br>        name = data.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>        age = data.get(<span class="hljs-string">&#x27;age&#x27;</span>)<br>        <br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(data) == <span class="hljs-built_in">dict</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;传输成功&#x27;</span>)<br><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;传输失败&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-post请求"><a href="#2-post请求" class="headerlink" title="2. post请求"></a><font color=#1E90FF>2. post请求</font></h2><ol><li><p>请求特点</p><ol><li><p>浏览器向网站发送请求时，页面自动刷新</p></li><li><p>post请求提交的数据不会在url中体现，只能使用表单提交方式</p></li><li><p>后端拿到请求后，得到的数据是字符串类型的</p></li><li><p>在前端界面中，对于post请求，需要添加<code>&#123;% csrf_token %&#125;</code></p></li></ol></li><li><p>发送请求</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://10.221.118.6:8000/logtest/&quot;</span><br>payload = &#123;<span class="hljs-string">&#x27;classification&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br><span class="hljs-string">&#x27;branch&#x27;</span>: <span class="hljs-string">&#x27;2&#x27;</span>,<br><span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-string">&#x27;3&#x27;</span>&#125;<br><br>headers = &#123;&#125;<br>response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, url, headers=headers, data=payload)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><ol start="2"><li>获取请求</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_view</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br><br>        classification = request.POST.get(<span class="hljs-string">&#x27;classification&#x27;</span>)<br>        branch = request.POST.get(<span class="hljs-string">&#x27;branch&#x27;</span>)<br>        time = request.POST.get(<span class="hljs-string">&#x27;time&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;拿到用户信息&#x27;</span>, classification, <span class="hljs-string">&#x27;branch:&#x27;</span>, branch, <span class="hljs-string">&#x27;time:&#x27;</span>, time)<br><br>      <br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;wnn_test01.html&quot;</span>, &#123;<span class="hljs-string">&#x27;classification&#x27;</span>: classification&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>前端代码</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-inline&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;team_name_form&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><br>    &#123;% csrf_token %&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail2&quot;</span>&gt;</span>您想要查询的小组名称为：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;team_name&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;display: none&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;&#x27;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>PPC<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>BT<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>System<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>Multimedia<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;确认&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-get请求"><a href="#3-get请求" class="headerlink" title="3. get请求"></a><font color=#1E90FF>3. get请求</font></h2><ol><li><p>请求特点</p><ol><li><p>浏览器向网站发送请求时，页面自动刷新</p></li><li><p>请求、跳转、像后台传入数据，数据会拼接在url上。可以使用url方式或表单提交方式</p></li><li><p>后端拿到请求后，得到的数据是字符串类型的</p></li></ol></li><li><p>携带参数</p><ol><li>在url中添加参数之前需要添加<code>？</code>号</li><li>在不同参数之间需要添加<code>&amp;</code>号</li></ol><ul><li>例：<code>http://127.0.0.1:8000/get_message/?username=11&amp;mobile=22</code></li></ul></li><li><p>获取请求</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">jira_message_reminder</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:  <span class="hljs-comment"># 获取判断请求方式</span><br>        team_name = request.GET.get(<span class="hljs-string">&quot;team_name&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;team_name&#x27;</span>, team_name)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;xxx.html&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="4-Ajax请求"><a href="#4-Ajax请求" class="headerlink" title="4. Ajax请求*"></a><font color=#1E90FF>4. Ajax请求*</font></h2><h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h3><ol><li>偷偷的向后台发送请求，页面不会做任何刷新</li><li><mark>依赖jQuery</mark>，需要编写ajax代码</li><li>返回值为JSON格式</li></ol><h3 id="2-前端"><a href="#2-前端" class="headerlink" title="2. 前端"></a>2. 前端</h3><ol><li>ajax请求记得携带参数<code>data: $(&quot;#form&quot;).serialize(),</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;% extend <span class="hljs-string">&#x27;layout.html&#x27;</span> %&#125;<br><br>&#123;% block countent %&#125;<br>    &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;container&#x27;</span>&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>将前端输入的数据传递给后端<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>        &lt;form id=&quot;form&quot;&gt;<br>            &lt;input type=&quot;text&quot; name=&quot;user&quot; placeholder=&quot;姓名&quot;&gt;<br>            &lt;input type=&quot;text&quot; name=&quot;age&quot; placeholder=&quot;年龄&quot;&gt;<br>        &lt;/form&gt;<br>        &lt;input id=&quot;btn1&quot; type=&quot;button&quot; class=&quot;btn btn-primary&quot; value=&quot;点击&quot;&gt;<br>    &lt;/div&gt;<br>&#123;% endblock %&#125;<br><br>&#123;% block js %&#125;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        $(function() &#123;<br>            // 页面框架加载完成之后代码自动执行<br>            bindBtn1Event();<br>        &#125;)<br>        <br>        function bindBtnEvent()&#123;<br>            $(&quot;#btn1&quot;).click(function () &#123;<br>                // 当点击btn按钮时，会向后台自动发送ajax请求<br>                $.ajax(&#123;<br>                    url: &#x27;/task/ajax/&#x27;,<br>                    type: &#x27;post&#x27;,<br>                    data: $(&quot;#form&quot;).serialize(),<br>                    <br>                    //将前端返回的值进行反序列化，转为JSON格式<br>                    dataType:&quot;JSON&quot;,<br>                    success: function (res) &#123;<br>                        console.log(res):<br>                    &#125;<br>                &#125;)<br>            &#125;)<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="3-后端"><a href="#3-后端" class="headerlink" title="3. 后端"></a>3. 后端</h3><ol><li>若直接参考上图的get请求，则会报错forbidden。需要在views.py文件中添加，去除post请求的csrf认证部分<mark>@csrf_exempt</mark></li><li>将字符串形式数据转为JSON形式数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse  <span class="hljs-comment"># 接口返回的是json，需要引入的信息</span><br><span class="hljs-keyword">from</span> django.views.decorators.csrf <span class="hljs-keyword">import</span> csrf_exempt <span class="hljs-comment"># 免除csrf认证</span><br><br><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task_ajax</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># data_dict = request.GET</span><br>    data_dict = request.POST<br>    <span class="hljs-built_in">print</span>(data_dict[<span class="hljs-string">&#x27;user&#x27;</span>])<br>    <span class="hljs-built_in">print</span>(data_dict[<span class="hljs-string">&#x27;age&#x27;</span>])<br>    <br>    <span class="hljs-keyword">return</span> JsonResponse(data_dict)<br></code></pre></td></tr></table></figure><h2 id="5-返回值"><a href="#5-返回值" class="headerlink" title="5. 返回值"></a><font color=#1E90FF>5. 返回值</font></h2><ol><li><code>return HttpResponse</code>：返回具体内容，将字符串返回给请求者</li><li><code>return render(request,&#39;someting.html&#39;,&#123;&quot;title&quot;:&quot;xxx&quot;&#125;)</code>：读取HTML中内容 + 渲染（替换），生成字符串并返回给用户浏览器</li><li><code>return redirect(&quot;http://xxx.xxx&quot;)</code>：让浏览器重定向到其他页面<div style="text-align:center"> <img src="/img/django_pic/18.jpg" alt="图片描述"></div></li></ol><h1 id="五、用户登录案例"><a href="#五、用户登录案例" class="headerlink" title="五、用户登录案例"></a>五、用户登录案例</h1><ol><li><p>用户get请求访问页面，浏览器post请求返回账户和密码</p></li><li><p>如果账户密码正确，则重定向到新的url</p></li><li><p>如果不正确，则返回html + 额外渲染的内容</p><div style="text-align:center"> <img src="/img/django_pic/20.jpg" alt="图片描述"></div></li><li><p>需要在html的form表单中添加<code>&#123;% csrf_token %&#125;</code>，否则会出现csrf缺失</p><div style="text-align:center"> <img src="/img/django_pic/21.jpg" alt="图片描述"></div></li></ol><h1 id="六、MySQL-Django"><a href="#六、MySQL-Django" class="headerlink" title="六、MySQL+Django"></a>六、MySQL+Django</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><div style="text-align:center">    <img src="/img/django_pic/22.jpg" alt="图片描述"></div><ol><li><p>Django内部提供了ORM框架，可以帮我们更好的操作MySQL</p></li><li><p>安装第三方模块：pip install mysqlclient</p></li><li><p>orm可以帮我们创建、删除、修改数据库的表，以及操作数据，<mark>无法创建数据库</mark></p></li></ol><h2 id="4-链接数据库"><a href="#4-链接数据库" class="headerlink" title="4. 链接数据库"></a>4. 链接数据库</h2><ol><li>在settings.py文件中进行配置与修改，连接MySQL<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>, <span class="hljs-comment"># 链接mysql数据库</span><br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;mysqltest&#x27;</span>,  <span class="hljs-comment"># 数据库名字</span><br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,      <span class="hljs-comment"># 用户名字，默认是root</span><br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;Pooh_0505&#x27;</span>,    <span class="hljs-comment"># 用户密码</span><br>        <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,    <span class="hljs-comment"># 那台机器安装了MySQL</span><br>        <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-string">&#x27;3306&#x27;</span>,   <span class="hljs-comment"># 端口含默认3306</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-操作数据表"><a href="#5-操作数据表" class="headerlink" title="5. 操作数据表"></a>5. 操作数据表</h2><h3 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1. 创建表"></a>1. 创建表</h3><ol><li>app.【models】文件夹书写，确定表的格式<ol><li>此时数据库表的名称为数据库的名称 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;打分表 - 触控&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">touch_score_list</span>(models.Model):<br>    touch_project_name = models.CharField(verbose_name=<span class="hljs-string">&#x27;项目名称&#x27;</span>, max_length=<span class="hljs-number">64</span>)<br>    touch_test_rounds_choices = (<br>        (<span class="hljs-string">&#x27;ST1&#x27;</span>, <span class="hljs-string">&#x27;ST1&#x27;</span>),<br>        (<span class="hljs-string">&#x27;ST2&#x27;</span>, <span class="hljs-string">&#x27;ST2&#x27;</span>),<br>        (<span class="hljs-string">&#x27;ST3&#x27;</span>, <span class="hljs-string">&#x27;ST3&#x27;</span>),<br>        (<span class="hljs-string">&#x27;ST4&#x27;</span>, <span class="hljs-string">&#x27;ST4&#x27;</span>),<br>    )<br>    touch_test_rounds = models.CharField(verbose_name=<span class="hljs-string">&#x27;测试轮次&#x27;</span>, max_length=<span class="hljs-number">32</span>, choices=touch_test_rounds_choices)<br>    touch_objective = models.CharField(verbose_name=<span class="hljs-string">&#x27;硬件客观&#x27;</span>, max_length=<span class="hljs-number">16</span>)<br>    touch_subject = models.CharField(verbose_name=<span class="hljs-string">&#x27;主观专项&#x27;</span>, max_length=<span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure></li></ol></li></ol><div style="text-align:center">    <img src="/img/django_pic/24.jpg" alt="图片描述"></div><ol start="2"><li>在pycharm终端解释器执行，余MySQL中生成对应的表<ol><li><p>方法1：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure></li><li><p>方法2：</p></li></ol><ul><li>Tools - Run manage.py Task</li></ul></li></ol><div style="text-align:center">    <img src="/img/django_pic/25.jpg" alt="图片描述"></div><h3 id="2-删除-修改表"><a href="#2-删除-修改表" class="headerlink" title="2. 删除&#x2F;修改表"></a>2. 删除&#x2F;修改表</h3><ol><li>在<code>models.py</code>中，对数据表进行删除&#x2F;修改</li><li>在pycharm终端解释器重新执行<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-查询表"><a href="#4-查询表" class="headerlink" title="4. 查询表"></a>4. 查询表</h3><ol><li><p>app.【models.py】写入数据库相关内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">数据表名</span>(models.Model):<br>    name = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    password = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    age = models.IntegerField()<br></code></pre></td></tr></table></figure></li><li><p>app.【views.py】写入表相关内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">orm</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 新建</span><br>    数据表名.objects.create(title=<span class="hljs-string">&quot;销售部&quot;</span>)<br>    <br>    <span class="hljs-comment"># 删除</span><br>    数据表名.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>).delete()<br>    数据表名.objects.<span class="hljs-built_in">all</span>().delete()<br>    <br>    <span class="hljs-comment"># 查找</span><br>    <span class="hljs-comment"># 获取符合条件的所有数据</span><br>    data_list = [对象，对象，对象] QuerySet类型<br>    data_list = 数据表名.objects.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> data_list:<br>        <span class="hljs-built_in">print</span>(obj.<span class="hljs-built_in">id</span>, obj.name)<br>        <br>    <span class="hljs-comment"># 获取符合条件的第一条数据【对象】</span><br>    row_obj = 数据表名.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>).first<br>    <span class="hljs-built_in">print</span>(row_obj.<span class="hljs-built_in">id</span>, row_obj.name)<br>    <br>    <span class="hljs-comment"># 更新数据</span><br>    数据表名.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>).update(age=<span class="hljs-number">999</span>)<br>    数据表名.objects.<span class="hljs-built_in">all</span>().update(age=<span class="hljs-number">999</span>)<br>    <br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;成功&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-后台文件中可选择的数据信息"><a href="#6-后台文件中可选择的数据信息" class="headerlink" title="6. 后台文件中可选择的数据信息"></a>6. 后台文件中可选择的数据信息</h2><ol><li><p><code>models.py</code></p><ol><li>下拉选择：<code>choices=level_choices</code></li><li>默认结果为…：<code>default=1</code></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrettyNum</span>(models.Model):<br>    <br>    level_choices = (<br>        (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;一级&#x27;</span>),<br>        (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;二级&#x27;</span>),<br>        (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;三级&#x27;</span>),<br>    )<br>    level = models.CharField(verbose_name=<span class="hljs-string">&#x27;级别&#x27;</span>, choices=level_choices, default=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></li></ol><div style="text-align:center">    <img src="/img/django_pic/28.jpg" alt="图片描述"></div><h1 id="七、表单内容的增删改查"><a href="#七、表单内容的增删改查" class="headerlink" title="七、表单内容的增删改查"></a>七、表单内容的增删改查</h1><h2 id="1-新建按钮"><a href="#1-新建按钮" class="headerlink" title="1. 新建按钮"></a>1. 新建按钮</h2><ol><li><code>按钮js文件</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 新建按钮</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bindBtnAddEvent</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#btnadd&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//将正在编辑的ID设置为空</span><br>        <span class="hljs-variable constant_">EDIT_ID</span> = <span class="hljs-literal">undefined</span>;<br>        <span class="hljs-comment">// 清空对话框中的数据</span><br>        $(<span class="hljs-string">&quot;#formAdd&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">reset</span>();<br>        <span class="hljs-comment">// 设置对话框的标题</span><br>        $(<span class="hljs-string">&quot;#myModalLabel&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;新建项目&quot;</span>)<br>        <span class="hljs-comment">// 点击按钮，显示添加项目的对话框</span><br>        $(<span class="hljs-string">&quot;#myModal&quot;</span>).<span class="hljs-title function_">modal</span>(<span class="hljs-string">&quot;show&quot;</span>);<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">// 新建按钮/编辑按钮 - 的确认保存按钮</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bindBtnConfirmAddEvent</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#btnConfirmSave&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 判断是新建信息还是编辑信息</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">EDIT_ID</span>) &#123;<br>            <span class="hljs-comment">// 编辑</span><br>            $.<span class="hljs-title function_">ajax</span>(&#123;<br>                <span class="hljs-attr">url</span>: <span class="hljs-variable constant_">EDIT_ID</span> + <span class="hljs-string">&quot;/edit&quot;</span>,   <span class="hljs-comment">// =&gt; /order/delete/?uid=123</span><br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>                <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#formAdd&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>                <span class="hljs-attr">datatype</span>: <span class="hljs-string">&quot;Json&quot;</span>,<br>                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>                    <span class="hljs-comment">// 获取后端返回的数据</span><br>                    <span class="hljs-keyword">var</span> row_dict = response.<span class="hljs-property">row_dict</span><br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(row_dict)<br><br>                    <span class="hljs-comment">// 将获得的数据赋值到对话框的标签中</span><br>                    $.<span class="hljs-title function_">each</span>(response.<span class="hljs-property">row_dict</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">name, value</span>) &#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name, value);<br>                        $(<span class="hljs-string">&quot;#id_&quot;</span> + name).<span class="hljs-title function_">val</span>(value);<br>                        location.<span class="hljs-title function_">reload</span>();<br>                    &#125;)<br>                &#125;<br>            &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 新建</span><br>            $.<span class="hljs-title function_">ajax</span>(&#123;<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;new_built&quot;</span>,   <span class="hljs-comment">// =&gt; /order/delete/?uid=123</span><br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>                <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#formAdd&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>                <span class="hljs-attr">datatype</span>: <span class="hljs-string">&quot;Json&quot;</span>,<br>                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>                    <span class="hljs-comment">// 打印返回值</span><br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response)<br>                    <span class="hljs-comment">// 删除成功后，将页面进行刷新</span><br>                    location.<span class="hljs-title function_">reload</span>();<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p><code>主界面views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_DOU</span>(<span class="hljs-params">request</span>):<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27; 连接数据库,获取所有记录 &#x27;&#x27;&#x27;</span><br>    data_list = DOU_project_basic_information_list.objects.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;data_list&#x27;</span>, data_list)<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;打印每个记录的字段值&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> singo_data_list <span class="hljs-keyword">in</span> data_list:<br>        <span class="hljs-built_in">print</span>(singo_data_list.project_name, singo_data_list.test_rounds, singo_data_list.test_time, singo_data_list.hardware_version,<br>              singo_data_list.firmware_version, singo_data_list.app_version, singo_data_list.battery_capacity)<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27; 于前端展示数据库中的信息 &#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-comment"># 将数据传递给html，进行前端展示</span><br>    dou_form = UserModelForm()<br>    <span class="hljs-comment"># print(&#x27;###&#x27;, dou_form)</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;ppc_DOU.html&quot;</span>, &#123;<span class="hljs-string">&quot;data_list&quot;</span>: data_list, <span class="hljs-string">&#x27;dou_form&#x27;</span>: dou_form&#125;)<br></code></pre></td></tr></table></figure></li><li><p>添加界面view.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27; 向数据库中添加，新建信息 &#x27;&#x27;&#x27;</span><br><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_DOU_new_built</span>(<span class="hljs-params">request</span>):<br>    add_base_message = request.POST<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;add_base_message&#x27;</span>, add_base_message)<br>    <span class="hljs-comment"># &lt;QueryDict: &#123;&#x27;csrfmiddlewaretoken&#x27;: [&#x27;EUKzWjAWcZCrcVu5uoZN1UBFnwtFgyQadssjEXMIGc7CEad6f1xzGBHlBqF0KkVJ&#x27;], &#x27;project_name&#x27;: [&#x27;b&#x27;], &#x27;test_rounds&#x27;: [&#x27;ST1&#x27;], &#x27;test_time&#x27;: [&#x27;b&#x27;], &#x27;hardware_version&#x27;: [&#x27;b&#x27;], &#x27;firmware_version&#x27;: [&#x27;b&#x27;], &#x27;app_version&#x27;: [&#x27;b&#x27;], &#x27;battery_capacity&#x27;: [&#x27;b&#x27;]&#125;&gt;</span><br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;向页面中添加数据信息&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;csrfmiddlewaretoken&#x27;</span> <span class="hljs-keyword">in</span> add_base_message.keys() <span class="hljs-keyword">and</span> [<span class="hljs-string">&#x27;&#x27;</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> add_base_message.values():<br>        form = UserModelForm(data=request.POST)<br><br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            form.save()<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/ppc_test_center/DOU/&#x27;</span>)<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/ppc_test_center/DOU/&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-针对每行表单的按钮，设置对应的弹出框的删除按钮"><a href="#2-针对每行表单的按钮，设置对应的弹出框的删除按钮" class="headerlink" title="2. 针对每行表单的按钮，设置对应的弹出框的删除按钮"></a>2. 针对每行表单的按钮，设置对应的弹出框的删除按钮</h2><ol><li><p><code>删除按钮 html文件：</code></p><ol><li><p><code>原始“删除”按钮 html文件：</code></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; singo_data_list.id &#125;&#125;/delete&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-trash-o&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>变更后的“删除”按钮 html文件：</code></p><ol><li><p>以删除按钮为例，不采用为每个按钮赋值对应的id，而是为所有删除按钮设置一个样式<code>btn-delete</code>，通过样式绑定按钮的事件</p></li><li><p>定义uid关键词，获取所点击行对应的uid值</p></li></ol> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">uid</span>=<span class="hljs-string">&quot;&#123;&#123; singo_data_list.id &#125;&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs btn-delete&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-trash-o&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>        <br></code></pre></td></tr></table></figure></li></ol></li><li><p><code>弹出框html文件：</code></p><ol><li><code>data-dismiss=&quot;modal&quot;</code>赋值给取消按钮后，点击后会返回原始页面 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 删除项目 - 弹出框  --&gt;</span><br><span class="hljs-comment">&lt;!-- Modal --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteModal&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;dialog&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;myModalLabel&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;document&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-danger alert-dismissible fade in&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;alert&quot;</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-exclamation-triangle&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 是否确定删除？<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 20px 0;&quot;</span>&gt;</span> 删除后所有关联数据都会被删除<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: right;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span>取 消<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> &gt;</span>删 除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>设置点击的js文件：</p><ol><li>删除按钮：设置全局变量，点击后将按钮此行对应的id转递给后端</li><li>删除确认按钮：ajax请求，向删除url发起请求 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- 点击事件js  --&gt;<br>&#123;% block js %&#125;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><br>        <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">DELETE_ID</span>;<br><br>        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">bindBtnAddEvent</span>();<br>            <span class="hljs-comment">// 删除事件</span><br>            <span class="hljs-title function_">bindBtnDeleteEvent</span>();<br>            <span class="hljs-comment">// 删除-确认事件</span><br>            <span class="hljs-title function_">bindBtnConfirmDeleteEvent</span>();<br>        &#125;)<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">bindBtnAddEvent</span>(<span class="hljs-params"></span>) &#123;<br>            $(<span class="hljs-string">&quot;#btnadd&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-comment">// 点击按钮，显示添加项目的对话框</span><br>                $(<span class="hljs-string">&quot;#myModal&quot;</span>).<span class="hljs-title function_">modal</span>(<span class="hljs-string">&quot;show&quot;</span>);<br>            &#125;)<br>        &#125;<br><br>        <span class="hljs-comment">// 删除按钮</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">bindBtnDeleteEvent</span>(<span class="hljs-params"></span>) &#123;<br>            $(<span class="hljs-string">&quot;.btn-delete&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-comment">// 点击按钮，显示删除项目的对话框</span><br>                $(<span class="hljs-string">&quot;#deleteModal&quot;</span>).<span class="hljs-title function_">modal</span>(<span class="hljs-string">&quot;show&quot;</span>);<br><br>                <span class="hljs-comment">// 获取当前行的ID并赋值给全部变量</span><br>                <span class="hljs-variable constant_">DELETE_ID</span> = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;uid&quot;</span>);<br>            &#125;)<br>        &#125;<br><br>        <span class="hljs-comment">// 删除按钮 - 的确认产出按钮</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">bindBtnConfirmDeleteEvent</span>(<span class="hljs-params"></span>) &#123;<br>            $(<span class="hljs-string">&quot;#btnConfirmDelete&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-comment">// 点击删除按钮后的确认按钮，将全局变量中要删除的id发送给后台</span><br>                $.<span class="hljs-title function_">ajax</span>(&#123;<br>                    <span class="hljs-attr">url</span>: <span class="hljs-variable constant_">DELETE_ID</span> + <span class="hljs-string">&quot;/delete&quot;</span>,   <span class="hljs-comment">// =&gt; /123/delete</span><br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>                    <span class="hljs-comment">//data:&#123;</span><br>                    <span class="hljs-comment">//    uid:DELETE_ID</span><br>                    <span class="hljs-comment">//&#125;,</span><br>                    <span class="hljs-attr">datatype</span>:<span class="hljs-string">&quot;Json&quot;</span>,<br>                    <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>                        <span class="hljs-comment">// 删除成功后，将页面进行刷新</span><br>                        location.<span class="hljs-title function_">reload</span>();<br>                    &#125;<br>                &#125;)<br>            &#125;)<br>        &#125;<br>    &lt;/script&gt;<br>&#123;% endblock %&#125;<br>&lt;!-- 以上 --&gt;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>其他 py文件：</p><ol><li><p><code>urls.py</code>文件</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;ppc_test_center/DOU/&lt;int:nid&gt;/delete&#x27;</span>, views.ppc_DOU_delete),<br></code></pre></td></tr></table></figure></li><li><p><code>views.py</code>文件</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_DOU_delete</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-comment"># nid = request.GET.get(&#x27;nid&#x27;)</span><br>    DOU_project_basic_information_list.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).delete()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/ppc_test_center/DOU/&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="3-弹出框的编辑按钮"><a href="#3-弹出框的编辑按钮" class="headerlink" title="3. 弹出框的编辑按钮"></a>3. 弹出框的编辑按钮</h2><ul><li>与删除按钮区别</li></ul><ol><li><p>弹出框.py</p><ol><li>编辑按钮 和 新建按钮公用同一个弹出框 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;!-- 新建/编辑项目 - 弹出框  --&gt;<br>&lt;!-- Modal --&gt;<br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;myModal&quot;</span> tabindex=<span class="hljs-string">&quot;-1&quot;</span> role=<span class="hljs-string">&quot;dialog&quot;</span> aria-labelledby=<span class="hljs-string">&quot;myModalLabel&quot;</span>&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> role=<span class="hljs-string">&quot;document&quot;</span>&gt;<br>        &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;<br>            &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;<br>                &lt;button <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;close&quot;</span> data-dismiss=<span class="hljs-string">&quot;modal&quot;</span> aria-label=<span class="hljs-string">&quot;Close&quot;</span>&gt;&lt;span aria-hidden=<span class="hljs-string">&quot;true&quot;</span>&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;<br>                &lt;h4 <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal-title&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;myModalLabel&quot;</span>&gt;新建项目&lt;/h4&gt;<br>            &lt;/div&gt;<br>            &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;<br>                &lt;form <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;formAdd&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> novalidate&gt;<br>                    &#123;% csrf_token %&#125;<br>                    &#123;% <span class="hljs-keyword">for</span> singo_dou_form <span class="hljs-keyword">in</span> dou_form %&#125;<br>                        &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>                            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;&#123;&#123; singo_dou_form.label &#125;&#125; : &#123;&#123; singo_dou_form &#125;&#125; &lt;/label&gt;<br>                            &lt;span style=<span class="hljs-string">&quot;color: red&quot;</span>&gt;&#123;&#123; field.errors<span class="hljs-number">.0</span> &#125;&#125;&lt;/span&gt;<br>                        &lt;/div&gt;<br>                    &#123;% endfor %&#125;<br><br>                    &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;<br>                        &lt;button <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> data-dismiss=<span class="hljs-string">&quot;modal&quot;</span>&gt;取消&lt;/button&gt;<br>                        &lt;button <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;提交&lt;/button&gt;<br>                    &lt;/div&gt;<br>                &lt;/form&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li></ol></li><li><p><code>后端编辑views.py文件：</code></p><ol><li>ajax请求只能读取字典或列表，无法读取对象<ol><li>从数据库中取一个对象:<code>forms.objects.filter(id=nid).first()</code></li><li>从数据库的某一个对象中，取其对应元素的字典:<code>forms.objects.filter(id=nid).values(&quot;project_name&quot;, &quot;test_rounds&quot;).first()</code><ol><li>否则会弹出次错误：<code>ValueError: The view app01.views.ppc_DOU_base_model didn&#39;t return an HttpResponse object. It returned None instead.</code></li></ol></li></ol></li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_DOU_edit</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-comment"># nid = request.GET.get(&#x27;nid&#x27;)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nid:&quot;</span>, nid)<br><br>    <span class="hljs-comment"># 从数据库中取一个对象</span><br>    row_object = DOU_project_basic_information_list.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br><br>    <span class="hljs-comment"># 从数据库的某一个对象中，取其对应元素的字典</span><br>    row_dict = DOU_project_basic_information_list.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).values(<span class="hljs-string">&#x27;parent_id&#x27;</span>, <span class="hljs-string">&quot;project_name&quot;</span>, <span class="hljs-string">&quot;test_rounds&quot;</span>, <span class="hljs-string">&quot;test_time&quot;</span>,<span class="hljs-string">&quot;hardware_version&quot;</span>,<span class="hljs-string">&quot;firmware_version&quot;</span>, <span class="hljs-string">&quot;app_version&quot;</span>, <span class="hljs-string">&quot;battery_capacity&quot;</span>).first()<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;  编辑用户 &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;get请求&quot;</span>)<br>        <span class="hljs-comment"># 根据ID去数据库获取要编译的那一行数据（对象）</span><br>        form = UserModelForm(instance=row_object)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;form&#x27;</span>, form)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;row_dict&#x27;</span>, row_dict)<br>        <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;row_dict&#x27;</span>: row_dict&#125;)<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;post请求&quot;</span>)<br>        form = UserModelForm(data=request.POST, instance=row_object)<br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            form.save()<br>            <br>            <span class="hljs-string">&#x27;&#x27;&#x27; 两次返回，使点击确定后，顺利刷新并返回页面 &#x27;&#x27;&#x27;</span><br>            <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;row_dict&#x27;</span>: row_dict&#125;)<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/ppc_test_center/DOU/&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>设置点击的js文件：</p><ol><li>清空对话框中的数据：<code>$(&quot;#formAdd&quot;)[0].reset();</code></li><li>设置对话框的标题：<code>$(&quot;#myModalLabel&quot;).text(&quot;编辑项目&quot;)</code></li><li>新建 和 编辑 公用同一个弹出框的确认按钮会出现问题，”新建“不会携带id，”编辑“会携带id，利用返回值是否携带id来判断是新建操作还是编辑操作<ol><li><p><code>全局变量js</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">DELETE_ID</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">EDIT_ID</span>;<br></code></pre></td></tr></table></figure></li><li><p><code>编辑js</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 编辑按钮</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bindBtnEditEvent</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;.btn-edit&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 编辑弹出框 和 新建弹出框公用一个</span><br>        <span class="hljs-comment">// 清空对话框中的数据</span><br>        $(<span class="hljs-string">&quot;#formAdd&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">reset</span>();<br>        <span class="hljs-comment">// 设置对话框的标题</span><br>        $(<span class="hljs-string">&quot;#myModalLabel&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;编辑项目&quot;</span>)<br>        <span class="hljs-comment">// 点击按钮，显示编辑项目的对话框</span><br>        $(<span class="hljs-string">&quot;#myModal&quot;</span>).<span class="hljs-title function_">modal</span>(<span class="hljs-string">&quot;show&quot;</span>);<br><br>        <span class="hljs-comment">// 获取当前行的ID并赋值给全部变量</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">Edit</span>_ID = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;uid&quot;</span>);<br><br>        <span class="hljs-comment">// 点击编辑钮后，会向编辑url发出ajax请求，并获取此行id对应在数据库中的所有信息，并在前端进行展示</span><br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-title class_">Edit</span>_ID + <span class="hljs-string">&quot;/edit&quot;</span>,   <span class="hljs-comment">// =&gt; /order/delete/?uid=123</span><br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>            <span class="hljs-attr">datatype</span>:<span class="hljs-string">&quot;Json&quot;</span>,<br>            <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>                <span class="hljs-comment">// 获取后端返回的数据</span><br>                <span class="hljs-keyword">var</span> row_dict = response.<span class="hljs-property">row_dict</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(row_dict)<br><br>                <span class="hljs-comment">// 将获得的数据赋值到对话框的标签中</span><br>                $.<span class="hljs-title function_">each</span>(response.<span class="hljs-property">row_dict</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">name, value</span>) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name, value);<br>                    $(<span class="hljs-string">&quot;#id_&quot;</span> + name).<span class="hljs-title function_">val</span>(value);<br>                &#125;)<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>新建js</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 新建按钮</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bindBtnAddEvent</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#btnadd&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//将正在编辑的ID设置为空</span><br>        <span class="hljs-variable constant_">EDIT_ID</span> = <span class="hljs-literal">undefined</span>;<br>        <span class="hljs-comment">// 清空对话框中的数据</span><br>        $(<span class="hljs-string">&quot;#formAdd&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">reset</span>();<br>        <span class="hljs-comment">// 设置对话框的标题</span><br>        $(<span class="hljs-string">&quot;#myModalLabel&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;新建项目&quot;</span>)<br>        <span class="hljs-comment">// 点击按钮，显示添加项目的对话框</span><br>        $(<span class="hljs-string">&quot;#myModal&quot;</span>).<span class="hljs-title function_">modal</span>(<span class="hljs-string">&quot;show&quot;</span>);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>编辑views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_DOU_edit</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-comment"># nid = request.GET.get(&#x27;nid&#x27;)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nid:&quot;</span>, nid)<br><br>    <span class="hljs-comment"># 从数据库中取一个对象</span><br>    row_object = DOU_project_basic_information_list.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br><br>    <span class="hljs-comment"># 从数据库的某一个对象中，取其对应元素的字典</span><br>    row_dict = DOU_project_basic_information_list.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).values(<span class="hljs-string">&quot;project_name&quot;</span>, <span class="hljs-string">&quot;test_rounds&quot;</span>, <span class="hljs-string">&quot;test_time&quot;</span>,<span class="hljs-string">&quot;hardware_version&quot;</span>,<br>                                                                                <span class="hljs-string">&quot;firmware_version&quot;</span>, <span class="hljs-string">&quot;app_version&quot;</span>, <span class="hljs-string">&quot;battery_capacity&quot;</span>).first()<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;  编辑用户 &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;get请求&quot;</span>)<br>        <span class="hljs-comment"># 根据ID去数据库获取要编译的那一行数据（对象）</span><br>        form = UserModelForm(instance=row_object)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;form&#x27;</span>, form)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;row_dict&#x27;</span>, row_dict)<br><br>        <span class="hljs-comment"># return redirect(&#x27;/ppc_test_center/DOU/&#x27;)</span><br>        <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;row_dict&#x27;</span>: row_dict&#125;)<br><br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;post请求&quot;</span>)<br>        form = UserModelForm(data=request.POST, instance=row_object)<br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            form.save()<br>            <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;row_dict&#x27;</span>: row_dict&#125;)<br>        <span class="hljs-comment"># return redirect(&#x27;/ppc_test_center/DOU/&#x27;)</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/ppc_test_center/DOU/&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><h1 id="八、一次性配置"><a href="#八、一次性配置" class="headerlink" title="八、一次性配置"></a><font color=#1E90FF>八、一次性配置</font></h1><h2 id="1-web项目访问"><a href="#1-web项目访问" class="headerlink" title="1. web项目访问"></a><font color=#1E90FF>1. web项目访问</font></h2><ol><li><code>ifconfig | grep &quot;inet&quot;</code>查看Mac电脑ip</li></ol><div style="text-align:center;gap:5px">    <img src="/img/django_pic/61.jpg" alt="图片描述" style="zoom:35%;"></div><ol><li>想让同局域网下的其他电脑访问本机的项目，需在右上角项目配置中，修改host和post值，分别为0.0.0.0和任意值（这里是7000）</li><li>并在“setting.py”文件中，配置“ALLOWED_HOSTS”，将本机的IP地址添加进去，（终端输入ifconfig -a）实例代码如下<code>ALLOWED_HOSTS=[&#39;192.168.0.103&#39;]</code><br>  注：要关闭自己的防火墙才行</li></ol><div style="text-align:center;gap:5px">    <img src="/img/django_pic/29.jpg" alt="图片描述" style="zoom:35%;">    <img src="/img/django_pic/30.jpg" alt="图片描述" style="zoom:35%;"></div><ol start="4"><li>示例：<ol><li>本机ip：10.221.113.135</li><li>端口号：8000 <div style="text-align:center"> <img src="/img/django_pic/31.jpg" alt="图片描述" style="zoom:50%;"> </div></li></ol></li></ol><h2 id="2-django引入静态文件img、css、js"><a href="#2-django引入静态文件img、css、js" class="headerlink" title="2. django引入静态文件img、css、js"></a>2. django引入静态文件img、css、js</h2><ol><li><p>setting.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 注：务必设置DEBUG = TRUE， 否则完全不响应</span><br>DEBUG = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># 注: 这里保存的是个元组, 一定要加逗号</span><br>STATIC_URL = <span class="hljs-string">&#x27;/static/&#x27;</span><br>STATICFILES_DIRS = [<br>    os.path.join(BASE_DIR, <span class="hljs-string">&#x27;static&#x27;</span>),<br>]<br></code></pre></td></tr></table></figure></li><li><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% load staticfiles %&#125;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br>    # 导入bootstrap<br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;&#123;% static &quot;plugins/bootstrap-3.4.1/css/bootstrap.css&quot; %&#125;&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    # 导入图片<br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;img/111.jpg&#x27; %&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="3-表单样式继承与美化"><a href="#3-表单样式继承与美化" class="headerlink" title="3. 表单样式继承与美化*"></a>3. 表单样式继承与美化*</h2><h3 id="1-ModelForm"><a href="#1-ModelForm" class="headerlink" title="1. ModelForm"></a>1. ModelForm</h3><ol><li>ModelForm可以帮助我们生成HTML标签，但是不携带样式<div style="text-align:center"> <img src="/img/django_pic/33.jpg" alt="图片描述"></div></li></ol><h3 id="2-Bootstrap"><a href="#2-Bootstrap" class="headerlink" title="2. Bootstrap"></a>2. Bootstrap</h3><div style="text-align:center">    <img src="/img/django_pic/34.jpg" alt="图片描述"></div><ol><li>在目录中新建<code>app-utils-bootstrap.py</code>文件，封装<code>BootStrapModelForm</code>功能，用于美化<code>ModelForm</code>样式</li></ol><div style="text-align:center">    <img src="/img/django_pic/35.jpg" alt="图片描述"></div><ol start="2"><li><p>views.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> app01.utils.bootstrap <span class="hljs-keyword">import</span> BootStrapModelForm<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModelForm1</span>(<span class="hljs-title class_ inherited__">BootStrapModelForm</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.DOU_project_basic_information_list<br>        <span class="hljs-comment"># 选择数据库中的所有字段</span><br>        fields = <span class="hljs-string">&quot;__all__&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>表单.html文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_DOU</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27; 连接数据库,获取所有记录 &#x27;&#x27;&#x27;</span><br>    data_list = DOU_project_basic_information_list.objects.<span class="hljs-built_in">all</span>()<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-美化views-py结构"><a href="#4-美化views-py结构" class="headerlink" title="4. 美化views.py结构"></a>4. 美化views.py结构</h2><h3 id="1-将MySQL中的所有库，对应views-py中所有class文件导入"><a href="#1-将MySQL中的所有库，对应views-py中所有class文件导入" class="headerlink" title="1. 将MySQL中的所有库，对应views.py中所有class文件导入"></a>1. 将MySQL中的所有库，对应views.py中所有class文件导入</h3><ol><li><p><code>utils-form.py</code></p><div style="text-align:center"> <img src="/img/django_pic/36.jpg" alt="图片描述"></div></li><li><p><code>views.py</code></p><div style="text-align:center"> <img src="/img/django_pic/37.jpg" alt="图片描述"></div></li></ol><h3 id="2-将各模块进行拆分"><a href="#2-将各模块进行拆分" class="headerlink" title="2. 将各模块进行拆分"></a>2. 将各模块进行拆分</h3><ol><li>删除原有的view.py文件，新建views文件夹</li><li>将<code>urls.py</code>中的<code>from app import views</code>删除后，重新导入新包</li><li>将原有的路径在<code>urls.py</code>中进行拆分，将html文件在<code>views.py</code>中进行拆分</li></ol><div style="text-align:center">    <img src="/img/django_pic/56.jpg" alt="图片描述" style="zoom:38%;">    <img src="/img/django_pic/38.jpg" alt="图片描述" style="zoom:35%;"></div><h2 id="5-前后端数据传递"><a href="#5-前后端数据传递" class="headerlink" title="5. 前后端数据传递"></a>5. 前后端数据传递</h2><ol><li><p>后端a传给前端</p><div style="text-align:center"> <img src="/img/django_pic/40.jpg" alt="图片描述"></div></li><li><p>前端传给后端b</p><div style="text-align:center"> <img src="/img/django_pic/41.jpg" alt="图片描述"></div></li></ol><div style="text-align:center">    <img src="/img/django_pic/42.jpg" alt="图片描述"></div><ol start="3"><li>后端b接收，及数据处理<div style="text-align:center"> <img src="/img/django_pic/43.jpg" alt="图片描述"></div></li></ol><h2 id="7-整体导入自己创建的css样式"><a href="#7-整体导入自己创建的css样式" class="headerlink" title="7. 整体导入自己创建的css样式"></a>7. 整体导入自己创建的css样式</h2><ol><li>在<code>static</code>文件夹中，创建对应的样式文件，用于存放自己设计的css样式</li></ol><div style="text-align:center">    <img src="/img/django_pic/57.jpg" alt="图片描述"></div><ol start="2"><li>设置静态文件访问地址</li></ol><div style="text-align:center">    <img src="/img/django_pic/58.jpg" alt="图片描述"></div><ol start="3"><li>将<code>css</code>样式导入前端<code>html</code></li></ol><div style="text-align:center">    <img src="/img/django_pic/59.jpg" alt="图片描述"></div><ol start="4"><li>其他问题</li></ol><ul><li>如果自建的<code>css</code>样式文件，起名为<code>style</code>等特殊名，会出现错误</li></ul><h1 id="九、使用Tips"><a href="#九、使用Tips" class="headerlink" title="九、使用Tips"></a>九、使用Tips</h1><h2 id="3-获取当前用户前端界面的url"><a href="#3-获取当前用户前端界面的url" class="headerlink" title="3. 获取当前用户前端界面的url"></a>3. 获取当前用户前端界面的url</h2><ol><li><p>方法1</p><ol><li><mark>获取主机地址：</mark> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">request.get_host()<br></code></pre></td></tr></table></figure></li><li>获取访问路径： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">request.get_full_path()<br></code></pre></td></tr></table></figure> 拼接即可得到用户当前完整url</li></ol></li><li><p>方法2<br>通过查看requests源码，直接可得到用户当前完整url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">request.get_raw_uri()<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-获取POST请求"><a href="#6-获取POST请求" class="headerlink" title="6. 获取POST请求"></a>6. 获取POST请求</h2><ol><li><p>将settings.py中注释csrf，下方200成功</p><div style="text-align:center"> <img src="/img/django_pic/47.jpg" alt="图片描述"></div></li><li><p>在views.py中写入请求方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">result = &#123;&#125;<br>project_name = request.POST.get(<span class="hljs-string">&#x27;project_name&#x27;</span>)<br>result[<span class="hljs-string">&#x27;project_name&#x27;</span>] = project_name<br></code></pre></td></tr></table></figure><div style="text-align:center"> <img src="/img/django_pic/48.jpg" alt="图片描述"></div></li><li><p>使用postman传入数据时，get请求选择params，post请求选择body，依旧需要将URL用&#x2F;收尾</p><div style="text-align:center"> <img src="/img/django_pic/50.jpg" alt="图片描述"></div></li></ol><h2 id="10-后端生成的标签传到前端无法显示"><a href="#10-后端生成的标签传到前端无法显示" class="headerlink" title="10. 后端生成的标签传到前端无法显示"></a>10. 后端生成的<a>标签传到前端无法显示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe<br><br><span class="hljs-comment"># 使用mark_safe将html包裹</span><br>mark_safe（<span class="hljs-string">&quot;&lt;a&gt;**&lt;/a&gt;&quot;</span>）<br></code></pre></td></tr></table></figure><h2 id="11-基础表单"><a href="#11-基础表单" class="headerlink" title="11. 基础表单"></a>11. 基础表单</h2><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_test_center_jira</span>(<span class="hljs-params">request</span>):<br>    result = &#123;&#125;<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>: <span class="hljs-comment">#获取判断请求方式</span><br><br>        group_id = request.POST.get(<span class="hljs-string">&#x27;group_id&#x27;</span>)<br>        result[<span class="hljs-string">&#x27;group_id&#x27;</span>] = group_id<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;group_id&#x27;</span>, group_id)<br>        project_name = request.POST.get(<span class="hljs-string">&#x27;project_name&#x27;</span>)<br>        result[<span class="hljs-string">&#x27;project_name&#x27;</span>] = project_name<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;project_name&#x27;</span>, project_name)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;ppc_test_center_jira.html&quot;</span>)<br></code></pre></td></tr></table></figure><p><code>html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span><br>        &#123;% csrf_token %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>所发送飞书群id<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;group_id&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;group_id&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;group_id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>项目filter<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;project_name&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;project_name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;project_name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="13-组态框示例（弹出框）"><a href="#13-组态框示例（弹出框）" class="headerlink" title="13. 组态框示例（弹出框）"></a>13. 组态框示例（弹出框）</h2><p><code>html</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;button <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;btnadd&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg&quot;</span>&gt;<br>  Launch demo modal<br>&lt;/button&gt;<br><br>&lt;!-- Modal --&gt;<br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;myModal&quot;</span> tabindex=<span class="hljs-string">&quot;-1&quot;</span> role=<span class="hljs-string">&quot;dialog&quot;</span> aria-labelledby=<span class="hljs-string">&quot;myModalLabel&quot;</span>&gt;<br>  &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> role=<span class="hljs-string">&quot;document&quot;</span>&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;<br>      &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;<br>        &lt;button <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;close&quot;</span> data-dismiss=<span class="hljs-string">&quot;modal&quot;</span> aria-label=<span class="hljs-string">&quot;Close&quot;</span>&gt;&lt;span aria-hidden=<span class="hljs-string">&quot;true&quot;</span>&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;<br>        &lt;h4 <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal-title&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;myModalLabel&quot;</span>&gt;Modal title&lt;/h4&gt;<br>      &lt;/div&gt;<br>      &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;<br>        ...<br>      &lt;/div&gt;<br>      &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;<br>        &lt;button <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> data-dismiss=<span class="hljs-string">&quot;modal&quot;</span>&gt;Close&lt;/button&gt;<br>        &lt;button <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;Save changes&lt;/button&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br><br><br>&#123;% block js %&#125;<br>    &lt;script <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(function () &#123;<br>        bindBtnAddEvent();<br>    &#125;)<br><br>    function bindBtnAddEvent()&#123;<br>        $(<span class="hljs-string">&quot;#btnadd&quot;</span>).click(function () &#123;<br>            //点击按钮，显示对话框<br>            $(<span class="hljs-string">&quot;#myModal&quot;</span>).modal(<span class="hljs-string">&quot;show&quot;</span>);<br>        &#125;)<br>    &#125;<br>    &lt;/script&gt;<br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h2 id="14-表单编辑-删除过程中，传递uid"><a href="#14-表单编辑-删除过程中，传递uid" class="headerlink" title="14. 表单编辑&#x2F;删除过程中，传递uid *"></a>14. 表单编辑&#x2F;删除过程中，传递uid *</h2><ol><li><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;ppc_test_center/DOU/&lt;int:nid&gt;/edit&#x27;</span>, views.ppc_DOU_edit_basic_information),<br></code></pre></td></tr></table></figure></li><li><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_DOU_edit_basic_information</span>(<span class="hljs-params">request, nid</span>):<br>    row_object = DOU_project_basic_information_list.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;  编辑用户 &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># 根据ID去数据库获取要编译的那一行数据（对象）</span><br>        form = UserModelForm(instance=row_object)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;ppc_DOU_edit_basic_information.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        form = UserModelForm(data=request.POST, instance=row_object)<br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            form.save()<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/ppc_test_center/DOU/&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/ppc_test_center/DOU/&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>html</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;td&gt;<br>    &lt;a <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-xs&quot;</span> href=<span class="hljs-string">&quot;M61_ST3/&quot;</span>&gt;&lt;i <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;fa fa-search&quot;</span> aria-hidden=<span class="hljs-string">&quot;true&quot;</span>&gt;&lt;/i&gt;查询&lt;/a&gt;<br>    &lt;a <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-xs&quot;</span> href=<span class="hljs-string">&quot;&#123;&#123; singo_data_list.id &#125;&#125;/edit&quot;</span>&gt;<br>        &lt;i <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;fa fa-edit&quot;</span> aria-hidden=<span class="hljs-string">&quot;true&quot;</span>&gt;&lt;/i&gt;编辑&lt;/a&gt;<br>     <br>    <span class="hljs-comment"># 对比老方法</span><br>    &lt;a <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span> href=<span class="hljs-string">&quot;delete_project_basic_information/?nid=&#123;&#123; singo_data_list.id &#125;&#125;&quot;</span>&gt;<br>        &lt;i <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;fa fa-trash-o&quot;</span> aria-hidden=<span class="hljs-string">&quot;true&quot;</span>&gt;&lt;/i&gt;删除&lt;/a&gt;<br>&lt;/td&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="15-更改所打开页面的标签名称"><a href="#15-更改所打开页面的标签名称" class="headerlink" title="15. 更改所打开页面的标签名称"></a>15. 更改所打开页面的标签名称</h2><h3 id="1-方法1"><a href="#1-方法1" class="headerlink" title="1. 方法1"></a>1. 方法1</h3><p>在视图函数中设置 <code>context[&#39;title&#39;]</code> 的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_view</span>(<span class="hljs-params">request</span>):<br>    context = &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;My Page Title&#x27;</span>&#125;        <br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;my_template.html&#x27;</span>, context)<br></code></pre></td></tr></table></figure><h3 id="2-方法2"><a href="#2-方法2" class="headerlink" title="2. 方法2"></a>2. 方法2</h3><p>在模板文件中使用 <code>&#123;&#123; title &#125;&#125;</code> 变量来显示页面标题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>        <br>        <span class="hljs-comment">&lt;!-- 页面内容 --&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="16-HTML-页面中获取-1、2、3用于制作假id"><a href="#16-HTML-页面中获取-1、2、3用于制作假id" class="headerlink" title="16. HTML 页面中获取 1、2、3用于制作假id"></a>16. HTML 页面中获取 1、2、3用于制作假id</h2><ol><li>在 Django 中，可以使用 <code>&#123;% for %&#125;</code> 标签来循环遍历项目列表，并使用 <code>forloop.counter</code> 变量来获取循环的计数器。</li><li>最终，我们将所有项目渲染为一个有序列表，其中每个项目都有一个数字前缀。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span> <br>    &#123;% for project in projects %&#125;     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125;. &#123;&#123; project &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br>    &#123;% endfor %&#125; <br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="18-models中不同不同数据表中的关键词不要取一样的值"><a href="#18-models中不同不同数据表中的关键词不要取一样的值" class="headerlink" title="18. models中不同不同数据表中的关键词不要取一样的值*"></a>18. models中不同不同数据表中的关键词不要取一样的值*</h2><div style="text-align:center;gap:5px">    <img src="/img/django_pic/53.jpg" alt="图片描述" style="zoom:35%;">    <img src="/img/django_pic/54.jpg" alt="图片描述" style="zoom:35%;"></div><h2 id="19-多模块页面汇总跳转"><a href="#19-多模块页面汇总跳转" class="headerlink" title="19. 多模块页面汇总跳转*"></a>19. 多模块页面汇总跳转*</h2><div style="text-align:center">    <img src="/img/django_pic/55.jpg" alt="图片描述"></div><ol><li><p><code>html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 1368px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-6&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 0;padding-left: 0&quot;</span>&gt;</span><br>            &#123;#触控模块#&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://10.221.113.135:8000/basic_score/audio&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;basic_score/&lt;str:modelName&gt;&#x27;</span>, views.singo_model_basic_score),<br></code></pre></td></tr></table></figure></li><li><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">pydef singo_model_basic_score(request,modelName):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;modelName&#x27;</span>, modelName)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;basic_score.html&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="20-后端向前端父类模板传值，且不通过子类模板"><a href="#20-后端向前端父类模板传值，且不通过子类模板" class="headerlink" title="20. 后端向前端父类模板传值，且不通过子类模板"></a>20. 后端向前端父类模板传值，且不通过子类模板</h2><ol><li><code>settings.py</code>：<mark>在 Django 项目的配置文件中，将该上下文处理器添加到 <code>TEMPLATES</code> 设置中的 <code>context_processors</code> 列表中</mark></li><li><code>xx.py</code>：在 Django 项目中的某个应用中创建一个上下文处理器</li><li><code>xx.html</code>：将后端的值传给父类模版</li></ol><div style="text-align:center">    <img src="/img/django_pic/60.jpg" alt="图片描述"></div>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>Python</tag>
      
      <tag>框架</tag>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2023/11/29/Git/"/>
    <url>/2023/11/29/Git/</url>
    
    <content type="html"><![CDATA[<h2 id="1-拉取代码-新建分支"><a href="#1-拉取代码-新建分支" class="headerlink" title="1. 拉取代码 新建分支"></a>1. 拉取代码 新建分支</h2><ol><li>在终端中拉取项目代码</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">cd 项目存放地<br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@git.xxx<br></code></pre></td></tr></table></figure><ol start="2"><li>切换项目分支</li></ol><div style="text-align:center;gap:5px">    <img src="/img/java_pic/48.png" alt="图片描述" style="zoom:20%"></div><h2 id="2-提交代码"><a href="#2-提交代码" class="headerlink" title="2. 提交代码"></a>2. 提交代码</h2><ol><li>当在本地代码进行修改后，对应文件变为蓝色，右键文件选择Git - 提交文件</li></ol><div style="text-align:center;gap:5px">    <img src="/img/java_pic/53.png" alt="图片描述" style="zoom:20%"></div><ol start="2"><li>全选已经改动的文件，编写修改描述，点击提交</li></ol><div style="text-align:center;gap:5px">    <img src="/img/java_pic/54.png" alt="图片描述" style="zoom:20%"></div><ol start="3"><li>选择Git-推送，选择上文提交的文件，进行推送</li></ol><div style="text-align:center;gap:5px">    <img src="/img/java_pic/55.png" alt="图片描述" style="zoom:20%"></div><h2 id="3-创建仓库"><a href="#3-创建仓库" class="headerlink" title="3. 创建仓库"></a>3. 创建仓库</h2><ol><li>创建github仓库</li></ol><p>github网址：<a href="https://github.com/flashchen2">https://github.com/flashchen2</a></p><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/12.png" alt="图片描述" style="zoom:18%;">    <img src="/img/shell_instruction_pic/13.png" alt="图片描述" style="zoom:18%;"></div><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/14.png" alt="图片描述" style="zoom:18%;"></div><ol start="2"><li>创建想要上传的项目</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd 到对应文件夹<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化</span><br>git init<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将本地项目中的全部文件添加至git中，命令中.的含义就是“全部文件”</span><br>git add .<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加项目的描述文字</span><br>git commit -m &quot;description&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加本地文件与github仓库之间的联系</span><br>git remote add origin git@github.com:flashchen2/github_test.git<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">上传代码</span><br>git push -f origin main/master<br></code></pre></td></tr></table></figure><h2 id="4-新建分支"><a href="#4-新建分支" class="headerlink" title="4. 新建分支"></a>4. 新建分支</h2><ol><li>基于远程所给定的分支，拉取自己的分支，用于开发</li></ol><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/15.png" alt="图片描述" style="zoom:18%;"></div><ol start="2"><li>新建dev分支，进行代码改动，查询分支改动内容的两种方法</li></ol><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/16.png" alt="图片描述" style="zoom:15%;">    <img src="/img/shell_instruction_pic/17.png" alt="图片描述" style="zoom:15%;"></div><ol start="3"><li>代码提交并推送，推送成功后，会用新的远程分支</li></ol><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/18.png" alt="图片描述" style="zoom:15%;">    <img src="/img/shell_instruction_pic/19.png" alt="图片描述" style="zoom:15%;"></div><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/20.png" alt="图片描述" style="zoom:18%;"></div><ol start="4"><li>更新当前远程主分支的最新状态</li></ol><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/21.png" alt="图片描述" style="zoom:18%;"></div><h2 id="5-分支合并"><a href="#5-分支合并" class="headerlink" title="5. 分支合并"></a>5. 分支合并</h2><ol><li>将带有改动项的线下dev分支，合并到线上分支中</li></ol><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/22.png" alt="图片描述" style="zoom:15%;">    <img src="/img/shell_instruction_pic/23.png" alt="图片描述" style="zoom:15%;"></div><ol start="2"><li>将带有改动项的线下dev分支，合并到线下main分支</li></ol><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/24.png" alt="图片描述" style="zoom:15%;"></div><ol start="3"><li>将线下main分支，合并到线上origin&#x2F;main分支中</li></ol><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/25.png" alt="图片描述" style="zoom:15%;">    <img src="/img/shell_instruction_pic/26.png" alt="图片描述" style="zoom:18%;"></div><h2 id="6-切换本地分支"><a href="#6-切换本地分支" class="headerlink" title="6. 切换本地分支"></a>6. 切换本地分支</h2><p>选择想要切换的分支-签出</p><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/27.png" alt="图片描述" style="zoom:15%;"></div><h2 id="7-云端master，更新本地个人分支"><a href="#7-云端master，更新本地个人分支" class="headerlink" title="7. 云端master，更新本地个人分支"></a>7. 云端master，更新本地个人分支</h2><ol><li><p><mark>访问自己当前的本地分支中</mark></p><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/28.png" alt="图片描述" style="zoom:15%;"></div></li><li><p>最新的云端master分支，合并到本地个人分支</p><p>远程 - master - 合并到xx</p><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/29.png" alt="图片描述" style="zoom:15%;"></div></li></ol><h2 id="8-本地代码合并上线流程"><a href="#8-本地代码合并上线流程" class="headerlink" title="8.本地代码合并上线流程 *"></a>8.本地代码合并上线流程 *</h2><ol><li>本地个人分支，更改-推送至，云端个人分支</li><li>本地master分支，更新</li><li>本地master分支，合并至，本地个人分支。解决本地个人分支的冲突</li><li>本地个人分支，更新-推送至，云端个人分支</li><li>本地个人分支，合并至，本地master分支</li><li>本地master分支，更新-推送至，云端master分支</li></ol><h2 id="9-用户名的查看与修改"><a href="#9-用户名的查看与修改" class="headerlink" title="9.用户名的查看与修改"></a>9.用户名的查看与修改</h2><ol><li>查看用户名和邮箱地址</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure><ol start="2"><li>修改</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span>  <span class="hljs-string">&quot;username&quot;</span>     <br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;email&quot;</span>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins</title>
    <link href="/2023/11/29/Jenkins/"/>
    <url>/2023/11/29/Jenkins/</url>
    
    <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><h2 id="1-Mac系统"><a href="#1-Mac系统" class="headerlink" title="1. Mac系统"></a>1. Mac系统</h2><p>学习链接：<a href="https://blog.csdn.net/weixin_47384044/article/details/124885284?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167333307816800215054938%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=167333307816800215054938&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-124885284-null-null.142%5Ev70%5Econtrol,201%5Ev4%5Eadd_ask&utm_term=mac%20jenkins%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F%20%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5&spm=1018.2226.3001.4187">https://blog.csdn.net/weixin</a></p><h2 id="2-Windows系统"><a href="#2-Windows系统" class="headerlink" title="2. Windows系统"></a>2. Windows系统</h2><p>学习链接：<br><a href="https://blog.csdn.net/qq">https://blog.csdn.net/qq</a><br><a href="https://blog.csdn.net/wujiangbo">https://blog.csdn.net/wujiangbo</a><br><a href="https://blog.csdn.net/xharvard">https://blog.csdn.net/xharvard</a><br><a href="https://blog.csdn.net/weixin_45878889">https://blog.csdn.net/weixin_45878889</a></p><h1 id="二、启动服务"><a href="#二、启动服务" class="headerlink" title="二、启动服务"></a>二、启动服务</h1><ol><li><p>Mac系统启动Jenkins（Windows无需此步骤）<br><code>brew services start jenkins-lts</code><br><code>brew services restart jenkins-lts</code></p></li><li><p>登录<br>本机mac访问地址：<a href="http://localhost:8080/">http://localhost:8080/</a><br>其他电脑访问：<a href="http://mac电脑ip:8080/">http://mac电脑ip:8080/</a></p></li><li><p>账号密码<br>管理员账户：admin<br>密码：123</p></li></ol><h1 id="三、创建项目"><a href="#三、创建项目" class="headerlink" title="三、创建项目"></a>三、创建项目</h1><ol><li>选择<mark>freestyle project</mark></li><li>设置触发时间<ol><li><code>H/5 * * * *</code>：每隔5分钟运行一次</li><li><code>25 9 * * *</code>：每天9：25运行一次</li><li><code>0 8,12,22 * * *</code>：每天的8点，12点，22点，一天构建3次</li><li><code>30,0 9,17 * * *</code>：每天早上9：30、9：00和下午5：30、5：00各构建1次</li><li><code>0 18 * * 3</code>：每周三，下午6点运行一次</li></ol></li></ol><ul><li>注：数字之间以英文逗号连接</li><li>如果想仅构建9：30和下午5：00，可以分别开两个jenkins项目</li></ul><div style="text-align:center;gap:5px">    <img src="/img/jenkins_pic/2.jpg" alt="图片描述"></div><ol start="3"><li><p>设置触发文件</p><ol><li>选择shell方式执行</li><li>打开项目路径：<code>cd /d E:pythonProject\project-management-main\automatic_send_feishu_message</code></li><li>运行项目文件：<code>python send_feishu_message.py</code></li></ol> <div style="text-align:center;gap:5px">     <img src="/img/jenkins_pic/4.jpg" alt="图片描述"> </div></li></ol>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>工具</tag>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数式表达式</title>
    <link href="/2023/11/29/Lambda%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/11/29/Lambda%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1. Lambda表达式"></a>1. Lambda表达式</h1>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>Lambda</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>Java</tag>
      
      <tag>Lambda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux操作系统</title>
    <link href="/2023/11/29/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/11/29/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="一、MacOS"><a href="#一、MacOS" class="headerlink" title="一、MacOS"></a>一、MacOS</h1><h2 id="1-高频命令"><a href="#1-高频命令" class="headerlink" title="1. 高频命令"></a>1. 高频命令</h2><ol><li><p><code>ls</code> 显示当前文件夹下所有的文件<br> <code>ls -al</code> 显示当前页面下的所有文件，可用于检测首页面所有隐藏文件夹，如配置环境变量的最终位置<code>.bash_profile</code></p><p> <code>ll</code> 等价于<code>ls -l</code>以长格式列出目录内容</p></li><li><p><code>open .bash_profile</code> 打开<code>.bash_profile</code>文件夹<br> <code>export PATH=&#123;PATH&#125;:/文件路径（这是是mysql路径）/bin</code>  配置路径</p></li><li><p><code>cd /user/local/bin</code>  进去mac配置环境的路径<br> <code>cd /</code> 回到根目录</p></li><li><p><code>mv chromedriver  /user/local/bin</code> 将chromedriver移动到<code>/user/local/bin</code>下，删除原位置文件</p></li><li><p><code>ps -ef | grep mysq</code>l 全局查找“mysql”文件位置<br> <code>ls | grep mysql</code> 当前路径查找“mysql”文件位置</p></li><li><p><code>pwd</code> 查看当前所在目录</p></li><li><p><code>touch abcd</code> 新建abcd文件</p></li><li><p><code>rm abcd</code>  删除abcd文件<br> <code>rm -rf abcd</code> 强制删除abcd文件 （-r是递归处理，就是一层一层的删，-f是强制删除）<br> <code>sudo rm -drf</code> 最高级别删除</p></li><li><p><code>which virtualenvwrapper.sh</code> 查找virtualenvwrapper所在位置</p></li><li><p><code>mkdir ~/pyEnv</code> 创建一个pyEnv目录</p></li><li><p><code>java -v</code> 不支持<br> <code>java -version</code> 支持</p></li></ol><h2 id="2-查看本机ip"><a href="#2-查看本机ip" class="headerlink" title="2. 查看本机ip"></a>2. 查看本机ip</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ifconfig <span class="hljs-string">| grep &quot;</span>inet<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><div style="text-align:center">    <img src="/img/shell_instruction_pic/2.jpg" alt="图片描述"></div>* 注：个人Mac电脑对应得ip为10.220.164.103<h2 id="3-查找xx文件夹，并将路径输出到终端"><a href="#3-查找xx文件夹，并将路径输出到终端" class="headerlink" title="3. 查找xx文件夹，并将路径输出到终端"></a>3. 查找xx文件夹，并将路径输出到终端</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">type</span> d -<span class="hljs-built_in">name</span> my_folder<br></code></pre></td></tr></table></figure><h2 id="4-分屏"><a href="#4-分屏" class="headerlink" title="4. 分屏"></a>4. 分屏</h2><ol><li>新建分屏</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">command + d<br></code></pre></td></tr></table></figure><ol start="2"><li><mark>取消分屏</mark></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">control + d<br></code></pre></td></tr></table></figure><h2 id="6-配置环境变量"><a href="#6-配置环境变量" class="headerlink" title="6. 配置环境变量 *"></a>6. 配置环境变量 *</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入配置环境变量</span><br>vim ~/.zshrc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出</span><br>esc后，:wq! <br></code></pre></td></tr></table></figure><h2 id="7-zshrc-和-bash-profile"><a href="#7-zshrc-和-bash-profile" class="headerlink" title="7..zshrc 和.bash_profile"></a>7.<code>.zshrc</code> 和<code>.bash_profile</code></h2><p>.bash_profile 和 .zshrc 均在～目录下</p><p>.bash_profile，source ~&#x2F;.bash_profile，只在当前窗口生效</p><p>.zshrc ，source ~&#x2F;.zshrc，永久生效；计算机每次启动自动执行source ~&#x2F;.zshrc</p><p>一般会在~&#x2F;.zshrc中添加source ~&#x2F;.bash_profile，以确保.bash_profile中的修改永久生效。</p><ul><li>总结：推荐使用<code>vim ~/.zshrc</code></li></ul><h2 id="7-Mac系统中的pip用作pip3"><a href="#7-Mac系统中的pip用作pip3" class="headerlink" title="7. Mac系统中的pip用作pip3"></a>7. Mac系统中的<mark>pip用作pip3</mark></h2><p>如：<code>pip3 install --upgrade Django==2.1</code> 将Django版本升级为2.1版本</p><h2 id="8-git相关操作"><a href="#8-git相关操作" class="headerlink" title="8. git相关操作"></a>8. git相关操作</h2><h3 id="1-拉取代码"><a href="#1-拉取代码" class="headerlink" title="1. 拉取代码"></a>1. 拉取代码</h3><p><mark>先cd到想要存储文件的位置，再进行代码拉取</mark></p><ol><li><code>git clone</code></li></ol><ul><li><p>使用场景：通常在你第一次获取某个项目的代码时使用。</p></li><li><p>命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/user/repo.git<br>git clone git@git.corp.kuaishou.com:adqa/kuaishou-adqa-ui-testcase.git<br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li><code>git pull</code></li></ol><ul><li><p>使用场景：用于更新已有的本地仓，获取远程仓库的最新更改时使用。</p></li><li><p>命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull origin main<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>示例</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">来到想要存储文件的地方，拉取代码</span><br>cd java_project<br>git clone git@git.corp.kuaishou.com:adqa/kuaishou-adqa-ui-testcase.git<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当云端代码有更新时间，进入所拉取代码的位置，进行更新</span><br>cd java_project/kuaishou-adqa-ui-testcase<br>git pull origin main<br></code></pre></td></tr></table></figure><h1 id="二、Windows终端"><a href="#二、Windows终端" class="headerlink" title="二、Windows终端"></a>二、Windows终端</h1><h2 id="1-显示当前文件夹下所有的文件"><a href="#1-显示当前文件夹下所有的文件" class="headerlink" title="1. 显示当前文件夹下所有的文件"></a>1. 显示当前文件夹下所有的文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span><br></code></pre></td></tr></table></figure><h2 id="2-在终端中切换磁盘"><a href="#2-在终端中切换磁盘" class="headerlink" title="2. 在终端中切换磁盘"></a>2. 在终端中切换磁盘</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /d 想要进入的盘符:<br></code></pre></td></tr></table></figure><div style="text-align:center">    <img src="/img/shell_instruction_pic/6.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/shell_instruction_pic/7.jpg" alt="图片描述"></div><h2 id="3-查找终端安装包的位置"><a href="#3-查找终端安装包的位置" class="headerlink" title="3. 查找终端安装包的位置"></a>3. 查找终端安装包的位置</h2><ol><li>查找终端安装包都有什么：pip list</li><li>查找某包的位置：pip show idna</li><li>可以直接将python中的包，复制到终端下<div style="text-align:center"> <img src="/img/shell_instruction_pic/8.jpg" alt="图片描述"></div></li></ol><h2 id="4-查看python中安装的库"><a href="#4-查看python中安装的库" class="headerlink" title="4. 查看python中安装的库"></a>4. 查看python中安装的库</h2><p>查看python中安装的库以及版本</p><p>输入pip list，便可以查看到所有安装的库以及版本</p><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/9.jpg" alt="图片描述" style="zoom:60%;"></div><h1 id="三、Linux操作系统"><a href="#三、Linux操作系统" class="headerlink" title="三、Linux操作系统"></a>三、Linux操作系统</h1><ul><li>学习链接：<a href="https://www.bilibili.com/video/BV1pE411C7ho/?p=37&spm_id_from=pageDriver&vd_source=4cf7b60c223a665538a4d958765c91a5">https://www.bilibili.com/video/BV1pE411C7ho/?</a></li></ul><h2 id="1-bash是什么"><a href="#1-bash是什么" class="headerlink" title="1. bash是什么"></a>1. bash是什么</h2><ol><li>bash是一个命令处理器，运行在文本窗口中，并能执行用户直接输入的命令。即终端</li><li>bash还能从.sh文件中读取linux命令，称之为脚本</li><li>bash还支持通配符、管道、命令替换、条件判断等逻辑控制语句</li></ol><h2 id="2-目录操作命令"><a href="#2-目录操作命令" class="headerlink" title="2. 目录操作命令"></a>2. 目录操作命令</h2><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/11.png" alt="图片描述" style="zoom:60%;"></div><h3 id="1-ls-显示目录下的内容"><a href="#1-ls-显示目录下的内容" class="headerlink" title="1. ls - 显示目录下的内容"></a>1. ls - 显示目录下的内容</h3><ul><li>英文原意：list</li></ul><ol><li>以列表形式显示文件：<code>ls -l</code></li><li>显示隐藏文件：<code>ls -a</code></li></ol><h3 id="2-pwd-查看当前目录"><a href="#2-pwd-查看当前目录" class="headerlink" title="2. pwd - 查看当前目录"></a>2. pwd - 查看当前目录</h3><ul><li>英文原意：print work directory</li></ul><h3 id="3-cd-切换所在目录"><a href="#3-cd-切换所在目录" class="headerlink" title="3. cd - 切换所在目录"></a>3. cd - 切换所在目录</h3><ul><li>英文原意：change directory</li></ul><ol><li>当前目录：<code>cd .</code></li><li>返回上一级目录：<code>cd ..</code></li><li>返回根目录：<code>cd ~</code></li></ol><h3 id="4-mkdir-创建空目录"><a href="#4-mkdir-创建空目录" class="headerlink" title="4. mkdir - 创建空目录"></a>4. mkdir - 创建空目录</h3><ul><li>英文原意：make directory</li><li>注：只能一级一级创建文件夹，不能同时创建多级目录</li></ul><ol><li>创建文件夹：<code>mkdir 目录名</code>，如<code>mkdir aa</code></li></ol><h2 id="3-文件操作命令"><a href="#3-文件操作命令" class="headerlink" title="3. 文件操作命令"></a>3. 文件操作命令</h2><h3 id="1-touch-创建空文件"><a href="#1-touch-创建空文件" class="headerlink" title="1. touch - 创建空文件"></a>1. touch - 创建空文件</h3><ol><li>创建文本：<code>touch text01.txt</code></li><li>创建隐藏文件：<code>touch .text02.txt</code></li></ol><h3 id="2-cat-查看文件内容"><a href="#2-cat-查看文件内容" class="headerlink" title="2. cat - 查看文件内容"></a>2. cat - 查看文件内容</h3><ol><li>查看文件内容：<code>cat 文件名</code></li><li>查看文件内容，并显示行号：<code>cat -n 文件名</code></li></ol><h3 id="3-more-分屏显示文件内容"><a href="#3-more-分屏显示文件内容" class="headerlink" title="3. more - 分屏显示文件内容"></a>3. more - 分屏显示文件内容</h3><ul><li>一般当文件内容比较多的时候，使文件的内容在终端分页进行打印</li></ul><ol><li>查看文件内容：<code>more 文件名</code></li></ol><h2 id="4-目录-文件操作命令"><a href="#4-目录-文件操作命令" class="headerlink" title="4. 目录 &amp; 文件操作命令"></a>4. 目录 &amp; 文件操作命令</h2><h3 id="1-rm-删除目录或文件"><a href="#1-rm-删除目录或文件" class="headerlink" title="1. rm - 删除目录或文件"></a>1. rm - 删除目录或文件</h3><ul><li>英文原意：remove</li></ul><ol><li>移除文件：<code>rm text01.txt</code></li><li>移除文件夹：<code>rm -d aa</code> 或 <code>rm -r aa</code></li></ol><h3 id="2-cp-复制文件"><a href="#2-cp-复制文件" class="headerlink" title="2. cp - 复制文件"></a>2. cp - 复制文件</h3><ul><li>英文原意：copy</li></ul><ol><li>复制文件：<code>cp 文件名 复制的位置</code>， <code>cp test01.txt aa</code></li><li>复制文件夹：<code>cp -r 文件夹名 复制的位置</code>， <code>cp -r aa/bb .</code></li></ol><h3 id="3-mv-剪切文件或目录"><a href="#3-mv-剪切文件或目录" class="headerlink" title="3. mv - 剪切文件或目录"></a>3. mv - 剪切文件或目录</h3><ul><li>英文原意：move</li></ul><ol><li>移动文件位置：<code>mv 源文件 目标目录</code>，<code>mv test01.txt aa</code></li><li>移动文件夹位置：<code>mv 源目录 目标目录</code>，<code>mv bb aa</code></li></ol><h2 id="5-搜索文件内容"><a href="#5-搜索文件内容" class="headerlink" title="5. 搜索文件内容"></a>5. 搜索文件内容</h2><h3 id="1-find-制定目录下查找文件"><a href="#1-find-制定目录下查找文件" class="headerlink" title="1. find - 制定目录下查找文件"></a>1. find - 制定目录下查找文件</h3><ol><li>精确搜索 文件所在位置：<code>find 搜索路径 -name 查找的文件名</code>，<code>find /home -name &quot;test02.txt&quot;</code></li><li>模糊搜索 文件所在位置：<code>find 搜索路径 -name 残缺的名字*</code>或<code>find 搜索路径 -name 残缺的名字？？</code></li></ol><p>​例：<code>find /home -name test*</code> 或 <code>find /home -name test??????</code></p><ol start="3"><li>不区分文件大小写的搜索：<code>find 搜索路径 -iname 查找的文件名</code></li></ol><h3 id="2-locate-按照文件名搜索文件"><a href="#2-locate-按照文件名搜索文件" class="headerlink" title="2. locate - 按照文件名搜索文件"></a>2. locate - 按照文件名搜索文件</h3><ul><li>解释：locate命令其实是<code>find -name</code>的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录(<code>find</code> 是去硬盘找)，而是搜索一个数据库<code>/var/lib/mlocate/mlocate.db</code>，这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用<mark><code>locate</code>命令查不到最新变动过的文件</mark>，为了避免这种情况，可以在使用<code>locate</code>之前，先使用<code>updatedb</code>命令手动更新数据库</li><li>优点：搜索速度快</li><li>缺点：只能按照文件名来搜索文件，而不能执行更复杂的搜索</li></ul><ol><li>查找文件所在位置：<code>locate 查找的文件名</code></li></ol><h3 id="3-grep-提取文本中所需的信息"><a href="#3-grep-提取文本中所需的信息" class="headerlink" title="3. grep - 提取文本中所需的信息"></a>3. grep - 提取文本中所需的信息</h3><ol><li>搜索文件内容：<code>grep 搜索的内容 文件名</code></li><li>搜索文件内容，忽略大小写：<code>grep -i 搜索的内容 文件名</code></li><li>搜索文件内容，并标记行号：<code>grep -n 搜索的内容 文件名</code></li><li>搜索文件内容，反向查找：<code>grep -v 搜索的内容 文件名</code></li><li>搜索以xx开头的文件内容：<code>grep ^搜索的内容 文件名</code></li><li>搜索以xx结尾的文件内容：<code>grep 搜索的内容$ 文件名</code></li></ol><h3 id="4-管道符"><a href="#4-管道符" class="headerlink" title="4. | - 管道符"></a>4. | - 管道符</h3><ul><li>命令格式：<code>命令1 | 命令2</code></li><li>“|”管道符的作用是把命令1的正确输出作为命令2的操作对象</li><li>一般配合more使用</li></ul><ol><li>分页查看抓取到的内容：<code>grep -v ^&#39;#&#39; /etc/services | more</code><ol><li>grep：抓取内容</li><li>-v：取反</li><li>^’#’：以#开头</li><li>more：分页打印</li></ol></li><li>筛选输出的内容：<code>ls -lh | grep 125</code></li></ol><h2 id="6-文本输出"><a href="#6-文本输出" class="headerlink" title="6. 文本输出"></a>6. 文本输出</h2><h3 id="1-echo-在控制台进行打印"><a href="#1-echo-在控制台进行打印" class="headerlink" title="1. echo - 在控制台进行打印"></a>1. echo - 在控制台进行打印</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo zhangchen&#123;666,888&#125;<br><span class="hljs-meta prompt_">-&gt;</span><span class="language-bash">zhangchen666 zhangchen888</span><br><br>echo zhangchen&#123;1..3&#125;<br><span class="hljs-meta prompt_">-&gt;</span><span class="language-bash">zhangchen1 zhangchen2 zhangchen3</span><br><br>echo zhangchen&#123;1..5..2&#125;<br><span class="hljs-meta prompt_">-&gt;</span><span class="language-bash">zhangchen1 zhangchen3 zhangchen5</span><br></code></pre></td></tr></table></figure><h3 id="2-将结果保存起来"><a href="#2-将结果保存起来" class="headerlink" title="2.&gt;-  将结果保存起来"></a>2.<code>&gt;</code>-  将结果保存起来</h3><ol><li>将文本输入到文件中，覆盖文件原有内容：<code>echo hello &gt; test01.txt</code></li><li>将文本输入到文件中，不覆盖文件原有内容：<code>echo hello &gt;&gt; test01.txt</code></li><li>将列表信息，写入到文件中：<code>ls &gt; test01.txt</code></li><li>将查找的信息，写入到文件中：<code>grep siki 126.txt &gt;&gt; test01.txt</code><ol><li>将<code>126.txt</code>文件中，包含<code>siki</code>元素的行，写入<code>test01.txt</code>文件中</li></ol></li></ol><h2 id="7-其他操作"><a href="#7-其他操作" class="headerlink" title="7. 其他操作"></a>7. 其他操作</h2><h3 id="1-退出ubuntu子目录"><a href="#1-退出ubuntu子目录" class="headerlink" title="1. 退出ubuntu子目录"></a>1. 退出ubuntu子目录</h3><p>输入exit（）</p><h3 id="2-查看ubuntu系统版本"><a href="#2-查看ubuntu系统版本" class="headerlink" title="2. 查看ubuntu系统版本"></a>2. 查看ubuntu系统版本</h3><p>输入cat &#x2F;proc&#x2F;version</p><p>下图所示ubuntu版本为：7.5.0</p><div style="text-align:center;gap:5px">    <img src="/img/shell_instruction_pic/10.jpg" alt="图片描述" style="zoom:60%;"></div><h3 id="3-快捷键"><a href="#3-快捷键" class="headerlink" title="3. 快捷键"></a>3. 快捷键</h3><ol><li>命令补全</li></ol><p><code>残缺命令 + Tab键</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">py + Tab键<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">-&gt;</span><span class="language-bash"></span><br><span class="language-bash">pydoc3             pydoc3.7           python             python3-config     python3.10-config  python3.7-config   python3.7m-config  pyvenv-3.7</span><br>pydoc3.10          pyenv_prompt_info  python3            python3.10         python3.7          python3.7m         pyvenv<br></code></pre></td></tr></table></figure><ul><li>也常用于cd路径时，补全路径</li></ul><h1 id="五、手表手环终端"><a href="#五、手表手环终端" class="headerlink" title="五、手表手环终端"></a>五、手表手环终端</h1><h2 id="1-向固件中推入apk"><a href="#1-向固件中推入apk" class="headerlink" title="1. 向固件中推入apk"></a>1. 向固件中推入apk</h2><ol><li>adb devices   # pc是否通过usb检测到固件</li><li>adb root </li><li>adb remount</li><li>adb push WearSysUi.apk &#x2F;system&#x2F;priv-app&#x2F;WearSysUi&#x2F;</li><li>adb disable-verity</li><li>adb shell reboot  # 重启</li></ol><h2 id="2-拉取固件日志"><a href="#2-拉取固件日志" class="headerlink" title="2. 拉取固件日志"></a>2. 拉取固件日志</h2><ol><li>adb bugreport  #所拉取日志位于 此电脑-c盘-用户-用户处</li></ol>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>操作系统</tag>
      
      <tag>MacOS</tag>
      
      <tag>Windows</tag>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript之jQuery</title>
    <link href="/2023/11/29/jQuery/"/>
    <url>/2023/11/29/jQuery/</url>
    
    <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h2 id="1-jQuery简介"><a href="#1-jQuery简介" class="headerlink" title="1. jQuery简介"></a>1. jQuery简介</h2><p>jQuery是一个JavaScript的第三方库，会有一些更棒的工具依赖jQuery，例如：Bootstrap动态效果</p><h2 id="2-jQuery安装"><a href="#2-jQuery安装" class="headerlink" title="2. jQuery安装"></a>2. jQuery安装</h2><ol><li>安装方法参考：<a href="https://blog.csdn.net/AAAAA1235555/article/details/123367911">https://blog.csdn.net/AAAAA1235555/article/details/123367911</a></li><li>下载地址：<a href="https://jquery.com/">https://jquery.com/</a></li></ol><h2 id="3-具体使用"><a href="#3-具体使用" class="headerlink" title="3. 具体使用"></a>3. 具体使用</h2><ol><li>将下载好的jQuery文件存储在static.jQuery.jquery.js中</li><li>运行下方代码查看效果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;% load staticfiles %&#125;<br>&lt;!doctype html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/jQuery/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-selector-tag">div</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="language-css"><span class="language-xml">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="language-css"><span class="language-xml">            <span class="hljs-attribute">background-color</span>: skyblue;</span></span><br><span class="language-css"><span class="language-xml">        &#125;</span></span><br><span class="language-css"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txt&quot;</span>&gt;</span>中国联通<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//实现jquery中的功能实现某些效果</span></span></span><br><span class="language-javascript"><span class="language-xml">    $(<span class="hljs-string">&quot;#txt&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;广西1移动&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//隐藏div盒子</span></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">hide</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;恭喜 jQuery得大门正在向你打开&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="二、实际应用"><a href="#二、实际应用" class="headerlink" title="二、实际应用"></a>二、实际应用</h1><h2 id="1-寻找标签"><a href="#1-寻找标签" class="headerlink" title="1. 寻找标签"></a>1. 寻找标签</h2><h3 id="1-直接寻找"><a href="#1-直接寻找" class="headerlink" title="1. 直接寻找"></a>1. 直接寻找</h3><ol><li>ID选择器<p class="note note-primary">$("#txt")</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;h1 id=<span class="hljs-string">&quot;txt&quot;</span>&gt;中国联通&lt;/h1&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>中国移动<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>样式选择器<p class="note note-primary">$(".c1")</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;h1 <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;中国联通&lt;/h1&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span>中国移动<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="3"><li>标签选择器<p class="note note-primary">$("h1")</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;h1 <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;中国联通&lt;/h1&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>中国移动<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="4"><li>层级选择器<p class="note note-primary">$(".c1 .c2 a")</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;h1 <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>中国联通<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>中国移动<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/h1&gt;<br></code></pre></td></tr></table></figure><ol start="5"><li>多选择器<p class="note note-primary">$("#c3,#c2,li")</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;h1 <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c3&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>中国联通<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/h1&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span>中国移动<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>xx<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="6"><li>属性选择器<p class="note note-primary">$("input[name='n1']")</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&#x27;text&#x27;</span> name=<span class="hljs-string">&quot;n1&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;n2&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="2-间接寻找"><a href="#2-间接寻找" class="headerlink" title="2. 间接寻找"></a>2. 间接寻找</h3><ol><li>找兄弟<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div&gt;<br>    &lt;div&gt;北京&lt;div&gt;<br>    &lt;div id=&#x27;c1&#x27;&gt;上海&lt;/div&gt;<br>    &lt;div&gt;深圳&lt;div&gt;<br>    &lt;div&gt;广州&lt;div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">prev</span>()  <span class="hljs-comment">//上一个</span><br>$(<span class="hljs-string">&quot;#c1&quot;</span>)<br>$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">next</span>()  <span class="hljs-comment">//下一个</span><br>$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">next</span>()  <span class="hljs-comment">//下一个、下一个</span><br>$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">siblings</span>()     <span class="hljs-comment">//所有的系统</span><br></code></pre></td></tr></table></figure><ol start="2"><li>找父子<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;c1&#x27;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>青浦区<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p10&quot;</span>&gt;</span>宝山区<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>浦东新区<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>陕西<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>山西<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>河北<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>河南<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#c1).parent()      // 父亲</span><br><span class="hljs-string">$(&quot;</span>#c1).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>()    <span class="hljs-comment">// 父亲</span><br><br>$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">children</span>()     <span class="hljs-comment">// 所有的儿子</span><br>$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&quot;.p10&quot;</span>)    <span class="hljs-comment">// 在所有儿子中寻找class=p10</span><br><br>$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;.p10&quot;</span>)      <span class="hljs-comment">// 去所有子孙中寻找class=p10</span><br>$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;div&quot;</span>)       <span class="hljs-comment">// 去所有子孙中寻找div标签</span><br></code></pre></td></tr></table></figure><h2 id="2-值的操作"><a href="#2-值的操作" class="headerlink" title="2. 值的操作"></a>2. 值的操作</h2><h3 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1. 使用方法"></a>1. 使用方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&#x27;c1&#x27;</span>&gt;内容&lt;/div&gt;<br><br>$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">text</span>()     <span class="hljs-comment">// 获取文本内容</span><br>$(<span class="hljs-string">&quot;#c2&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;休息“)     // 设置文本内容</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&#x27;text&#x27;</span> id=<span class="hljs-string">&#x27;c2&#x27;</span>&gt;<br><br>$(<span class="hljs-string">&quot;#c2&quot;</span>).<span class="hljs-title function_">val</span>()     <span class="hljs-comment">// 获取用户输入的值</span><br>$(<span class="hljs-string">&quot;#c2&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;哈哈哈&quot;</span>)     <span class="hljs-comment">// 设置值</span><br></code></pre></td></tr></table></figure><h3 id="2-动态创建数据案例"><a href="#2-动态创建数据案例" class="headerlink" title="2. 动态创建数据案例"></a>2. 动态创建数据案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;input type=&quot;text&quot; id=&quot;txtUser&quot; placeholder=&quot;用户名&quot;&gt;<br>    &lt;input type=&quot;text&quot; id=&quot;txtEmail&quot; placeholder=&quot;邮箱&quot;&gt;<br>    &lt;input type=&quot;button&quot; value=&quot;提交&quot; onclick=&quot;getInfo()&quot;&gt;<br><br>    &lt;ul id=&quot;view&quot;&gt;&lt;/ul&gt;<br><br>    &lt;script src=&quot;static/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        function getInfo()&#123;<br>            // 1. 获取用户输入的用户名和密码<br>            var username = $(&quot;#txtUser&quot;).val();<br>            var email = $(&quot;#txtEmail&quot;).val();<br>            var dataString = username + &quot; - &quot; + email;<br><br>            // 2. 创建li标签，在li的内部写入内容，$(&quot;&lt;li&gt;&quot;)<br>            var newLi = $(&quot;&lt;li&gt;&quot;).text(dataString);<br><br>            // 3. 把新创建的li标签添加到ul里面<br>            $(&quot;#view&quot;).append(newLi);<br>        &#125;<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/jquery_pic/2.jpg" alt="图片描述"></div><h2 id="3-jQuery正确书写方式"><a href="#3-jQuery正确书写方式" class="headerlink" title="3. jQuery正确书写方式"></a>3. jQuery正确书写方式</h2><ul><li>为了使页面内容快速加载，减少用户等待时间。一般设置html框架加载完成后，再执行javascript代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>谷歌<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>搜狗<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;static/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 当页面的框架加载完成之后，自动执行</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;li&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">remove</span>();</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></li></ul><h1 id="三、tips"><a href="#三、tips" class="headerlink" title="三、tips"></a>三、tips</h1><h2 id="1-弹出框示例"><a href="#1-弹出框示例" class="headerlink" title="1. 弹出框示例"></a>1. 弹出框示例</h2><ol><li><p><code>html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnadd&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg&quot;</span>&gt;</span><br>Launch demo modal<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Modal --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myModal&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;dialog&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;myModalLabel&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;document&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;close&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Close&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-symbol">&amp;times;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myModalLabel&quot;</span>&gt;</span>Modal title<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;</span><br>        ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span>Close<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Save changes<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>js</code></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;% block js %&#125;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">bindBtnAddEvent</span>();<br>    &#125;)<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">bindBtnAddEvent</span>(<span class="hljs-params"></span>)&#123;<br>        $(<span class="hljs-string">&quot;#btnadd&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-comment">//点击按钮，显示对话框</span><br>            $(<span class="hljs-string">&quot;#myModal&quot;</span>).<span class="hljs-title function_">modal</span>(<span class="hljs-string">&quot;show&quot;</span>);<br>        &#125;)<br>    &#125;<br>    &lt;/script&gt;<br><br>&#123;% endblock %&#125;<br><span class="hljs-string">``</span><span class="hljs-string">`</span><br></code></pre></td></tr></table></figure><h2 id="2-多个相同id绑定事件"><a href="#2-多个相同id绑定事件" class="headerlink" title="2. 多个相同id绑定事件"></a>2. 多个相同id绑定事件</h2><ol><li>所有触发器的id取相同值，当点击某一按钮后，触发效果皆相同（触发全部按钮对应的事件）</li></ol><ul><li><p><code>html</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span> style=<span class="hljs-string">&quot;cursor: pointer;height: 41px&quot;</span>&gt;<br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: left&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;springList(this);&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;springList&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-th-list&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 功耗模型</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-right&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnadd&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success btn-xs navbar-right&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-plus&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>新建项目</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></li><li><p><code>js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">springList</span>();<br>    &#125;)<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">springList</span>(<span class="hljs-params">self</span>) &#123;<br>        <span class="hljs-keyword">let</span> springList = $(<span class="hljs-string">&#x27;[id=springList]&#x27;</span>)<br>    <br>        springList.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span> springList.<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">next</span>().<span class="hljs-title function_">hasClass</span>(<span class="hljs-params"><span class="hljs-string">&quot;hide&quot;</span></span>) &#123;<br>            springList.<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">next</span>().<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;hide&quot;</span>);<br>            springList.<span class="hljs-title function_">next</span>().<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;hide&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>            springList.<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">next</span>().<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;hide&quot;</span>);<br>            springList.<span class="hljs-title function_">next</span>().<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;hide&quot;</span>);<br>            &#125;<br>        &#125;<br>    )&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li>所有触发器的id取相同值，当点击某一按钮后，触发效果相同（仅触发此按钮对应的事件）</li></ol><ul><li><p><code>html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor: pointer;height: 41px&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: left&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;springList(this);&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;springList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-th-list&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 功耗模型<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-right&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnadd&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success btn-xs navbar-right&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-right: 10px&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-plus&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>新建项目<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">springList</span>();<br>    &#125;)<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">springList</span>(<span class="hljs-params">self</span>) &#123;<br><br>        $(self).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span> ($(self).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">next</span>().<span class="hljs-title function_">hasClass</span>(<span class="hljs-string">&quot;hide&quot;</span>)) &#123;<br>                $(self).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">next</span>().<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;hide&quot;</span>);<br>                $(self).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;hide&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                $(self).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">next</span>().<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;hide&quot;</span>);<br>                $(self).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;hide&quot;</span>);<br>            &#125;<br>        &#125;)<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-前端页面显示打印的log"><a href="#3-前端页面显示打印的log" class="headerlink" title="3. 前端页面显示打印的log"></a>3. 前端页面显示打印的log</h2><ol><li>普通打印</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(form)<br></code></pre></td></tr></table></figure><ol start="2"><li>将打印内容固定，不随页面刷新而消失</li></ol><p>使用浏览器的开发者工具中的“Preserve log”选项，来保留控制台的内容。这样即使刷新网页，控制台中的内容也不会被清除</p><div style="text-align:center;gap:5px">    <img src="/img/jquery_pic/4.jpg" alt="图片描述"></div><h2 id="4-js修改文本内容"><a href="#4-js修改文本内容" class="headerlink" title="4. js修改文本内容"></a>4. js修改文本内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bindBtnAddEvent</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#btnadd&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 清空对话框中的数据</span><br>        $(<span class="hljs-string">&quot;#formAdd&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">reset</span>();<br>        <span class="hljs-comment">// 设置对话框的标题</span><br>        $(<span class="hljs-string">&quot;#myModalLabel&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;新建项目&quot;</span>)<br>        <span class="hljs-comment">// 点击按钮，显示添加项目的对话框</span><br>        $(<span class="hljs-string">&quot;#myModal&quot;</span>).<span class="hljs-title function_">modal</span>(<span class="hljs-string">&quot;show&quot;</span>);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-js清空弹出框对应标签的内容"><a href="#5-js清空弹出框对应标签的内容" class="headerlink" title="5. js清空弹出框对应标签的内容"></a>5. js清空弹出框对应标签的内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bindBtnAddEvent</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#btnadd&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 清空对话框中的数据</span><br>        $(<span class="hljs-string">&quot;#formAdd&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">reset</span>();<br>        <span class="hljs-comment">// 设置对话框的标题</span><br>        $(<span class="hljs-string">&quot;#myModalLabel&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;新建项目&quot;</span>)<br>        <span class="hljs-comment">// 点击按钮，显示添加项目的对话框</span><br>        $(<span class="hljs-string">&quot;#myModal&quot;</span>).<span class="hljs-title function_">modal</span>(<span class="hljs-string">&quot;show&quot;</span>);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-前端某隐藏，点击按钮后出现，再次点击消失"><a href="#6-前端某隐藏，点击按钮后出现，再次点击消失" class="headerlink" title="6. 前端某隐藏&lt;div&gt;，点击按钮后出现，再次点击消失"></a>6. 前端某隐藏<code>&lt;div&gt;</code>，点击按钮后出现，再次点击消失</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Toggle Div Example&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div class=&quot;panel panel-default&quot; onclick=&quot;MenuDown(&#x27;L67_table_data&#x27;)&quot;&gt;<br>        &lt;div class=&quot;panel-default container&quot;&gt;<br>        &lt;div class=&quot;panel-body&quot; id=&quot;L67_table_data&quot; style=&quot;display:none&quot;&gt;<br>            &lt;...&gt;<br>    &lt;/div&gt;<br>    &lt;script&gt;<br>       function MenuDown(projecTableData) &#123;<br>           var tableData = document.getElementById(projecTableData);<br>           if (tableData.style.display === &quot;none&quot;) &#123;<br>               tableData.style.display = &quot;block&quot;;<br>           &#125; else &#123;<br>               tableData.style.display = &quot;none&quot;;<br>           &#125;<br>    &#125;<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="7-前端传递url关键词不显示"><a href="#7-前端传递url关键词不显示" class="headerlink" title="7. 前端传递url关键词不显示"></a>7. 前端传递url关键词不显示</h2><p>左边方式有问题，更换为右边形式</p><div style="text-align:center;gap:5px">    <img src="/img/jquery_pic/3.jpg" alt="图片描述"></div><h2 id="8-前端设计一个按钮，点击后会返回上一个网址"><a href="#8-前端设计一个按钮，点击后会返回上一个网址" class="headerlink" title="8. 前端设计一个按钮，点击后会返回上一个网址"></a>8. 前端设计一个按钮，点击后会返回上一个网址</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button onclick=<span class="hljs-string">&quot;window.history.back()&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-reply&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br>&lt;/button&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
      <tag>JavaScript库</tag>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2023/11/28/JavaScript/"/>
    <url>/2023/11/28/JavaScript/</url>
    
    <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h2 id="1-JavaScript3介绍"><a href="#1-JavaScript3介绍" class="headerlink" title="1. JavaScript3介绍"></a>1. JavaScript3介绍</h2><ol><li>JavaScript简介<ol><li>可以理解为浏览器就是javascript的解释器</li><li>javascript是一种轻量级的脚本语言。所谓“脚本语言”指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序的“脚本”</li><li>javascript是一种嵌入式语言。它本身提供的核心语法不算很多</li></ol></li><li>为什么学习javascript<ol><li>使我们的前端页面具有动态效果</li><li>控制浏览器的能力</li><li>广泛的使用领域</li></ol></li></ol><h1 id="二、javascript具体应用"><a href="#二、javascript具体应用" class="headerlink" title="二、javascript具体应用"></a>二、javascript具体应用</h1><h2 id="1-语句"><a href="#1-语句" class="headerlink" title="1. 语句"></a>1. 语句</h2><ol><li>javascript程序的单位是行，也就是一行一行的执行。一般情况下，每一行就是一个语句。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>; <br></code></pre></td></tr></table></figure><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h2><ol><li><p>定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> v1 = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>];<br><span class="hljs-keyword">var</span> v2 = <span class="hljs-title class_">Array</span>([<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>]);<br></code></pre></td></tr></table></figure></li><li><p>操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> v1 = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>];<br><br>v1[<span class="hljs-number">1</span>]<br>v1[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;zhangchen&quot;</span>;<br><br>v1.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;zc&quot;</span>);  <span class="hljs-comment">//尾部追加[11,22,33,44,&quot;zc&quot;]</span><br><br>v1.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&quot;zc&quot;</span>);   <span class="hljs-comment">//头部添加[&quot;zc&quot;,11,22,33,44]</span><br><br><span class="hljs-comment">// v1.splice(索引位置,0,元素);</span><br>v1.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;zc&quot;</span>);   <span class="hljs-comment">//从中间插入[11,&quot;zc&quot;,22,33,44]</span><br><br>v1.<span class="hljs-title function_">pop</span>();   <span class="hljs-comment">//尾部删除</span><br>v1.<span class="hljs-title function_">shift</span>();   <span class="hljs-comment">//头部删除</span><br><span class="hljs-comment">// v1.splice(索引位置,1);</span><br>v1.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);   <span class="hljs-comment">//将索引为2的元素删除[11,22,44]</span><br></code></pre></td></tr></table></figure></li><li><p>循环使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vl = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> idx <span class="hljs-keyword">in</span> vl)&#123;<br>    <span class="hljs-comment">// idx = 0/1/2/3</span><br>    <span class="hljs-comment">// data = vl[idx]</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vl = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>]<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;vl.<span class="hljs-property">length</span>; i++)&#123;<br>    <span class="hljs-comment">// i=0/1/2/3  </span><br>    <span class="hljs-comment">// data=vl[idx]</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>进阶<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><br><span class="hljs-comment">// 发送网络请求，获取数据</span><br><span class="hljs-keyword">var</span> cityList = [<span class="hljs-string">&quot;北京&quot;</span>,<span class="hljs-string">&quot;上海&quot;</span>,<span class="hljs-string">&quot;深圳&quot;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> idx <span class="hljs-keyword">in</span> cityList)&#123;<br>    <span class="hljs-keyword">var</span> text = cityList[idx];<br><br>    <span class="hljs-comment">// 创建&lt;li&gt;&lt;/li&gt;</span><br>    <span class="hljs-keyword">var</span> tag = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;li&quot;</span>);<br>    <span class="hljs-comment">// 在li标签中写入内容</span><br>    tag.<span class="hljs-property">innerText</span> = text;<br><br>    <span class="hljs-comment">// 添加到id=city那个标签里面</span><br>    <span class="hljs-keyword">var</span> parentTag = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;city&quot;</span>);<br>    parentTag.<span class="hljs-title function_">appendChild</span>(tag);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-字典对象"><a href="#3-字典对象" class="headerlink" title="3. 字典对象"></a>3. 字典对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">info = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;zc&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br><br># 修改<br>info.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;zl&quot;</span><br>info[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;zl&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-变量的打印"><a href="#4-变量的打印" class="headerlink" title="4. 变量的打印"></a>4. 变量的打印</h2><ol><li><p>正常打印</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>    num = <span class="hljs-number">30</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px"> <img src="/img/javascript_pic/2.jpg" alt="图片描述"></div></li><li><p>undefined</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/javascript_pic/3.jpg" alt="图片描述"></div><ol start="3"><li>报错</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><div style="text-align:center;gap:5px">    <img src="/img/javascript_pic/4.jpg" alt="图片描述"></div><h2 id="5-将javascript引入到html文件中"><a href="#5-将javascript引入到html文件中" class="headerlink" title="5. 将javascript引入到html文件中"></a>5. 将javascript引入到html文件中</h2><p>javascript一般放在<body>内的最后面。因为html是按顺序执行的，先执行html后执行javascript</p><div style="text-align:center;gap:5px">    <img src="/img/javascript_pic/5.jpg" alt="图片描述"></div><h2 id="6-javascript输出方式"><a href="#6-javascript输出方式" class="headerlink" title="6. javascript输出方式"></a>6. javascript输出方式</h2><ol><li>控制台输出<br><code>console.log(&quot;要输出的内容&quot;)</code></li></ol><div style="text-align:center;gap:5px">    <img src="/img/javascript_pic/6.jpg" alt="图片描述"></div><ol start="2"><li>弹出框输出<br><code>alert(&quot;要输出的内容&quot;)</code></li></ol><div style="text-align:center;gap:5px">    <img src="/img/javascript_pic/7.jpg" alt="图片描述"></div><ol start="3"><li>页面中输出<br><code>document.write(&quot;要输出的内容&quot;)</code></li></ol><div style="text-align:center;gap:5px">    <img src="/img/javascript_pic/8.jpg" alt="图片描述"></div><h2 id="7-前端页面打印数据格式"><a href="#7-前端页面打印数据格式" class="headerlink" title="7. 前端页面打印数据格式"></a>7. 前端页面打印数据格式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// string</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-number">42</span>); <span class="hljs-comment">// number</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>); <span class="hljs-comment">// boolean</span><br></code></pre></td></tr></table></figure><h2 id="8-后端数据传给前端js"><a href="#8-后端数据传给前端js" class="headerlink" title="8. 后端数据传给前端js *"></a>8. 后端数据传给前端js *</h2><ol><li><code>后端</code></li></ol><p>后端返回的是一个渲染后的HTML页面，其中包含了一个名为<code>status</code>的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;app_test_group.html&quot;</span>, &#123;<span class="hljs-string">&#x27;status&#x27;</span>: status&#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li><code>前端</code></li></ol><p><code>&#123;&#123; status &#125;&#125;</code>是Django模板语言的语法，它会将<code>status</code>变量的值插入到HTML页面中。然后，JavaScript代码可以使用<code>status</code>变量来执行任何操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">var</span> status = <span class="hljs-string">&quot;&#123;&#123; status &#125;&#125;&quot;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(status);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>这种方法只适用于在HTML页面中嵌入少量数据。如果您需要从后端获取大量数据，或者需要在前端和后端之间进行实时通信，您应该考虑使用AJAX或WebSocket等技术。</p><h1 id="三、Tips"><a href="#三、Tips" class="headerlink" title="三、Tips"></a>三、Tips</h1><h2 id="1-获得前端页面当前的url"><a href="#1-获得前端页面当前的url" class="headerlink" title="1. 获得前端页面当前的url"></a>1. <mark>获得前端页面当前的url</mark></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取当前页面得URL</span><br><span class="hljs-keyword">var</span> currentUrl = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;currentUrl&#x27;</span>, currentUrl)<br></code></pre></td></tr></table></figure><h2 id="2-设置导航栏被点击之后，被选中的效果"><a href="#2-设置导航栏被点击之后，被选中的效果" class="headerlink" title="2. 设置导航栏被点击之后，被选中的效果"></a>2. 设置导航栏被点击之后，被选中的效果</h2><ul><li>html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://&#123;&#123; host_url &#125;&#125;/Web_API&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #777777; text-decoration: none;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>API<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 90px&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://&#123;&#123; host_url &#125;&#125;/tilt&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #777777; text-decoration: none;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                        抬腕亮屏<br>                        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-caret-down&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menuChildren&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 200%&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #777777; text-decoration: none;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;drop&quot;</span>&gt;</span>项目列表<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #777777; text-decoration: none;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;drop&quot;</span>&gt;</span>能力看板<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #777777; text-decoration: none;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;drop&quot;</span>&gt;</span>算法离线检测<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>javascript</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 查找导航中得url</span><br>        <span class="hljs-title function_">searchNavigationUrl</span>();<br>    &#125;)<br><br>    <span class="hljs-comment">// 查找父类导航得url</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">searchNavigationUrl</span>(<span class="hljs-params"></span>) &#123;<br><br>        <span class="hljs-comment">// 获取当前页面得URL</span><br>        <span class="hljs-keyword">var</span> currentUrl = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;当前页面得url为，currentUrl&#x27;</span>, currentUrl)<br><br>        <span class="hljs-comment">// 遍历父类导航栏中的每个导航项</span><br>        $(<span class="hljs-string">&#x27;.menu&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> parent_href = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>);<br><br>            <span class="hljs-comment">// 判断当前页面的URL是否包含导航项的链接</span><br>            <span class="hljs-keyword">if</span> (currentUrl.<span class="hljs-title function_">indexOf</span>(parent_href) !== -<span class="hljs-number">1</span>) &#123;<br>                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;haveSelected&#x27;</span>);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 遍历子类导航栏中的每个导航项</span><br>        $(<span class="hljs-string">&#x27;.menuChildren&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> child_href = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>);<br><br>            <span class="hljs-comment">// 判断当前页面的URL是否包含导航项的链接</span><br>            <span class="hljs-keyword">if</span> (currentUrl.<span class="hljs-title function_">indexOf</span>(child_href) !== -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 如果是匹配到子类URL，为其父类添加layui-this类名</span><br>                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.menu&#x27;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;haveSelected&#x27;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>前端</tag>
      
      <tag>语言</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Css</title>
    <link href="/2023/11/26/Css/"/>
    <url>/2023/11/26/Css/</url>
    
    <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h2 id="1-Css3介绍"><a href="#1-Css3介绍" class="headerlink" title="1. Css3介绍"></a>1. Css3介绍</h2><ol><li>为什么要用css<ol><li><p>使用css的目的就是让网页具有美观一致的页面，另外一个最重要的原因是让内容与格式分离，在没有CSS之前，我们想要修改HTML元素的样式需要为每个HTML元素单独定义样式属性，当HTML内容非常多时，就会定义很多重复的样式属性，并且修改的时候需要逐个修改，费心费力，所以CSS出现了。文件格式后缀为<code>.css</code>。</p></li><li><p>CSS的出现解决了下面两个问题：</p><ol><li>将HTML页面的内容与样式分离</li><li>提高web开发的工作效率</li></ol></li></ol></li></ol><h2 id="2-软件准备"><a href="#2-软件准备" class="headerlink" title="2. 软件准备"></a>2. 软件准备</h2><ol><li>安装IDE：<code>Visual Studio Code</code></li><li>安装插件：<code>HTML CSS Support</code>，智能提示css的id以及类名</li></ol><h1 id="二、-Css的基本构成"><a href="#二、-Css的基本构成" class="headerlink" title="二、 Css的基本构成"></a>二、 Css的基本构成</h1><div style="text-align:center">    <img src="/img/css_pic/2.jpg" alt="图片描述"></div><ol><li>CSS 书写格式由两个主要的部分构成：选择器，以及一条或多条声明。</li><li>css的样式类型：内联样式、内部样式、外部样式<ol><li><p>内联样式：直接写在元素上面，没有选择器，直接声明，仅对当前html生效</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red;&quot;</span>&gt;</span>非顶级程序员<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>内部样式：写在html文件的head标签中。使用style标签，内部可以有一个或多个css规则，内部样式仅仅针对当前的页面有效</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.h3</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span> 标题 <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>外部样式：通过把另一个标签放在<head>标签内，然后指定<link>标签的href属性，来指定外部css文件路径，这样就可以引入外部样式表，引入的样式仅对当前的html有效。此方法为使用频率最高的方法。</p><ol><li>当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，可以通过改变一个文件来改变整个站点的外观。每个页面使用<code>&lt;link&gt;</code>标签链接到样式表。<code>&lt;link&gt;</code>标签在文档的头部。 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;xxx.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h1 id="三、CSS具体应用"><a href="#三、CSS具体应用" class="headerlink" title="三、CSS具体应用"></a>三、CSS具体应用</h1><h2 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1. 选择器"></a>1. 选择器</h2><h3 id="1-逐级定位"><a href="#1-逐级定位" class="headerlink" title="1. 逐级定位"></a>1. 逐级定位</h3><ol><li>使用频率最高，可以在不同表格、div标签中取相同的名字，依靠逐级定位的方式修饰<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">.head .menu a&#123;<br>    color:black;<br>&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">menu</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>zczc<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-全局选择器"><a href="#2-全局选择器" class="headerlink" title="2. 全局选择器"></a>2. 全局选择器</h3><ol><li>使用于所有元素,可用于集体调整字体等.可以与任何元素匹配，优先级最低，一般做样式初始化<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">*&#123;<br>    margin: 0;<br>    padding: 0;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-元素选择器"><a href="#3-元素选择器" class="headerlink" title="3. 元素选择器"></a>3. 元素选择器</h3><ol><li>使用频率较小，选择的是页面上所有这种类型的标签，所以经常描述“共性”，无法描述某一元素的“个性”<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">p&#123;<br>    font-size:14px<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-类选择器"><a href="#4-类选择器" class="headerlink" title="4. 类选择器"></a>4. 类选择器</h3><ol><li>规定用原点<code>.</code>来定义，针对想要的所有标签使用。同一个标签可以使用多个类选择器，用空格隔开<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    .classone&#123;<br>        xxx<br>    &#125;<br><br>    .classtwo&#123;<br>        xxx<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;classone classtwo&quot;</span>&gt;</span>我emo了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="5-ID选择器"><a href="#5-ID选择器" class="headerlink" title="5. ID选择器"></a>5. ID选择器</h3><ol><li>针对某一特定的标签来使用，只能用一次，<code>css</code>中的ID选择器以<code>#</code>来定义<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#mytitle</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>:<span class="hljs-number">3px</span> dashed green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mytitle&quot;</span>&gt;</span>该睡觉了<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="6-合并选择器"><a href="#6-合并选择器" class="headerlink" title="6. 合并选择器"></a>6. 合并选择器</h3><ol><li>提供共同的样式，减少重复代码，语法为<code>选择器1, 选择器2,..&#123;&#125;</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.header</span>, <span class="hljs-selector-class">.footer</span>&#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-选择器的优先级"><a href="#7-选择器的优先级" class="headerlink" title="7. 选择器的优先级"></a>7. 选择器的优先级</h3><ul><li>css中权重用数字衡量</li></ul><p>元素选择器的权重为：1</p><p>class选择器的权重为：10</p><p>id选择器的权重为：100</p><p>内联选择器的权重为：1000</p><p>优先级从高到低：行内样式 &gt; ID选择器 &gt;  类选择器 &gt; 元素选择器</p><h2 id="2-样式"><a href="#2-样式" class="headerlink" title="2. 样式"></a>2. 样式</h2><h3 id="1-高度和宽度"><a href="#1-高度和宽度" class="headerlink" title="1. 高度和宽度"></a>1. 高度和宽度</h3><p>行内标签：默认无效<br>行内标签：默认有效（霸道，右侧区域空白，也不给你占用）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.c1</span>&#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="2-块级和行内标签"><a href="#2-块级和行内标签" class="headerlink" title="2. 块级和行内标签"></a>2. 块级和行内标签</h3><p><code>&lt;div&gt;</code>：块级标签  <code>&lt;span&gt;</code>：行内标签<br>行内标签无法设置高度与边距，可以设置为行内块级混合标签</p><ul><li>注：块级标签、以及块级+行内标签使用比较多</li></ul><ol><li><p>块级和行内标签混合体：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.c1</span>&#123;<br>    <span class="hljs-attribute">display</span>：inline-block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>块级标签转行内标签<br><code>&lt;div style=&quot;display:&quot;inline;&quot;&gt;中国&lt;/div&gt;</code></p></li><li><p>行内标签转块级标签<br><code>&lt;span style=&quot;display:&quot;block;&quot;&gt;联通&lt;/span&gt;</code></p></li></ol><h2 id="3-字体属性"><a href="#3-字体属性" class="headerlink" title="3. 字体属性"></a>3. 字体属性</h2><ol><li>颜色 color<ol><li>rgba：red green blue α（透明度）</li><li>rgb取值0-255，α取值0-1</li></ol></li></ol><div style="text-align:center">    <img src="/img/css_pic/3.jpg" alt="图片描述"></div><ol start="2"><li><p>字体大小 font-size</p><div style="text-align:center"> <img src="/img/css_pic/4.jpg" alt="图片描述"></div></li><li><p>文本粗细font-weight</p><div style="text-align:center"> <img src="/img/css_pic/5.jpg" alt="图片描述"></div></li><li><p>字体样式 font-style</p><div style="text-align:center"> <img src="/img/css_pic/6.jpg" alt="图片描述"></div></li><li><p>字体格式 font-family</p><ol><li>如font-family：“微软雅黑”<div style="text-align:center"> <img src="/img/css_pic/7.jpg" alt="图片描述"></div></li></ol></li></ol><h2 id="4-背景属性"><a href="#4-背景属性" class="headerlink" title="4. 背景属性"></a>4. 背景属性</h2><div style="text-align:center">    <img src="/img/css_pic/8.jpg" alt="图片描述"></div><ol><li><p>背景颜色</p><div style="text-align:center"> <img src="/img/css_pic/9.jpg" alt="图片描述"></div></li><li><p>背景图片</p><div style="text-align:center"> <img src="/img/css_pic/10.jpg" alt="图片描述"></div></li><li><p>背景图片平铺方式</p><div style="text-align:center"> <img src="/img/css_pic/11.jpg" alt="图片描述"></div></li><li><p>背景图片大小</p><ol><li>cover：使用频率最高，图片完全充满容器。但图片在不失真的情况下，会损失部分图片。（完全填充）</li><li>contain：图片会保证在不失真、不损失图片大小的情况下，尽可能填充容器。（尽可能填充）<div style="text-align:center"> <img src="/img/css_pic/12.jpg" alt="图片描述"></div></li></ol></li><li><p>背景图片渲染位置</p><div style="text-align:center"> <img src="/img/css_pic/13.jpg" alt="图片描述"></div></li></ol><h2 id="5-文本属性"><a href="#5-文本属性" class="headerlink" title="5. 文本属性"></a>5. 文本属性</h2><ol><li><p>文本上下、水平对齐方式 text-align&#x2F;height</p><ol><li><div style="text-align:center">     <img src="/img/bootstrap_pic/40.jpg" alt="图片描述"> </div> <ol><li><code>&#123;text-align:center&#125;</code></li><li>align——表示左右居中——left，center，right</li><li>有时候写在文本<p>中会失效，建议同步写在<td>标签中</li></ol></li><li>上下居中方式：<code>&#123;line-height:容器高度pt&#125;</code></li><li>文本在盒子中，上下、水平居中<br> <code>style=&quot;text-align:center;line-height: 容器高度px;</code></li></ol></li><li><p>文本修饰方式</p> <div style="text-align:center">     <img src="/img/css_pic/14.jpg" alt="图片描述"> </div>   <ol><li><p>文本大小写</p> <div style="text-align:center"> <img src="/img/css_pic/15.jpg" alt="图片描述"> </div></li><li><p>首行文本锁进</p> <div style="text-align:center"> <img src="/img/css_pic/16.jpg" alt="图片描述"> </div></li><li><p>文本透明度</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 透明度由零到一</span><br><span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span>.<span class="hljs-number">5</span>; <br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="6-表格属性"><a href="#6-表格属性" class="headerlink" title="6. 表格属性"></a>6. 表格属性</h2><ol><li><p>表格边框</p><div style="text-align:center"> <img src="/img/css_pic/17.jpg" alt="图片描述"></div></li><li><p>折叠边框</p><div style="text-align:center"> <img src="/img/css_pic/18.jpg" alt="图片描述"></div></li><li><p>表格的宽度和高度</p><div style="text-align:center"> <img src="/img/css_pic/19.jpg" alt="图片描述"></div></li><li><p>表格的对齐方式</p><div style="text-align:center"> <img src="/img/css_pic/20.jpg" alt="图片描述"></div></li><li><p>表格填充</p><div style="text-align:center"> <img src="/img/css_pic/21.jpg" alt="图片描述"></div></li><li><p>表格颜色</p><div style="text-align:center"> <img src="/img/css_pic/22.jpg" alt="图片描述"></div></li></ol><h2 id="7-关系选择器"><a href="#7-关系选择器" class="headerlink" title="7. 关系选择器"></a>7. 关系选择器</h2><p>后代选择器、子代选择器、相邻兄弟选择器、通用兄弟选择器</p><ol><li>后代选择器</li></ol><ul><li>注：中间隔着其他标签也会生效<div style="text-align:center">  <img src="/img/css_pic/23.jpg" alt="图片描述"></div></li></ul><div style="text-align:center">    <img src="/img/css_pic/24.jpg" alt="图片描述"></div><ol start="2"><li><p>子代选择器</p><div style="text-align:center"> <img src="/img/css_pic/25.jpg" alt="图片描述"></div></li><li><p>相邻兄弟选择器</p><div style="text-align:center"> <img src="/img/css_pic/26.jpg" alt="图片描述"></div></li><li><p>通用兄弟选择器</p><div style="text-align:center"> <img src="/img/css_pic/27.jpg" alt="图片描述"></div></li></ol><h2 id="8-盒子模型"><a href="#8-盒子模型" class="headerlink" title="8. 盒子模型 "></a>8. 盒子模型 <div></h2><ol><li>基本概念</li></ol><ul><li>注：若父元素没有高度，可以通过子元素撑起高度<div style="text-align:center">  <img src="/img/css_pic/28.jpg" alt="图片描述"></div></li></ul><div style="text-align:center">    <img src="/img/css_pic/29.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/css_pic/30.jpg" alt="图片描述"></div><ol start="2"><li><p>盒子、文本、图片居中方式</p><ol><li>盒子居中</li></ol><ul><li>注：必须需提前设置好盒子的宽度 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"># 盒子上下无边距，左右自动居中 <br><span class="hljs-selector-class">.container</span>&#123;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">980px</span><br>margin: <span class="hljs-number">0</span> auto, <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>文本居中</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center&quot;</span>;&gt;</span>zczc<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>图片居中</p></li></ol><ul><li>注：无法直接设置图片居中，可以通过计算盒子以及图片的高度，并为图片设计边距 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ht logo&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;line-height:100px&quot;</span>&gt;</span><br>    # 行内标签默认无法设置高度与边距-&gt;将行内标签转为行内+块级标签<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">herf</span>=<span class="hljs-string">&quot;xxx/xx&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top:22px;display:index-block&gt;</span></span><br><span class="hljs-string"><span class="hljs-tag">        &lt;img src=&quot;</span><span class="hljs-attr">x</span>/<span class="hljs-attr">xx</span>&quot; <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:56px;width:56px;&quot;</span><span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li>div居中 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-3.4.1/css/bootstrap.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.c1</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>:<span class="hljs-number">500px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>:<span class="hljs-number">350px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin-left</span>: auto;</span><br><span class="language-css">        <span class="hljs-attribute">margin-right</span>: auto;</span><br><span class="language-css">        <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">200px</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.c1</span> <span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>:center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--&lt;div style=&quot;margin-top:100px&quot;&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>张辰web测试<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>Email address<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Email&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><div style="text-align:center">    <img src="/img/css_pic/31.jpg" alt="图片描述"></div><ol start="3"><li><p>清除html自带的左右边距<br>注：<code>&lt;body&gt;</code>标签，默认会有一个边距，造成页面四边都有白色边距，去除方式如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实际案例</p><ol><li><p>html文件 </p> <div style="text-align:center"> <img src="/img/css_pic/32.jpg" alt="图片描述"> </div></li><li><p>css文件</p> <div style="text-align:center"> <img src="/img/css_pic/33.jpg" alt="图片描述"> </div></li></ol></li></ol><h2 id="9-弹性盒子模型"><a href="#9-弹性盒子模型" class="headerlink" title="9. 弹性盒子模型"></a>9. 弹性盒子模型</h2><ol><li><p>普通盒子模型</p><div style="text-align:center"> <img src="/img/css_pic/34.jpg" alt="图片描述" style="zoom:35%;"> <img src="/img/css_pic/35.jpg" alt="图片描述" style="zoom:55%;"></div></li><li><p>弹性盒子模型 display:flex</p><div style="text-align:center"> <img src="/img/css_pic/36.jpg" alt="图片描述"></div></li></ol><div style="text-align:center">    <img src="/img/css_pic/37.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/css_pic/38.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/css_pic/39.jpg" alt="图片描述"></div><ul><li>注：默认弹性盒子中的内容是水平的</li></ul><ol start="3"><li><p>修改弹性盒子模型</p><div style="text-align:center;gap:15px"> <img src="/img/css_pic/40.jpg" alt="图片描述" style="zoom:30%;"> <img src="/img/css_pic/41.jpg" alt="图片描述" style="zoom:45%;"></div></li><li><p>修改垂直方向盒子模型</p><div style="text-align:center"> <img src="/img/css_pic/42.jpg" alt="图片描述"></div></li><li><p>子元素盒子权重</p><div style="text-align:center"> <img src="/img/css_pic/43.jpg" alt="图片描述"></div></li></ol><h2 id="10-文档流"><a href="#10-文档流" class="headerlink" title="10. 文档流"></a>10. 文档流</h2><div style="text-align:center">    <img src="/img/css_pic/44.jpg" alt="图片描述"></div><h2 id="11-浮动-float"><a href="#11-浮动-float" class="headerlink" title="11. 浮动 float"></a>11. 浮动 float</h2><ul><li>注：浮动之后一定要清除浮动<div style="text-align:center">  <img src="/img/css_pic/45.jpg" alt="图片描述"></div></li></ul><ol><li><p>左右浮动 上下折叠</p><div style="text-align:center;gap:5px"> <img src="/img/css_pic/46.jpg" alt="图片描述" style="zoom:35%;"> <img src="/img/css_pic/47.jpg" alt="图片描述" style="zoom:40%;"></div></li><li><p>左右浮动 消除并排两图片之间空隙</p><div style="text-align:center;gap:5px"> <img src="/img/css_pic/48.jpg" alt="图片描述" style="zoom:35%;"> <img src="/img/css_pic/49.jpg" alt="图片描述" style="zoom:35%;"></div></li><li><p>当容器不足时</p><div style="text-align:center"> <img src="/img/css_pic/50.jpg" alt="图片描述"></div></li></ol><h2 id="12-清除浮动"><a href="#12-清除浮动" class="headerlink" title="12. 清除浮动"></a>12. 清除浮动</h2><ol><li><p>浮动副作用</p><div style="text-align:center"> <img src="/img/css_pic/51.jpg" alt="图片描述"></div></li><li><p>清除浮动</p><div style="text-align:center"> <img src="/img/css_pic/52.jpg" alt="图片描述"></div></li><li><p>受影响元素增加clear属性 clear:both</p></li></ol><ul><li>注：清除浮动需加到相同兄弟节点的最后<div style="text-align:center">  <img src="/img/css_pic/53.jpg" alt="图片描述"></div></li></ul><ol start="4"><li><p>overflow清除浮动  overflow:hidden</p><div style="text-align:center"> <img src="/img/css_pic/54.jpg" alt="图片描述"></div></li><li><p>伪对象方式</p><div style="text-align:center;gap:5px"> <img src="/img/css_pic/55.jpg" alt="图片描述" style="zoom:45%;"> <img src="/img/css_pic/56.jpg" alt="图片描述" style="zoom:35%;"></div></li><li><p>浮动与清除浮动</p><div style="text-align:center"> <img src="/img/css_pic/57.jpg" alt="图片描述"></div></li></ol><h2 id="13-定位"><a href="#13-定位" class="headerlink" title="13. 定位"></a>13. 定位</h2><div style="text-align:center">    <img src="/img/css_pic/58.jpg" alt="图片描述"></div><ol><li>绝对定位 - 脱离文档流<br>每设置一层绝对定位，就会生成一层文档流<div style="text-align:center"> <img src="/img/css_pic/59.jpg" alt="图片描述"></div></li></ol><div style="text-align:center;gap:5px">    <img src="/img/css_pic/60.jpg" alt="图片描述" style="zoom:65%">    <img src="/img/css_pic/61.jpg" alt="图片描述" style="zoom:60%"></div><ol start="2"><li><p>固定定位 - 脱离文档流<br>不会随鼠标滚动而变化，固定在页面中</p></li><li><p>父级定位</p><div style="text-align:center"> <img src="/img/css_pic/62.jpg" alt="图片描述"></div></li></ol><div style="text-align:center;gap:5px">    <img src="/img/css_pic/63.jpg" alt="图片描述" style="zoom:35%;">    <img src="/img/css_pic/64.jpg" alt="图片描述"></div><div style="text-align:center;gap:5px">    <img src="/img/css_pic/65.jpg" alt="图片描述" style="zoom:35%;">    <img src="/img/css_pic/66.jpg" alt="图片描述"></div><ol start="4"><li>Z-index<div style="text-align:center;gap:5px"> <img src="/img/css_pic/67.jpg" alt="图片描述" style="zoom:40%;"> <img src="/img/css_pic/68.jpg" alt="图片描述" style="zoom:75%;"></div></li></ol><h2 id="14-css3新特性-圆角、阴影"><a href="#14-css3新特性-圆角、阴影" class="headerlink" title="14. css3新特性 - 圆角、阴影"></a>14. css3新特性 - 圆角、阴影</h2><ol><li>圆角</li></ol><ul><li>border-radius：100% 或 50%，将直接变成圆形<div style="text-align:center">  <img src="/img/css_pic/69.jpg" alt="图片描述"></div></li></ul><div style="text-align:center">    <img src="/img/css_pic/70.jpg" alt="图片描述" style="zoom:35%;">    <img src="/img/css_pic/71.jpg" alt="图片描述" style="zoom:75%;"></div><ol start="2"><li>阴影<div style="text-align:center"> <img src="/img/css_pic/72.jpg" alt="图片描述" style="zoom:55%;"></div><div style="text-align:center;gap:5px"> <img src="/img/css_pic/73.jpg" alt="图片描述" style="zoom:35%;"> <img src="/img/css_pic/74.jpg" alt="图片描述" style="zoom:60%;"></div></li></ol><h2 id="15-动画"><a href="#15-动画" class="headerlink" title="15. 动画"></a>15. 动画</h2><ol><li><p>div:hover{ }  鼠标移到该位置上，该区域发生变化。常用于颜色变化，或动画暂停</p></li><li><p>opicaty：0到1  透明度</p><div style="text-align:center"> <img src="/img/css_pic/75.jpg" alt="图片描述"></div></li></ol><div style="text-align:center">    <img src="/img/css_pic/76.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/css_pic/77.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/css_pic/78.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/css_pic/79.jpg" alt="图片描述"></div><ol start="3"><li>呼吸动画<div style="text-align:center"> <img src="/img/css_pic/80.jpg" alt="图片描述"></div></li></ol><h2 id="16-媒体查询"><a href="#16-媒体查询" class="headerlink" title="16. 媒体查询"></a>16. 媒体查询</h2><div style="text-align:center">    <img src="/img/css_pic/81.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/css_pic/82.jpg" alt="图片描述"></div><ol><li>媒体查询语法<br>768px：手机<br>768px-992px：平板<br>992px：电脑<br>下图项目：当设置不同屏幕宽度时，屏幕颜色不同<div style="text-align:center"> <img src="/img/css_pic/83.jpg" alt="图片描述"></div></li></ol><div style="text-align:center">    <img src="/img/css_pic/84.jpg" alt="图片描述" style="zoom:60%;"></div><div style="text-align:center">    <img src="/img/css_pic/85.jpg" alt="图片描述"style="zoom:75%;"></div><div style="text-align:center">    <img src="/img/css_pic/86.jpg" alt="图片描述" style="zoom:85%;"></div><h2 id="17-雪碧图"><a href="#17-雪碧图" class="headerlink" title="17. 雪碧图"></a>17. 雪碧图</h2><div style="text-align:center">    <img src="/img/css_pic/87.jpg" alt="图片描述"></div><p><span>是内联元素（行内元素），大小无法直接设置，display：block，将内联元素改为块级元素（display：inline，内联元素）</p><div style="text-align:center;gap:5px">    <img src="/img/css_pic/88.jpg" alt="图片描述" style="zoom:40%;">    <img src="/img/css_pic/89.jpg" alt="图片描述"></div><div style="text-align:center"></div><h2 id="18-字体图标"><a href="#18-字体图标" class="headerlink" title="18. 字体图标"></a>18. 字体图标</h2><div style="text-align:center">    <img src="/img/css_pic/90.jpg" alt="图片描述"></div><div style="text-align:center;gap:5px">    <img src="/img/css_pic/91.jpg" alt="图片描述" style="zoom:35%;">    <img src="/img/css_pic/92.jpg" alt="图片描述"></div><h2 id="19-超链接"><a href="#19-超链接" class="headerlink" title="19. 超链接"></a>19. 超链接</h2><ol><li><p>取消超链接下划线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.a</span>&#123;<br><span class="hljs-attribute">text-decoration</span>:none<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>鼠标放到超链接后变色</p></li></ol><ul><li>注：新增css样式<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.a</span>:hower&#123;<br>    <span class="hljs-attribute">color</span>:white;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="四、CSS高频问题"><a href="#四、CSS高频问题" class="headerlink" title="四、CSS高频问题"></a>四、CSS高频问题</h1><h2 id="1-取消标签的下划线"><a href="#1-取消标签的下划线" class="headerlink" title="1. 取消标签的下划线"></a>1. 取消<a>标签的下划线</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-decoration: none;&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-鼠标移至可点击元素，出现小手图标"><a href="#2-鼠标移至可点击元素，出现小手图标" class="headerlink" title="2. 鼠标移至可点击元素，出现小手图标"></a>2. 鼠标移至可点击元素，出现小手图标</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor: pointer;&quot;</span>&gt;</span>点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-禁止用户复制-选择页面文字"><a href="#3-禁止用户复制-选择页面文字" class="headerlink" title="3. 禁止用户复制&#x2F;选择页面文字"></a>3. 禁止用户复制&#x2F;选择页面文字</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;-ms-user-select: none;-moz-user-select: none;user-select: none&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-允许用户复制-选择页面文字"><a href="#4-允许用户复制-选择页面文字" class="headerlink" title="4. 允许用户复制&#x2F;选择页面文字"></a>4. 允许用户复制&#x2F;选择页面文字</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> =<span class="hljs-string">&quot;copyable&quot;</span>&gt;<br>  This part can be copied<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><br>.copyable &#123;<br>  user-select: <span class="hljs-built_in">text</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-创建按钮，点击复制文本"><a href="#5-创建按钮，点击复制文本" class="headerlink" title="5. 创建按钮，点击复制文本"></a>5. 创建按钮，点击复制文本</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;copyText()&quot;</span>&gt;</span>Copy Text<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;copyableText&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;copyable&quot;</span>&gt;</span><br>  This part can be copied<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>function copyText() &#123;<br>  var text = document.getElementById(&quot;copyableText&quot;).innerText;<br>  navigator.clipboard.writeText(text);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-锚点跳转，平滑动画"><a href="#6-锚点跳转，平滑动画" class="headerlink" title="6. 锚点跳转，平滑动画 *"></a>6. <a>锚点跳转，平滑动画 *</h2><ul><li>学习链接：<a href="https://www.bilibili.com/video/BV1rj411m">https://www.bilibili.com/video/BV1rj411m</a></li></ul><ol><li><p>点击跳转到指定位置：跳转按钮的<code>&lt;a href=&quot;#xxx&quot;&gt;</code>指向，跳转地<code>&lt;div id=&quot;xxx&quot;&gt;</code></p></li><li><p>增加平滑跳转动画：添加整体样式</p></li><li><p>增加按钮返回最上面：<a href="https://www.bilibili.com/video/BV1yF411">https://www.bilibili.com/video/BV1yF411</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">html</span>&#123;</span><br><span class="language-css">        scroll-behavior: smooth;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;breadcrumb&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 0;padding-top: 0;padding-left: 0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#verbose&quot;</span>&gt;</span>典型模型<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#severe&quot;</span>&gt;</span>重度模型<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#long&quot;</span>&gt;</span>长续航模型<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;verbose&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;severe&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> =<span class="hljs-string">&quot;long&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>导航栏悬浮页面固定位置</p><div style="text-align:center"> <img src="/img/css_pic/93.jpg" alt="图片描述"></div></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>    <span class="hljs-selector-class">.xxx</span>&#123;<br>        <span class="hljs-attribute">display</span>: flex;<br>        <span class="hljs-attribute">position</span>: fixed;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span><br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><ol start="6"><li>好看的字体样式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-family: cursive&quot;</span>&gt;</span>PPC测试中台<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>前端</tag>
      
      <tag>语言</tag>
      
      <tag>Css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Html</title>
    <link href="/2023/11/24/Html/"/>
    <url>/2023/11/24/Html/</url>
    
    <content type="html"><![CDATA[<h1 id="一、-准备工作"><a href="#一、-准备工作" class="headerlink" title="一、 准备工作"></a>一、 准备工作</h1><h2 id="1-html5介绍"><a href="#1-html5介绍" class="headerlink" title="1. html5介绍"></a>1. html5介绍</h2><ol><li>html5是用来描述网页的一种语言，被称为超文本传输语言。用html5编写的文件，文件格式后缀为<code>.html</code>。</li><li>html5是一种标记语言，拥有一套标记标签</li></ol><ul><li>双标签：<code>&lt;html&gt;&lt;/html&gt;</code></li><li>单标签: <code>&lt;img&gt;</code></li></ul><h2 id="2-软件准备"><a href="#2-软件准备" class="headerlink" title="2. 软件准备"></a>2. 软件准备</h2><ol><li>安装IDE：<code>Visual Studio Code</code></li><li>安装插件：<code>Live Server</code>，用于在写html的过程中，查看效果</li></ol><h2 id="3-声明"><a href="#3-声明" class="headerlink" title="3. &lt;!DOCTYPE html&gt;声明"></a>3. <code>&lt;!DOCTYPE html&gt;</code>声明</h2><ol><li>DOCTYPE是<code>document type</code>的缩写。<code>&lt;!DOCTYPE html&gt;</code>是H5的声明位于文档的最前面，处于标签之前。他是网页必备的组成部分，避免浏览器的<strong>怪异模式</strong></li></ol><h2 id="4-标签"><a href="#4-标签" class="headerlink" title="4. &lt;title&gt;标签"></a>4. <code>&lt;title&gt;</code>标签</h2><ol><li>定位文档标题，显示在浏览器窗口的标题或者状态栏上</li><li><code>&lt;title&gt;</code>的增加有利于增加SEO优化<p class="note note-info">SEO是搜索引擎优化的英文缩写，通过对网站内容调整，满足搜索引擎的排名需求</p></li></ol><h2 id="5-标签"><a href="#5-标签" class="headerlink" title="5. &lt;meta&gt;标签"></a>5. <code>&lt;meta&gt;</code>标签</h2><ol><li><code>&lt;meta&gt;</code>标签是单标签，用来描述一个<code>Html</code>网页文档的属性，关键词等。例如：<code>charset=&quot;utf-8&quot;</code>，在开发中我们我们会看到<code>utf-8</code>或是<code>gbk</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第一个页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="二、-高频基础语法"><a href="#二、-高频基础语法" class="headerlink" title="二、 高频基础语法"></a>二、 高频基础语法</h1><h2 id="1-段落"><a href="#1-段落" class="headerlink" title="1. 段落&lt;p&gt;"></a>1. 段落<code>&lt;p&gt;</code></h2><h2 id="2-换行"><a href="#2-换行" class="headerlink" title="2. 换行&lt;br&gt;"></a>2. 换行<code>&lt;br&gt;</code></h2><ol><li><code>&lt;br&gt;</code>元素是一个空的Html单标签，可以在不产生一个新段落的情况下进行换行</li></ol><h2 id="3-水平线"><a href="#3-水平线" class="headerlink" title="3. 水平线&lt;hr&gt;"></a>3. 水平线<code>&lt;hr&gt;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>属性<ol><li>size：高度</li><li>align：水平线对其方式（默认居中），可取值left ｜ right</li></ol></li></ol><h2 id="4-图片标签"><a href="#4-图片标签" class="headerlink" title="4. 图片标签&lt;img&gt;"></a>4. 图片标签<code>&lt;img&gt;</code></h2><p class="note note-info">注：&lt;img&gt;是单标签，不需要进行闭合操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>属性：<ol><li>src：路径（图片地址与名称）</li><li>alt：规定图像替代的文本</li><li>title： 鼠标悬停在图片上给予提示</li></ol></li></ol><h2 id="5-图片路径"><a href="#5-图片路径" class="headerlink" title="5. 图片路径&lt;img src=&quot;&quot;&gt;"></a>5. 图片路径<code>&lt;img src=&quot;&quot;&gt;</code></h2><h3 id="1-绝对路径"><a href="#1-绝对路径" class="headerlink" title="1. 绝对路径"></a>1. 绝对路径</h3><ol><li>指的是电脑的盘符存储与访问的具体地址<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;E:\code\1.jpg&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-相对路径"><a href="#2-相对路径" class="headerlink" title="2. 相对路径"></a>2. 相对路径</h3><ol><li>两者相对关系，在同一路径下可以直接访问</li></ol><ul><li>子级关系：<code>/</code></li><li>夫级关系：<code>../</code></li><li>同级关系：<code>./</code></li></ul><h3 id="3-网络路径"><a href="#3-网络路径" class="headerlink" title="3. 网络路径"></a>3. 网络路径</h3><ol><li>不推荐使用，存在不稳因素</li></ol><h2 id="5-超文本链接"><a href="#5-超文本链接" class="headerlink" title="5. 超文本链接&lt;a&gt;"></a>5. 超文本链接<code>&lt;a&gt;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>链接文本<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>默认情况，链接会按以下形式出现在浏览器中</li></ol><ul><li>一个未访问的链接，显示为蓝色字体并带有下划线</li><li>访问过的链接，显示为紫色并带有下划线</li><li>点击链接时，链接显示为红色并带有下划线</li></ul><p class="note note-info"><span style="font-weight:bold;">注:<span>后期我们会通过CSS样式修改掉这些效果</p><ol start="2"><li>点击链接后，跳转到一个新生成的页面，原页面保留</li></ol><ul><li>在<code>&lt;a&gt;</code>标签中增加<code>&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;</code></li></ul><h2 id="6-列表"><a href="#6-列表" class="headerlink" title="6. 列表"></a>6. 列表</h2><h3 id="1-有序列表"><a href="#1-有序列表" class="headerlink" title="1. 有序列表&lt;ol&gt;+&lt;li&gt;"></a>1. 有序列表<code>&lt;ol&gt;+&lt;li&gt;</code></h3><ul><li>默认<code>1</code>，通过修改<code>&lt;ol&gt;</code>的<code>type</code>属性，可变更为<code>a</code>, <code>A</code>, <code>i</code>, <code>l</code>等<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>zhangchen<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>chenxu<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br>print:<br>1.zhangchen<br>2.chenxu<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="2. 无序列表&lt;ul&gt;+&lt;li&gt;"></a>2. 无序列表<code>&lt;ul&gt;+&lt;li&gt;</code></h3><ul><li>默认实心圆，通过修改<code>&lt;ul&gt;</code>的<code>type</code>属性，可变更为空心圆、小方块等</li></ul><h2 id="7-表格"><a href="#7-表格" class="headerlink" title="7. 表格"></a>7. 表格</h2><h3 id="1-常规表格"><a href="#1-常规表格" class="headerlink" title="1. 常规表格"></a>1. 常规表格</h3><ol><li>单元格特点：同行等高，同列等宽</li><li>表头与表身：<code>&lt;thead&gt;</code>、<code>&lt;tbody&gt;</code><ol><li>表头<code>&lt;thead&gt;</code>中，<code>&lt;tr&gt;</code>形容行，<code>&lt;th&gt;</code>形容列（单元格）</li><li>表身<code>&lt;tbody&gt;</code>中，<code>&lt;tr&gt;</code>形容行，<code>&lt;td&gt;</code>形容列（单元格）</li></ol></li></ol><h3 id="2-进阶表格"><a href="#2-进阶表格" class="headerlink" title="2. 进阶表格"></a>2. 进阶表格</h3><h4 id="1-单元格合并"><a href="#1-单元格合并" class="headerlink" title="1. 单元格合并"></a>1. 单元格合并</h4><ul><li>水平合并，保留上边，删除下边：<code>colspan=&quot;&quot;</code></li><li>垂直合并，保留左边，删除右边：<code>rowspan=&quot;&quot;</code></li></ul><h4 id="2-文字在格内上下居中"><a href="#2-文字在格内上下居中" class="headerlink" title="2. 文字在格内上下居中"></a>2. 文字在格内上下居中</h4><ul><li><code>align=&quot;center&quot;</code></li></ul><h4 id="3-表格边框唯一"><a href="#3-表格边框唯一" class="headerlink" title="3. 表格边框唯一"></a>3. 表格边框唯一</h4><ul><li><code>cellspacing=&quot;0&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200px&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>单元格1单元格2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-表单数据提交"><a href="#8-表单数据提交" class="headerlink" title="8. 表单数据提交"></a>8. 表单数据提交</h2><h3 id="1-表单容器"><a href="#1-表单容器" class="headerlink" title="1. 表单容器&lt;form&gt;"></a>1. 表单容器<code>&lt;form&gt;</code></h3><h4 id="1-基本构成"><a href="#1-基本构成" class="headerlink" title="1. 基本构成"></a>1. 基本构成</h4><ol><li><p>必须包含<code>submit</code>按钮，用于传输表单信息</p></li><li><p><mark>表单标签中需要包含<code>name</code>属性</mark>，否则对应不上后端传入的信息</p><ol><li>注：<code>id</code>属性是用于前端事件 &#x2F; 控件</li></ol></li><li><p>数据传递方式</p><ol><li>get请求、post请求</li><li>只有get请求的数据在url中可以看到</li><li>get请求用于提交少量数据，post请求用于提交大量数据</li></ol></li><li><p>输入标签相关，如果是用户需要实际写入的数据不用特殊标注。如果是用户需要选择的标签，需要在后台定义好他的value</p></li></ol><h4 id="2-具体写法"><a href="#2-具体写法" class="headerlink" title="2. 具体写法"></a>2. 具体写法</h4><ol><li><p>前端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"># action:服务器地址  name:所生成的表单，提交到对应链接的位置<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get|post&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myform&quot;</span>&gt;</span><br>    <br>    # 必须含有submit才能提交表单<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>后端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取user对应的单一信息</span><br>user = request.form.get(<span class="hljs-string">&quot;user&quot;</span>)<br><br><span class="hljs-comment"># 读取hobby对应的列表信息</span><br>hobby_list = request.form.getlist(<span class="hljs-string">&quot;hobby&quot;</span>)<br><br><span class="hljs-comment"># 读取表单的所有信息</span><br>form_message = request_form<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-输入框"><a href="#2-输入框" class="headerlink" title="2. 输入框"></a>2. 输入框</h3><h4 id="1-按钮"><a href="#1-按钮" class="headerlink" title="1. 按钮&lt;input&gt;"></a>1. 按钮<code>&lt;input&gt;</code></h4><ol><li><p>文字输入框：<code>&lt;input type = &quot;text&quot;&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;firstname&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastname&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center"> <img src="/img/html_pic/5.jpg" alt="图片描述"></div></li><li><p>密码框：<code>&lt;input type = &quot;password&quot;&gt;</code></p></li></ol><ul><li>注：密码字段字符不会明文显示，而是以星号或原点代替<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    Passward: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center">  <img src="/img/html_pic/6.jpg" alt="图片描述"></div></li></ul><ol start="3"><li>单选框<code>&lt;input type=&quot;radio&quot;&gt;</code></li></ol><ul><li>注：当两个名字相同时，两个单选框是互斥的<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>男<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>女<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center">  <img src="/img/html_pic/7.jpg" alt="图片描述"></div></li></ul><ol start="4"><li><p>复选框<code>&lt;input type=&quot;checkbox&quot;&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>篮球<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span>游泳<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span>围棋<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40&quot;</span>&gt;</span>跳高<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center"> <img src="/img/html_pic/8.jpg" alt="图片描述"></div></li><li><p>文件框<code>&lt;input type=&quot;file&quot;&gt;</code></p></li></ol><ul><li>注：可用于直接上传本地文件<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center">  <img src="/img/html_pic/9.jpg" alt="图片描述"></div></li></ul><ol start="6"><li>表单按钮<code>&lt;input type=&quot;submit/button&quot;&gt;</code><ol><li>整体流程<br> 当用户点击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收的输入数据进行相关的处理</li><li>前端按钮写法<ol><li><code>&lt;input type=&quot;submit&quot;&gt;</code> — 提交表单，点击后跳转提交表单</li><li><code>&lt;input type=&quot;button&quot;&gt;</code> — 普通按钮，点击后无现象 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    Username: <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol></li></ol><div style="text-align:center">    <img src="/img/html_pic/10.jpg" alt="图片描述"></div><h4 id="2-下拉框"><a href="#2-下拉框" class="headerlink" title="2. 下拉框"></a>2. 下拉框</h4><ol><li><p>单选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bj&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sh&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sz&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center"> <img src="/img/html_pic/11.jpg" alt="图片描述"></div></li><li><p>多选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center"> <img src="/img/html_pic/12.jpg" alt="图片描述"></div></li></ol><h4 id="3-多行文本"><a href="#3-多行文本" class="headerlink" title="3. 多行文本"></a>3. 多行文本</h4><ul><li>注：rows限制行高<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center">  <img src="/img/html_pic/13.jpg" alt="图片描述"></div></li></ul><h3 id="3-hower-鼠标所到之处改变格式-伪类"><a href="#3-hower-鼠标所到之处改变格式-伪类" class="headerlink" title="3. hower - 鼠标所到之处改变格式 - 伪类"></a>3. hower - 鼠标所到之处改变格式 - 伪类</h3><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p>鼠标移到c1处时，“联通”两个字回由原来的红色，18px大小，变为绿色，50px大小</p><div style="text-align:center">    <img src="/img/html_pic/14.jpg" alt="图片描述"></div><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2:"></a>示例2:</h4><p>鼠标移动到app处时，会显示隐藏的图片</p><div style="text-align:center">    <img src="/img/html_pic/15.jpg" alt="图片描述"></div><h3 id="4-after-在所选样式尾部追加-伪类"><a href="#4-after-在所选样式尾部追加-伪类" class="headerlink" title="4. after - 在所选样式尾部追加 - 伪类"></a>4. after - 在所选样式尾部追加 - 伪类</h3><ul><li>注：一般仅用于清除浮动<div style="text-align:center;gap:5px">  <img src="/img/html_pic/16.jpg" alt="图片描述" style="zoom:35%;">  <img src="/img/html_pic/17.jpg" alt="图片描述"></div></li></ul><h3 id="5-position-样式固定在页面中某位置"><a href="#5-position-样式固定在页面中某位置" class="headerlink" title="5. position - 样式固定在页面中某位置"></a>5. position - 样式固定在页面中某位置</h3><ol><li><p>fixed固定在页面中某位置静止不动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.back</span>&#123;<br>    <span class="hljs-attribute">position</span>:fixed;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">60px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">60px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid red;<br>    <br>    # 距离页面右边框<span class="hljs-number">10px</span>，距离下边框<span class="hljs-number">10px</span><br>    <span class="hljs-attribute">right</span>:<span class="hljs-number">10px</span><br>    bottom:<span class="hljs-number">10px</span><br>    &#125;<br>    <br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;back&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>relative和absolute - 两个相对的位置静止不动</p></li></ol><ul><li>注：c2相对于c1静止不动<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.c1</span>&#123;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid red;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">100px</span><br>    <br>    position:relative<br>&#125;<br><br><span class="hljs-selector-class">.c1</span> <span class="hljs-selector-class">.c2</span>&#123;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">59px</span>;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">59px</span>;<br>    <span class="hljs-attribute">background-color</span>:black;<br>    <br>    <span class="hljs-attribute">position</span>:absolute;<br>    <span class="hljs-attribute">right</span>:<span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">bottom</span>:<span class="hljs-number">10px</span>;<br>&#125;<br><br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;c1&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;c2&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    <br></code></pre></td></tr></table></figure></li></ul><h3 id="6-transparent-透明色"><a href="#6-transparent-透明色" class="headerlink" title="6. transparent - 透明色"></a>6. transparent - 透明色</h3><ul><li>注：提前设置好，鼠标移动到此处后变化的预留区域，为透明色。防止移动鼠标过程中，位置出现变化<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.c1</span>&#123;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>:black;<br>    <span class="hljs-attribute">border-left</span>:<span class="hljs-number">2px</span> solid transparent;<br>    &#125;<br>    <br><span class="hljs-selector-class">.c1</span>:hower&#123;<br>    <span class="hljs-attribute">border-left</span>:<span class="hljs-number">2px</span> solid red<br>&#125;<br><br>&lt;<span class="hljs-selector-tag">div</span>&gt;菜单&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="9-占位符"><a href="#9-占位符" class="headerlink" title="9. 占位符"></a>9. 占位符</h2><h3 id="1-用法"><a href="#1-用法" class="headerlink" title="1. 用法"></a>1. 用法</h3><ol><li>py文件找到所给定位置的html文件，读取其中全部内容</li><li>在html文件中找到”特殊的占位符”,将数据替换</li><li>将替换完成的字符串返回给用户的浏览器</li></ol><h3 id="2-直接传输类占位符"><a href="#2-直接传输类占位符" class="headerlink" title="2. 直接传输类占位符"></a>2. 直接传输类占位符</h3><ol><li>使用<code>&#123;&#123; &#125;&#125;</code>占位</li><li>子列表或子元素用.连接<div style="text-align:center"> <img src="/img/html_pic/18.jpg" alt="图片描述"></div></li></ol><h3 id="3-循环传输类占位符"><a href="#3-循环传输类占位符" class="headerlink" title="3. 循环传输类占位符"></a>3. 循环传输类占位符</h3><ol><li><p>for循环</p><ol><li> 循环结束 <div style="text-align:center"> <img src="/img/html_pic/19.jpg" alt="图片描述"></div></li></ol></li><li><p>if判断</p><ol><li>    2. <div style="text-align:center"> <img src="/img/html_pic/20.jpg" alt="图片描述"></div></li></ol></li></ol><h1 id="三、-Tips"><a href="#三、-Tips" class="headerlink" title="三、 Tips"></a>三、 Tips</h1><h2 id="1-在-py文件中运行html文件"><a href="#1-在-py文件中运行html文件" class="headerlink" title="1. 在.py文件中运行html文件"></a>1. 在.py文件中运行html文件</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = f<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    &lt;tr&gt;  &lt;/tr&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><div style="text-align:center">    <img src="/img/html_pic/21.jpg" alt="图片描述"></div><h2 id="2"><a href="#2" class="headerlink" title="2. &lt;o:p&gt;&lt;/o:p&gt;"></a>2. <code>&lt;o:p&gt;&lt;/o:p&gt;</code></h2><div style="text-align:center">    <img src="/img/html_pic/22.jpg" alt="图片描述"></div><h2 id="3-调整字体上下边距"><a href="#3-调整字体上下边距" class="headerlink" title="3. 调整字体上下边距"></a>3. 调整字体上下边距</h2><ol><li><code>&lt;style line_height:200px&gt;</code> 此方法会同时调节字体上下边距，无法单独调节某一边距，不推荐使用</li></ol><div style="text-align:center">    <img src="/img/html_pic/23.jpg" alt="图片描述"></div><ol start="2"><li><code>&lt;style padding:10px 0&gt;</code> 生成上下空白行，推荐使用<div style="text-align:center"> <img src="/img/html_pic/24.jpg" alt="图片描述"></div></li></ol><h2 id="4-文本的换行-与-缩进"><a href="#4-文本的换行-与-缩进" class="headerlink" title="4. 文本的换行&lt;br&gt; 与 缩进"></a>4. 文本的换行<code>&lt;br&gt;</code> 与 缩进</h2><ol><li>换行<br>文本直接换行<code>&lt;br&gt;</code>，不开启新段落<code>&lt;p&gt;</code></li></ol><div style="text-align:center">    <img src="/img/html_pic/25.jpg" alt="图片描述"></div><ol start="2"><li>缩进</li></ol><div style="text-align:center">    <img src="/img/html_pic/26.jpg" alt="图片描述"></div><h2 id="5-文字在表格中居中-修改标签"><a href="#5-文字在表格中居中-修改标签" class="headerlink" title="5. 文字在表格中居中 修改&lt;td&gt;标签"></a>5. 文字在表格中居中 修改<code>&lt;td&gt;</code>标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">0</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">0</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">0</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:40.0pt&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">2</span> &gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">p</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span> &gt;</span>分类 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要在<code>&lt;td&gt;</code>标签中修改，不可以直接修改文本</p><div style="text-align:center">    <img src="/img/html_pic/27.jpg" alt="图片描述"></div><p>修改前后对比图</p><div style="text-align:center;gap:5px">    <img src="/img/html_pic/28.jpg" alt="图片描述" style="zoom:35%;">    <img src="/img/html_pic/29.jpg" alt="图片描述" style="zoom:35%;"></div><h2 id="6-文字于表格中居中-修改文字标签"><a href="#6-文字于表格中居中-修改文字标签" class="headerlink" title="6. 文字于表格中居中 修改文字&lt;p&gt;标签"></a>6. 文字于表格中居中 修改文字<code>&lt;p&gt;</code>标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">0</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">0</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">0</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:40.0pt&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">2</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span> &gt;</span>分类 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center">    <img src="/img/html_pic/30.jpg" alt="图片描述"></div><h2 id="9-html路径"><a href="#9-html路径" class="headerlink" title="9. html路径"></a>9. html路径</h2><ol><li>父级目录相同，<code>../ + 对方父级文件夹名</code><div style="text-align:center"> <img src="/img/html_pic/31.jpg" alt="图片描述"></div></li></ol><h2 id="10-创建table表格，自定义td宽度，填充文字内容，文字长度宽于表格时，文字自动换行"><a href="#10-创建table表格，自定义td宽度，填充文字内容，文字长度宽于表格时，文字自动换行" class="headerlink" title="10. 创建table表格，自定义td宽度，填充文字内容，文字长度宽于表格时，文字自动换行"></a>10. 创建table表格，自定义td宽度，填充文字内容，文字长度宽于表格时，文字自动换行</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">0</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">0</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">0</span> </span><br><span class="hljs-tag"><span class="hljs-attr">style</span>=<span class="hljs-string">&quot;table-layout:fixed;word-break:break-all;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">width</span>=<span class="hljs-string">111</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">2</span> </span><br><span class="hljs-tag"><span class="hljs-attr">style</span>=<span class="hljs-string">&quot;word-wrap: break-word;width:6px;text-align:center;</span></span><br><span class="hljs-string"><span class="hljs-tag">border:solid #1F2329 1.0pt;background:#DDEBF7;padding:.75pt .75pt .75pt .75pt;&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%;white-space:normal;word-wrap:break-word;word-break:break-all;font-size:10.0pt；&quot;</span> </span><br><span class="hljs-tag">   <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span> &gt;</span>耳机音乐播放功能 <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>在table中加<code>table-layout:fixed;</code></li><li>在td中加<code>word-wrap:break-word;word-break:break-all;</code></li><li>在div中加<code>style=&quot;width:100%;white-space:normal;word-wrap:break-word;word-break:break-all;&quot;</code></li><li>只有设定好<code>&lt;td&gt;</code>的width后，才能使文本超出表格宽度后自动换行，不影响文本宽度；</li></ol><h2 id="11-文字距离td表格有一定距离，并居中"><a href="#11-文字距离td表格有一定距离，并居中" class="headerlink" title="11. 文字距离td表格有一定距离，并居中"></a>11. 文字距离td表格有一定距离，并居中</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center; font-size:10.0pt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center">    <img src="/img/html_pic/32.jpg" alt="图片描述">    <img src="/img/html_pic/33.jpg" alt="图片描述"></div><h2 id="12-！-Tab快速创建html骨架"><a href="#12-！-Tab快速创建html骨架" class="headerlink" title="12. ！+Tab快速创建html骨架"></a>12. ！+Tab快速创建html骨架</h2><h2 id="13-outlook需要将想要固定的全都设定好宽度，不能依靠父的宽度约束子"><a href="#13-outlook需要将想要固定的全都设定好宽度，不能依靠父的宽度约束子" class="headerlink" title="13. outlook需要将想要固定的全都设定好宽度，不能依靠父的宽度约束子"></a>13. outlook需要将想要固定的<td>全都设定好宽度，不能依靠父<td>的宽度约束子<td></h2><div style="text-align:center;gap:5px">    <img src="/img/html_pic/34.jpg" alt="图片描述" style="zoom:45%;">    <img src="/img/html_pic/35.jpg" alt="图片描述" style="zoom:60%;"></div><h2 id="14-for循环与if判断"><a href="#14-for循环与if判断" class="headerlink" title="14. for循环与if判断 *"></a>14. for循环与if判断 *</h2><div style="text-align:center">    <img src="/img/html_pic/36.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/html_pic/37.jpg" alt="图片描述"></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% for key,value in test_result.items %&#125;<br>&#123;% if key == 27%&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_blue&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span>&gt;</span>AAC <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_blue&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span>&gt;</span>降噪-深度 <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_blue&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span>&gt;</span>- <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_blue&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span>&gt;</span>- <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_blue&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span>&gt;</span>100% <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_gry&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span>&gt;</span>&#123;&#123; test_standard.26.0 &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_white&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span>&gt;</span>&#123;&#123; value.0 &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_gry&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span>&gt;</span>&#123;&#123; test_standard.26.1 &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_white&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span>&gt;</span>- <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    &#123;% if value.0 == &#x27;&#x27; and value.1 == &#x27;&#x27;%&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_white&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    &#123;% elif test_standard.26.0 &gt;= value.0 %&#125;<br>       <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_white&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#548235&quot;</span>&gt;</span>Pass <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    &#123;% elif test_standard.26.0 == &#x27;-&#x27; and test_standard.26.1 == &#x27;-&#x27;%&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_white&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#7030A0&quot;</span>&gt;</span>Block <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    &#123;% else %&#125;<br>       <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_white&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span>Fail <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    &#123;% endif %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;power_test_background_white&quot;</span> <span class="hljs-attr">nowrap</span>=<span class="hljs-string">&#x27;nowrap&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;module_body_message&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h2 id="15-对于字典的for循环"><a href="#15-对于字典的for循环" class="headerlink" title="15. 对于字典的for循环 *"></a>15. 对于字典的for循环 *</h2><p>&#96;</p>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>前端</tag>
      
      <tag>语言</tag>
      
      <tag>Html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECharts</title>
    <link href="/2023/11/23/ECharts/"/>
    <url>/2023/11/23/ECharts/</url>
    
    <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h2 id="1-使用目的"><a href="#1-使用目的" class="headerlink" title="1. 使用目的"></a>1. 使用目的</h2><p>快速绘制美观的前端看板</p><h2 id="2-学习链接"><a href="#2-学习链接" class="headerlink" title="2. 学习链接"></a>2. 学习链接</h2><ol><li>下载链接：<a href="https://echarts.apache.org/handbook/zh/get-started/">https://echarts.apache.org/handbook/zh/get-started/</a></li><li>示例链接：<a href="https://echarts.apache.org/examples/zh/index.html">https://echarts.apache.org/examples/zh/index.html</a></li><li>具体API配置：<a href="https://echarts.apache.org/zh/option.html#title">https://echarts.apache.org/zh/option.html#title</a></li></ol><h2 id="3-浏览器画图的两种方式"><a href="#3-浏览器画图的两种方式" class="headerlink" title="3. 浏览器画图的两种方式"></a>3. 浏览器画图的两种方式</h2><ol><li>canvas：点阵图，缩放失真，适合图形数量非常大的图表</li><li>svg：矢量图，缩放不失真，适合图形数量较少的图表</li></ol><h1 id="二、ECharts具体应用"><a href="#二、ECharts具体应用" class="headerlink" title="二、ECharts具体应用"></a>二、ECharts具体应用</h1><h2 id="1-绘图步骤"><a href="#1-绘图步骤" class="headerlink" title="1. 绘图步骤"></a>1. 绘图步骤</h2><ol><li>建立dom容器</li><li>引入ECharts</li><li>实例化ECharts</li><li>建立图表配置项</li><li>显示图表</li></ol><h2 id="2-快速入门-初始化图片"><a href="#2-快速入门-初始化图片" class="headerlink" title="2. 快速入门-初始化图片*"></a>2. 快速入门-初始化图片*</h2><div style="text-align:center">    <img src="/img/echarts_pic/2.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/echarts_pic/3.jpg" alt="图片描述"></div><h2 id="3-基本使用方法"><a href="#3-基本使用方法" class="headerlink" title="3. 基本使用方法"></a>3. 基本使用方法</h2><ol><li><p>需先js上方确定动画位置，制作动画的存放空间，如果不设置高度和宽度，图表则无法显示</p><div style="text-align:center"> <img src="/img/echarts_pic/4.jpg" alt="图片描述"></div></li><li><p>前端html代码 - 死数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;main1&quot;</span> style=<span class="hljs-string">&quot;width: 100%;height:400px;&quot;</span>&gt;&lt;/div&gt;<br><br>&lt;!-- 点击事件js  --&gt;<br>&#123;#&lt;script src=<span class="hljs-string">&quot;&#123;% static &quot;</span>jQuery/jquery.<span class="hljs-property">js</span><span class="hljs-string">&quot; %&#125;&quot;</span>&gt;&lt;/script&gt;#&#125;<br>&#123;% block js %&#125;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        &#123;#&lt;script src=<span class="hljs-string">&quot;&#123;% static  %&#125;&quot;</span>#&#125;<br>        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">bindBtnAddEvent</span>();<br>        &#125;)<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">bindBtnAddEvent</span>(<span class="hljs-params"></span>) &#123;<br>            $(<span class="hljs-string">&quot;#btnadd&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-comment">//点击按钮，显示对话框</span><br>                $(<span class="hljs-string">&quot;#myModal&quot;</span>).<span class="hljs-title function_">modal</span>(<span class="hljs-string">&quot;show&quot;</span>);<br>            &#125;)<br>        &#125;<br><br>        <span class="hljs-comment">// 基于准备好的dom，初始化echarts实例</span><br>        <span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;main1&#x27;</span>));<br><br>        <span class="hljs-comment">// 指定图表的配置项和数据</span><br>        <span class="hljs-keyword">var</span> option = &#123;<br>            <span class="hljs-attr">title</span>: &#123;<br>                <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;功耗对比图&#x27;</span>,<br>                <span class="hljs-comment">// 标题在图片上方居中</span><br>                <span class="hljs-attr">textAlign</span>: <span class="hljs-string">&quot;auto&quot;</span>,<br>                <span class="hljs-attr">left</span>: <span class="hljs-string">&quot;center&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">tooltip</span>: &#123;&#125;,<br>            <span class="hljs-attr">legend</span>: &#123;<br>                <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;M66&#x27;</span>, <span class="hljs-string">&#x27;N65&#x27;</span>],<br>                <span class="hljs-comment">// 设置按钮在图片下方</span><br>                <span class="hljs-attr">bottom</span>: <span class="hljs-number">0</span>,<br>            &#125;,<br>            <span class="hljs-attr">xAxis</span>: &#123;<br>                <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;抬腕亮屏&#x27;</span>, <span class="hljs-string">&#x27;ECG&#x27;</span>, <span class="hljs-string">&#x27;语音通话&#x27;</span>, <span class="hljs-string">&#x27;消息提醒&#x27;</span>, <span class="hljs-string">&#x27;血压&#x27;</span>, <span class="hljs-string">&#x27;待机&#x27;</span>]<br>            &#125;,<br>            <span class="hljs-attr">yAxis</span>: &#123;&#125;,<br>            <span class="hljs-attr">series</span>: [<br>                &#123;<br>                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;M66&#x27;</span>,<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>                    <span class="hljs-attr">data</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">36</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>]<br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;N65&#x27;</span>,<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>                    <span class="hljs-attr">data</span>: [<span class="hljs-number">14</span>, <span class="hljs-number">20</span>, <span class="hljs-number">26</span>, <span class="hljs-number">10</span>, <span class="hljs-number">40</span>, <span class="hljs-number">5</span>]<br>                &#125;<br>            ]<br>        &#125;;<br><br>        <span class="hljs-comment">// 使用刚指定的配置项和数据显示图表。</span><br>        myChart.<span class="hljs-title function_">setOption</span>(option);<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-死数据-活数据"><a href="#4-死数据-活数据" class="headerlink" title="4. 死数据-&gt;活数据"></a>4. 死数据-&gt;活数据</h2><ol><li><p><code>前端.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-th-list&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 功耗对比图</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-right&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn_select_device_and_stage&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-xs navbar-right&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-search&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>查询</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;height:400px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br><br>&lt;!-- 柱状图js  --&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">initBar</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">/**</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     * 初始化柱状图</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">     */</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">initBar</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 基于准备好的dom，初始化echarts实例</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;main1&#x27;</span>));</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 指定图表的配置项和数据</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> option = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">title</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;功耗对比图&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 标题在图片上方居中</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">textAlign</span>: <span class="hljs-string">&quot;auto&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">left</span>: <span class="hljs-string">&quot;center&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">tooltip</span>: &#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">legend</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">data</span>: [],  <span class="hljs-comment">// 后台获取</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 设置按钮在图片下方</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">bottom</span>: <span class="hljs-number">0</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">xAxis</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">data</span>: [],  <span class="hljs-comment">// 后台获取</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">yAxis</span>: &#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">series</span>: [],  <span class="hljs-comment">// 后台获取</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        $.<span class="hljs-title function_">ajax</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;DOU_board/histogram&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;get&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 将后台返回的数据，更新到option中</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">status</span>)</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">if</span> (res.<span class="hljs-property">status</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">status</span>)</span></span><br><span class="language-javascript"><span class="language-xml">                    option.<span class="hljs-property">legend</span>.<span class="hljs-property">data</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">lagend_list</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                    option.<span class="hljs-property">xAxis</span>.<span class="hljs-property">data</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">xAxis_list</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                    option.<span class="hljs-property">series</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">series_list</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-comment">// 使用刚指定的配置项和数据显示图表</span></span></span><br><span class="language-javascript"><span class="language-xml">                    myChart.<span class="hljs-title function_">setOption</span>(option);</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p><code>前端.html</code>补充 - 初始化图片</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**初始化折线图line**/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initLinePic</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> lineBoard = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#lineBoard&#x27;</span>)<br>    <span class="hljs-keyword">const</span> myChart = echarts.<span class="hljs-title function_">init</span>(lineBoard)<br><br>    <span class="hljs-keyword">var</span> option = &#123;<br>        <span class="hljs-attr">title</span>: &#123;<br>            <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;待机天数图&#x27;</span>,<br>            <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;center&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">tooltip</span>: &#123;<br>            <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;axis&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">legend</span>: &#123;<br>            <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;典型&#x27;</span>, <span class="hljs-string">&#x27;重度&#x27;</span>, <span class="hljs-string">&#x27;长续航&#x27;</span>, <span class="hljs-string">&#x27;典型-AOD&#x27;</span>, <span class="hljs-string">&#x27;重度-AOD&#x27;</span>],<br>            <span class="hljs-attr">bottom</span>: <span class="hljs-number">0</span>,<br>        &#125;,<br>        <span class="hljs-attr">toolbox</span>: &#123;<br>            <span class="hljs-attr">feature</span>: &#123;<br>                <span class="hljs-attr">saveAsImage</span>: &#123;&#125;<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">xAxis</span>: &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>            <span class="hljs-attr">boundaryGap</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;ST1&#x27;</span>, <span class="hljs-string">&#x27;ST2&#x27;</span>, <span class="hljs-string">&#x27;ST3&#x27;</span>, <span class="hljs-string">&#x27;OTA1&#x27;</span>, <span class="hljs-string">&#x27;OTA2&#x27;</span>, <span class="hljs-string">&#x27;OTA3&#x27;</span>]<br>        &#125;,<br>        <span class="hljs-attr">yAxis</span>: &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">series</span>: [&#123;<br>    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;典型&#x27;</span>,<br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>    <span class="hljs-string">&#x27;stack&#x27;</span>: <span class="hljs-string">&#x27;Total&#x27;</span>,<br>    <span class="hljs-string">&#x27;data&#x27;</span>: [<span class="hljs-number">130</span>, <span class="hljs-number">132</span>, <span class="hljs-number">101</span>, <span class="hljs-number">134</span>, <span class="hljs-number">90</span>, <span class="hljs-number">230</span>]<br>&#125;,<br>&#123;<br>    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;重度&#x27;</span>,<br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>    <span class="hljs-string">&#x27;stack&#x27;</span>: <span class="hljs-string">&#x27;Total&#x27;</span>,<br>    <span class="hljs-string">&#x27;data&#x27;</span>: [<span class="hljs-number">220</span>, <span class="hljs-number">182</span>, <span class="hljs-number">191</span>, <span class="hljs-number">234</span>, <span class="hljs-number">290</span>, <span class="hljs-number">330</span>]<br>&#125;,<br>&#123;<br>    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;长续航&#x27;</span>,<br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>    <span class="hljs-string">&#x27;stack&#x27;</span>: <span class="hljs-string">&#x27;Total&#x27;</span>,<br>    <span class="hljs-string">&#x27;data&#x27;</span>: [<span class="hljs-number">150</span>, <span class="hljs-number">232</span>, <span class="hljs-number">201</span>, <span class="hljs-number">154</span>, <span class="hljs-number">190</span>, <span class="hljs-number">330</span>]<br>&#125;,<br>&#123;<br>    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;典型-AOD&#x27;</span>,<br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>    <span class="hljs-string">&#x27;stack&#x27;</span>: <span class="hljs-string">&#x27;Total&#x27;</span>,<br>    <span class="hljs-string">&#x27;data&#x27;</span>: [<span class="hljs-number">320</span>, <span class="hljs-number">332</span>, <span class="hljs-number">301</span>, <span class="hljs-number">334</span>, <span class="hljs-number">390</span>, <span class="hljs-number">330</span>]<br>&#125;,<br>&#123;<br>    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;重度-AOD&#x27;</span>,<br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>    <span class="hljs-string">&#x27;stack&#x27;</span>: <span class="hljs-string">&#x27;Total&#x27;</span>,<br>    <span class="hljs-string">&#x27;data&#x27;</span>: [<span class="hljs-number">820</span>, <span class="hljs-number">932</span>, <span class="hljs-number">901</span>, <span class="hljs-number">934</span>, <span class="hljs-number">1290</span>, <span class="hljs-number">1330</span>]<br>&#125;]<br>    &#125;;<br><br>    <span class="hljs-comment">// 使用刚指定的配置项和数据显示图表。</span><br>    myChart.<span class="hljs-title function_">setOption</span>(option);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>后端views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppc_DOU_board_histogram</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27; 构建柱状图的数据 &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 数据可以去数据库中获取</span><br>    lagend_list = [<span class="hljs-string">&#x27;M66&#x27;</span>, <span class="hljs-string">&#x27;N65&#x27;</span>]<br>    xAxis_list = [<span class="hljs-string">&#x27;抬腕亮屏&#x27;</span>, <span class="hljs-string">&#x27;ECG&#x27;</span>, <span class="hljs-string">&#x27;语音通话&#x27;</span>, <span class="hljs-string">&#x27;消息提醒&#x27;</span>, <span class="hljs-string">&#x27;血压&#x27;</span>, <span class="hljs-string">&#x27;待机&#x27;</span>, <span class="hljs-string">&#x27;短信&#x27;</span>]<br>    series_list = [<br>                        &#123;<br>                            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;M66&#x27;</span>,<br>                            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>                            <span class="hljs-string">&quot;data&quot;</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">36</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">15</span>]<br>                        &#125;,<br>                        &#123;<br>                            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;N65&#x27;</span>,<br>                            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>                            <span class="hljs-string">&quot;data&quot;</span>: [<span class="hljs-number">14</span>, <span class="hljs-number">20</span>, <span class="hljs-number">26</span>, <span class="hljs-number">10</span>, <span class="hljs-number">40</span>, <span class="hljs-number">15</span>, <span class="hljs-number">17</span>]<br>                        &#125;<br>                    ]<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27; 进行json序列化 &#x27;&#x27;&#x27;</span><br>    histogram_result = &#123;<br>        <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;lagend_list&quot;</span>: lagend_list,<br>            <span class="hljs-string">&quot;xAxis_list&quot;</span>: xAxis_list,<br>            <span class="hljs-string">&quot;series_list&quot;</span>: series_list,<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> JsonResponse(histogram_result)<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-常用组件"><a href="#5-常用组件" class="headerlink" title="5. 常用组件"></a>5. 常用组件</h2><ol><li><p>标题</p><div style="text-align:center"> <img src="/img/echarts_pic/5.jpg" alt="图片描述"></div></li><li><p>提示框</p><div style="text-align:center"> <img src="/img/echarts_pic/6.jpg" alt="图片描述"></div></li><li><p>图例</p><div style="text-align:center"> <img src="/img/echarts_pic/7.jpg" alt="图片描述"></div></li><li><p>工具栏</p><div style="text-align:center"> <img src="/img/echarts_pic/8.jpg" alt="图片描述"></div></li></ol><h1 id="三、其他交互"><a href="#三、其他交互" class="headerlink" title="三、其他交互"></a>三、其他交互</h1><h2 id="1-数据更新和数据集"><a href="#1-数据更新和数据集" class="headerlink" title="1. 数据更新和数据集"></a>1. 数据更新和数据集</h2><ol><li><p>数据更新</p><div style="text-align:center"> <img src="/img/echarts_pic/9.jpg" alt="图片描述"></div></li><li><p>数据集</p><div style="text-align:center"> <img src="/img/echarts_pic/10.jpg" alt="图片描述"></div></li><li><p>多种传输数据方式，减少数据解析</p><ol><li><p>数据集与图表的映射方式</p> <div style="text-align:center"> <img src="/img/echarts_pic/11.jpg" alt="图片描述"> </div></li><li><p>数据集行列映射</p> <div style="text-align:center"> <img src="/img/echarts_pic/12.jpg" alt="图片描述"> </div></li></ol></li></ol><h2 id="2-区域缩放与视觉映射"><a href="#2-区域缩放与视觉映射" class="headerlink" title="2. 区域缩放与视觉映射"></a>2. 区域缩放与视觉映射</h2><div style="text-align:center">    <img src="/img/echarts_pic/13.jpg" alt="图片描述"></div><ol><li>内置区域缩放<div style="text-align:center"> <img src="/img/echarts_pic/14.jpg" alt="图片描述"></div></li></ol><h2 id="3-为echarts添加事件（点击、双击等）"><a href="#3-为echarts添加事件（点击、双击等）" class="headerlink" title="3. 为echarts添加事件（点击、双击等）"></a>3. 为echarts添加事件（点击、双击等）</h2><div style="text-align:center">    <img src="/img/echarts_pic/15.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/echarts_pic/16.jpg" alt="图片描述"></div><div style="text-align:center">    <img src="/img/echarts_pic/17.jpg" alt="图片描述"></div><h2 id="4-修改主题颜色-light-dark"><a href="#4-修改主题颜色-light-dark" class="headerlink" title="4. 修改主题颜色 light-&gt;dark"></a>4. 修改主题颜色 light-&gt;dark</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myChart&#x27;</span>), <span class="hljs-string">&#x27;dark&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="5-修改图像颜色"><a href="#5-修改图像颜色" class="headerlink" title="5. 修改图像颜色 *"></a>5. 修改图像颜色 *</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">option = &#123;<br>    <span class="hljs-attr">color</span>: [<span class="hljs-string">&#x27;#3398DB&#x27;</span>,<span class="hljs-string">&#x27;#FFC000&#x27;</span>,<span class="hljs-string">&#x27;#FF6666&#x27;</span>,<span class="hljs-string">&#x27;#00CC99&#x27;</span>],<br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><div style="text-align:center">    <img src="/img/echarts_pic/18.jpg" alt="图片描述"></div><h2 id="6-设置标题与下方图像间距"><a href="#6-设置标题与下方图像间距" class="headerlink" title="6. 设置标题与下方图像间距"></a>6. 设置标题与下方图像间距</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">option = &#123;<br>    <span class="hljs-attr">title</span>: &#123;<br>        <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;项目雷达图&#x27;</span>,<br>        <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;center&#x27;</span>,<br>        <span class="hljs-attr">padding</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0</span>] <span class="hljs-comment">// 上、右、下、左的内边距</span><br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-柱状图在图像旁显示当前数值"><a href="#7-柱状图在图像旁显示当前数值" class="headerlink" title="7. 柱状图在图像旁显示当前数值"></a>7. 柱状图在图像旁显示当前数值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">series</span>: [<br>    &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>        <span class="hljs-attr">data</span>: [<span class="hljs-number">5.5</span>, <span class="hljs-number">6.0</span>, <span class="hljs-number">6.9</span>, <span class="hljs-number">7.2</span>, <span class="hljs-number">7.5</span>, <span class="hljs-number">8.7</span>, <span class="hljs-number">9</span>],<br>        <span class="hljs-attr">label</span>: &#123;<br>            <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;right&#x27;</span><br>        &#125;<br>    &#125;,<br>],<br></code></pre></td></tr></table></figure><h2 id="8-多条折线数据相同时展示的图形并没有重合"><a href="#8-多条折线数据相同时展示的图形并没有重合" class="headerlink" title="8. 多条折线数据相同时展示的图形并没有重合"></a>8. 多条折线数据相同时展示的图形并没有重合</h2><p>删除<code>stack</code>元素<br>参考：<a href="https://blog.csdn.net/JHXL_/">https://blog.csdn.net/JHXL_/</a></p><div style="text-align:center">    <img src="/img/echarts_pic/19.jpg" alt="图片描述"></div><h2 id="9-折线图缺少横坐标2数据时，数据1与数据3直接连接"><a href="#9-折线图缺少横坐标2数据时，数据1与数据3直接连接" class="headerlink" title="9. 折线图缺少横坐标2数据时，数据1与数据3直接连接"></a>9. 折线图缺少横坐标2数据时，数据1与数据3直接连接</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">option = &#123;<br>    <span class="hljs-attr">xAxis</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>        <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>]<br>    &#125;,<br>    <span class="hljs-attr">yAxis</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">series</span>: [&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>        <span class="hljs-attr">data</span>: [<span class="hljs-number">10</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">20</span>, <span class="hljs-number">15</span>, <span class="hljs-number">25</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">30</span>],<br>        <span class="hljs-attr">connectNulls</span>: <span class="hljs-literal">true</span><br>    &#125;]<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>在上面的代码中，<code>data</code> 数组中的第二个元素为 <code>null</code>，表示缺少横坐标2的数据</li><li>可以写为<code>null</code> 或 <code>&#39;null&#39;</code> 或 <code>&#39;-&#39;</code> 等等</li><li><code>connectNulls</code> 属性设置为 <code>true</code>，表示连接 <code>null</code> 的数据点</li></ul>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web开发</tag>
      
      <tag>前端</tag>
      
      <tag>前端看板库</tag>
      
      <tag>Echarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/22/hello-world/"/>
    <url>/2023/11/22/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Linux操作系统"><a href="#一、Linux操作系统" class="headerlink" title="一、Linux操作系统"></a>一、Linux操作系统</h2><h3 id="1-linux中关闭某个程序"><a href="#1-linux中关闭某个程序" class="headerlink" title="1. linux中关闭某个程序"></a>1. linux中关闭某个程序</h3><ol><li>查找程序的进程ID（PID）：ps au&#96;</li><li>使用<code>kill</code>命令关闭程序： <code>kill &lt;PID&gt;</code>    其中，<code>&lt;PID&gt;</code>是要关闭的程序的进程ID。</li></ol><h3 id="2-linux查找log关键字"><a href="#2-linux查找log关键字" class="headerlink" title="2. linux查找log关键字"></a>2. linux查找log关键字</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep &lt;keyword&gt; &lt;log-file&gt;<br></code></pre></td></tr></table></figure><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep error /var/log/syslog<br></code></pre></td></tr></table></figure><p>查找多个关键字，使用-e：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep -e error -e warning /var/log/syslog<br></code></pre></td></tr></table></figure><p>忽略大小写，使用-i：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep -i error /var/log/syslog<br></code></pre></td></tr></table></figure><h3 id="3-如何回滚git代码"><a href="#3-如何回滚git代码" class="headerlink" title="3. 如何回滚git代码"></a>3. 如何回滚git代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">用新的提交回滚某次提交的内容.新增commit</span><br>git revert commitId<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">回滚到上一次提交</span><br>git reset --hard HEAD<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">回滚到指定提交</span><br>git reset --hard commitId<br></code></pre></td></tr></table></figure><h3 id="4-查看本机8080端口访问情况"><a href="#4-查看本机8080端口访问情况" class="headerlink" title="4. 查看本机8080端口访问情况"></a>4. 查看本机8080端口访问情况</h3><p> <code>sudo lsof -i :8080 </code></p><h3 id="5-查看网络连接状态netstat"><a href="#5-查看网络连接状态netstat" class="headerlink" title="5. 查看网络连接状态netstat"></a>5. 查看网络连接状态netstat</h3><ul><li>状态包括以下几种：</li></ul><p>ESTABLISHED：表示连接已经建立。</p><p>TIME_WAIT：表示等待一段时间以确保远程主机已经收到确认包。</p><p>CLOSE_WAIT：表示等待本地应用程序关闭连接。</p><p>LISTEN：表示等待连接请求。</p><ul><li>命令后面可以接不同的参数:</li></ul><p>-a：显示所有连接，包括正在监听的连接。 </p><p>-n：以数字形式显示地址和端口号，而不是以名称形式显示。 </p><p>-p：显示与连接关联的进程 ID 和进程名称。 </p><h3 id="6-查看进程的资源占用情况top"><a href="#6-查看进程的资源占用情况top" class="headerlink" title="6. 查看进程的资源占用情况top"></a>6. 查看进程的资源占用情况<code>top</code></h3><h2 id="二、MySQL相关"><a href="#二、MySQL相关" class="headerlink" title="二、MySQL相关"></a>二、MySQL相关</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询成绩第三高同学的姓名<br>SELECT name FROM students ORDER BY score DESC LIMIT 1 OFFSET 2;<br><br># 成绩排名前五的同学的姓名<br>select name from scores order by score desc limit 5;<br><br># 获取数学，语文得分都大于80分的，学生两科平均得分<br>select (math_score + chinese_score) / 2 from scores where math_score &gt; 80 and chinese_score &gt; 80;<br><br># 标签只有姓名，科目，分数三列<br># 统计语数外三门成绩，超过270的学生姓名<br>select name,sum(score) as sumScore from scoreTable group by name having sumScore &gt; 270;<br>select name from scoreTable group by name having sum(score) &gt; 270;<br></code></pre></td></tr></table></figure><h2 id="三、代码理论"><a href="#三、代码理论" class="headerlink" title="三、代码理论"></a>三、代码理论</h2><h3 id="1-list和tuple的异同"><a href="#1-list和tuple的异同" class="headerlink" title="1. list和tuple的异同"></a>1. list和tuple的异同</h3><ol><li>不同点</li></ol><ul><li><p>“list”是可变的，也就是说，可以在创建后随时添加、删除或修改其中的元素。列表使用方括号来创建，例如：<code>my_list = [1, 2, 3, 4, 5]</code>。 </p></li><li><p>”tuple”是不可变的，一旦创建后就不能再添加、删除或修改其中的元素。元组使用圆括号来创建，例如：<code>my_tuple = (1, 2, 3, 4, 5)</code>。更加轻量级，占用更少的内存</p></li></ul><ol start="2"><li>相同点</li></ol><ul><li>都可以通过索引进行查询</li></ul><h3 id="2-cookie和session的区别"><a href="#2-cookie和session的区别" class="headerlink" title="2. cookie和session的区别"></a>2. cookie和session的区别</h3><p>Cookie和Session都是Web开发中常用的技术，用于在客户端和服务器之间传递数据。它们的主要区别在于： </p><ol><li>存储位置：Cookie存储在客户端浏览器中，而Session存储在服务器端。 </li><li>安全性：Cookie的安全性较低，因为它们存储在客户端，可以被篡改或窃取。而Session存储在服务器端，相对来说更加安全。 </li><li>存储容量：Cookie的存储容量较小，一般只能存储几KB的数据。而Session的存储容量较大，可以存储几MB的数据。 </li><li>生命周期：Cookie可以设置过期时间，可以在客户端保存一段时间。而Session的生命周期由服务器控制，一般在用户关闭浏览器或一段时间不活动后会自动过期。 </li><li>使用场景：Cookie适合存储一些简单的用户信息，如用户名、密码等。而Session适合存储一些复杂的数据，如购物车信息、用户登录状态等。 总的来说，Cookie和Session都有各自的优缺点，需要根据具体的需求来选择使用哪种技术。</li></ol><h3 id="3-get请求和post请求的区别"><a href="#3-get请求和post请求的区别" class="headerlink" title="3. get请求和post请求的区别"></a>3. get请求和post请求的区别</h3><p>GET和POST是HTTP协议中常用的两种请求方法，它们的主要区别在于： </p><ol><li>参数传递方式：GET请求通过URL传递参数，而POST请求通过请求体传递参数。 </li><li>安全性：GET请求的参数会被包含在URL中，因此不太安全，容易被拦截和篡改。而POST请求的参数在请求体中，相对来说更加安全。 </li><li>缓存：GET请求可以被浏览器缓存，因此可以提高页面加载速度。而POST请求不能被缓存。</li><li>数据长度：GET请求的数据长度有限制，一般不能超过2KB。而POST请求的数据长度没有限制。 </li><li>使用场景：GET请求适合用于获取数据，如查询、搜索等。而POST请求适合用于提交数据，如表单提交、文件上传等。 总的来说，GET和POST请求各有优缺点，需要根据具体的需求来选择使用哪种请求方法。</li></ol><h3 id="4-django中常用的包"><a href="#4-django中常用的包" class="headerlink" title="4. django中常用的包"></a>4. django中常用的包</h3><p>Django是一个功能强大的Web框架，它提供了许多常用的包和模块，包括但不限于以下几个： </p><ol><li>django-admin：Django的命令行工具，用于创建项目、应用、运行开发服务器等。 </li><li>django.db：Django的数据库模块，提供了ORM（对象关系映射）功能，可以方便地操作数据库。</li><li>django.urls：Django的URL路由模块，用于将URL映射到视图函数。 </li><li>django.template：Django的模板引擎模块，用于生成HTML页面。</li><li>django.forms：Django的表单模块，用于生成HTML表单，并进行表单验证。 </li><li>django.contrib.auth：Django的认证模块，提供了用户认证、权限管理等功能。 </li><li>django.middleware：Django的中间件模块，用于在请求和响应之间进行处理，如身份验证、缓存等。</li><li>django.test：Django的测试模块，用于编写和运行测试用例。 </li><li>django.utils：Django的工具模块，提供了各种常用的工具函数和类。 以上是Django中常用的一些包和模块，还有很多其他的包和模块，可以根据具体的需求进行选择和使用。</li></ol><h3 id="5-break、continue和pass的区别"><a href="#5-break、continue和pass的区别" class="headerlink" title="5. break、continue和pass的区别"></a>5. break、continue和pass的区别</h3><ol><li>break：用来终止循环语句，跳出整个循环。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;Hello&#x27;</span>:<br>    <span class="hljs-keyword">if</span> letter == <span class="hljs-string">&#x27;l&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;当前字母 :&#x27;</span>, letter<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">当前字母 : <span class="hljs-type">H</span><br>当前字母 : <span class="hljs-type">e</span><br></code></pre></td></tr></table></figure><ol start="2"><li>continue；跳出本次循环，然后继续进行下一轮循环。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;Hello&#x27;</span>:  <br>    <span class="hljs-keyword">if</span> letter == <span class="hljs-string">&#x27;l&#x27;</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;当前字母 :&#x27;</span>, letter<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">当前字母 : <span class="hljs-type">H</span><br>当前字母 : <span class="hljs-type">e</span><br>当前字母 : <span class="hljs-type">o</span><br></code></pre></td></tr></table></figure><ol start="3"><li>pass：不做任何事情，一般用做占位语句，为了保持程序结构的完整性</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;Hello&#x27;</span>:<br>    <span class="hljs-keyword">if</span> letter == <span class="hljs-string">&#x27;l&#x27;</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;当前字母 :&#x27;</span>, letter<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">当前字母 : <span class="hljs-type">H</span><br>当前字母 : <span class="hljs-type">e</span><br>当前字母 : <span class="hljs-type">l</span><br>当前字母 : <span class="hljs-type">l</span><br>当前字母 : <span class="hljs-type">o</span><br></code></pre></td></tr></table></figure><h3 id="6-字典排序"><a href="#6-字典排序" class="headerlink" title="6. 字典排序"></a>6. 字典排序</h3><ul><li>字典进行排序后，会变为列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">24</span>, <span class="hljs-string">&#x27;g&#x27;</span>:<span class="hljs-number">52</span>, <span class="hljs-string">&#x27;i&#x27;</span>:<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;k&#x27;</span>:<span class="hljs-number">33</span>&#125;<br>dict1 = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">dict</span>.items(), key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(dict1, <span class="hljs-built_in">type</span>(dict1))          <span class="hljs-comment"># [(&#x27;i&#x27;, 12), (&#x27;a&#x27;, 24), (&#x27;k&#x27;, 33), (&#x27;g&#x27;, 52)] &lt;class &#x27;list&#x27;&gt;</span><br>dict2 = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">dict</span>.items(), key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(dict2, <span class="hljs-built_in">type</span>(dict2))          <span class="hljs-comment"># [(&#x27;g&#x27;, 52), (&#x27;k&#x27;, 33), (&#x27;a&#x27;, 24), (&#x27;i&#x27;, 12)] &lt;class &#x27;list&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-列表排序"><a href="#7-列表排序" class="headerlink" title="7. 列表排序"></a>7. 列表排序</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">list1 = [&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">20</span>&#125;,&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">30</span>&#125;,&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">25</span>&#125;]<br>list2 = <span class="hljs-built_in">sorted</span>(list1, key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-string">&#x27;age&#x27;</span>], reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(list2, <span class="hljs-built_in">type</span>(list2))   <span class="hljs-comment"># [&#123;&#x27;name&#x27;: &#x27;b&#x27;, &#x27;age&#x27;: 30&#125;, &#123;&#x27;name&#x27;: &#x27;c&#x27;, &#x27;age&#x27;: 25&#125;, &#123;&#x27;name&#x27;: &#x27;a&#x27;, &#x27;age&#x27;: 20&#125;] &lt;class &#x27;list&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-反转字符串"><a href="#8-反转字符串" class="headerlink" title="8. 反转字符串"></a>8. 反转字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;hello&#x27;</span><br>a1 = a[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(a1)<br></code></pre></td></tr></table></figure><h3 id="9-json形式转为dict形式"><a href="#9-json形式转为dict形式" class="headerlink" title="9. json形式转为dict形式"></a>9. json形式转为dict形式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br>json_str = <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;city&quot;: &quot;New York&quot;&#125;&#x27;</span><br>dict_obj = json.loads(json_str)<br><br><span class="hljs-built_in">print</span>(dict_obj)   // &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;city&#x27;</span>: <span class="hljs-string">&#x27;New York&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-python递归的最大层数"><a href="#10-python递归的最大层数" class="headerlink" title="10. python递归的最大层数"></a>10. python递归的最大层数</h3><p>最大数是998</p><h3 id="11-打乱一个排好序的list对象alist"><a href="#11-打乱一个排好序的list对象alist" class="headerlink" title="11. 打乱一个排好序的list对象alist"></a>11. 打乱一个排好序的list对象alist</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> radom<br>radom.shuffle(alist)<br></code></pre></td></tr></table></figure><h3 id="12-列表推导式与生成器表达式"><a href="#12-列表推导式与生成器表达式" class="headerlink" title="12. 列表推导式与生成器表达式"></a>12. 列表推导式与生成器表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一个表达式使用了列表推导式，它会立即生成一个包含所有元素的列表并将其存储在内存中</span><br><span class="hljs-built_in">print</span>([i % <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)])  <span class="hljs-comment"># [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------&#x27;</span>)<br><span class="hljs-comment"># 而第二个表达式使用了生成器表达式，它只会在需要时逐个生成元素，不会一次性生成所有元素并存储在内存中。</span><br><span class="hljs-built_in">print</span>((i % <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)))  <span class="hljs-comment"># &lt;generator object &lt;genexpr&gt; at 0x7fb1109c5bd0&gt;</span><br></code></pre></td></tr></table></figure><h3 id="13-读取文件"><a href="#13-读取文件" class="headerlink" title="13.  读取文件"></a>13.  读取文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    contents = f.read()<br>    <span class="hljs-built_in">print</span>(contents)<br></code></pre></td></tr></table></figure><p> <code>with</code> 是 Python 中用于处理文件的上下文管理器，可以自动管理文件的打开和关闭，避免了手动打开和关闭文件时可能出现的错误。 </p><p><code>open(&#39;file.txt&#39;, &#39;r&#39;)</code> 是打开文件的函数，其中 <code>&#39;file.txt&#39;</code> 是文件的路径，<code>&#39;r&#39;</code> 表示以只读模式打开文件。如果需要写入文件，可以使用 <code>&#39;w&#39;</code> 模式。</p><p>  <code>as f</code> 是将打开的文件对象赋值给变量 <code>f</code>，这样就可以通过 <code>f</code> 来操作文件了。</p><h3 id="14-字典排序"><a href="#14-字典排序" class="headerlink" title="14. 字典排序"></a>14. 字典排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">24</span>, <span class="hljs-string">&#x27;g&#x27;</span>: <span class="hljs-number">52</span>, <span class="hljs-string">&#x27;i&#x27;</span>: <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;k&#x27;</span>: <span class="hljs-number">33</span>&#125;<br>dict1 = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">dict</span>.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(dict1, <span class="hljs-built_in">type</span>(dict1))<br><br>dict_rule = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;i&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;g&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;k&#x27;</span>: <span class="hljs-number">4</span>&#125;<br>dict2 = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">dict</span>.items(), key=<span class="hljs-keyword">lambda</span> x: dict_rule[x[<span class="hljs-number">0</span>]])<br><span class="hljs-built_in">print</span>(dict2)<br></code></pre></td></tr></table></figure><h3 id="15-TCP-IP协议"><a href="#15-TCP-IP协议" class="headerlink" title="15. TCP&#x2F;IP协议"></a>15. TCP&#x2F;IP协议</h3><p>全称是传输控制协议&#x2F;因特网协议（Transmission Control Protocol&#x2F;Internet Protocol）。它是互联网上最常用的协议之一，用于在网络中传输数据。TCP负责数据的可靠传输，而IP则负责数据的路由和寻址。</p><p>分为：应用层&#x2F;传输层&#x2F;网络层&#x2F;数链路层</p><h3 id="16-三次握手和四次挥手"><a href="#16-三次握手和四次挥手" class="headerlink" title="16. 三次握手和四次挥手"></a>16. 三次握手和四次挥手</h3><p>三次握手是在建立TCP连接时进行的，它只在建立连接时进行一次。在TCP连接建立之后，通信双方就可以进行数据传输，不需要再进行握手。当然，在TCP连接断开时，也会进行四次握手来终止连接。</p><p><a href="https://blog.csdn.net/m0_38106923/article/details/108292454?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171099879716800180650478%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171099879716800180650478&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-108292454-null-null.142">https://blog.csdn.net/m0_38106923&#x2F;article&#x2F;details&#x2F;108292454?</a></p><h3 id="17-django-和-flask的区别"><a href="#17-django-和-flask的区别" class="headerlink" title="17. django 和 flask的区别"></a>17. django 和 flask的区别</h3><ol><li>复杂度：Django是一个全功能的Web框架，提供了许多内置的功能和库，如ORM、模板引擎、表单处理、认证等等。因此，Django相对于Flask来说更加复杂，适合于大型应用程序。Flask则是一个轻量级的框架，提供了基本的功能，但是可以通过插件和扩展来扩展其功能。</li><li>灵活性：Flask比Django更加灵活，因为它没有强制性的目录结构和组织方式。Flask允许开发人员自由选择他们的应用程序的结构和组织方式。Django则有一个固定的目录结构和组织方式，这使得它更加规范化和易于维护。 </li><li>性能：由于Django提供了许多内置的功能和库，因此它的性能可能会受到影响。Flask则是一个轻量级的框架，因此它的性能可能会更好。</li></ol><h3 id="18-hexo底层原理"><a href="#18-hexo底层原理" class="headerlink" title="18. hexo底层原理"></a>18. hexo底层原理</h3><p>Hexo是一个基于Node.js的静态博客生成器，其底层原理可以简单概括为以下几个步骤：</p><ol><li><p>解析Markdown文件：Hexo通过解析Markdown文件来生成博客文章的内容，包括标题、正文、标签、分类等信息。 </p></li><li><p>渲染模板：Hexo使用EJS模板引擎来渲染博客文章的模板，将Markdown文件中的内容和主题模板文件结合起来生成HTML文件。 </p></li><li><p>生成静态文件：Hexo将渲染后的HTML文件和主题文件一起生成静态文件，包括HTML、CSS、JavaScript等文件。</p></li><li><p>部署博客：Hexo支持将生成的静态文件部署到不同的平台，如GitHub Pages、Netlify等。 总的来说，Hexo的底层原理就是将Markdown文件解析成HTML文件，并使用模板引擎将HTML文件和主题文件结合起来生成静态文件，最后将静态文件部署到指定的平台上。这种静态网站生成的方式具有简单、快速、安全等优点，适合于个人博客、技术文档等场景。</p></li></ol><h3 id="19-set的原理"><a href="#19-set的原理" class="headerlink" title="19. set的原理"></a>19. set的原理</h3><p><code>set</code> 的底层原理是基于哈希表实现的。 </p><p>哈希表是一种数据结构，它通过将每个元素映射到一个唯一的索引位置来实现快速的查找和插入操作。在 Python 中，哈希表被实现为一个散列表，其中每个元素都被存储在一个桶中，桶的索引位置是通过元素的哈希值计算得到的。</p><p> 当我们向 <code>set</code> 中添加一个元素时，Python 会首先计算该元素的哈希值，然后将其插入到哈希表中对应的桶中。如果该元素已经存在于 <code>set</code> 中，则不会进行任何操作。</p><h3 id="20-进程和线程的区别是什么"><a href="#20-进程和线程的区别是什么" class="headerlink" title="20. 进程和线程的区别是什么"></a>20. 进程和线程的区别是什么</h3><p>进程是操作系统中的一个执行单元，每个进程都是独立的，它们之间不能直接共享数据</p><p>进程是操作系统中的一个执行单元，每个进程都是独立的，它们之间不能直接共享数据</p><h3 id="21-接口和抽象类的区别"><a href="#21-接口和抽象类的区别" class="headerlink" title="21. 接口和抽象类的区别"></a>21. 接口和抽象类的区别</h3><ul><li>抽象类更适合用于表示一些具有共性的类，而接口更适合用于定义一些通用的行为或能力。</li></ul><ol><li>实现方式不同 抽象类是一个类，它可以包含抽象方法和非抽象方法，抽象方法是没有实现的方法，需要子类去实现。抽象类不能被实例化，只能被继承。 接口是一个纯粹的规范，它只包含抽象方法和常量，没有非抽象方法。接口不能被实例化，只能被实现。 </li><li>继承限制不同 一个类只能继承一个抽象类，但是一个类可以实现多个接口。 </li><li>实现方式不同 子类继承抽象类时，必须实现所有的抽象方法，否则子类也必须声明为抽象类。 子类实现接口时，必须实现接口中的所有方法，否则子类必须声明为抽象类。 </li><li>抽象类表示一种“is-a”的关系，即子类是父类的一种特殊类型。 接口表示一种“has-a”的关系，即一个类具有某种能力或行为。</li></ol><h3 id="22-列表和链表的异同点"><a href="#22-列表和链表的异同点" class="headerlink" title="22. 列表和链表的异同点"></a>22. 列表和链表的异同点</h3><ul><li>相同点： <ul><li>都可以存储一系列元素 </li><li>都可以进行元素的添加、删除、查找等操作。</li></ul></li><li>不同点：<ul><li>列表是一种顺序存储的数据结构，元素在内存中是连续存储的，可以通过下标直接访问元素。而链表是一种链式存储的数据结构，元素在内存中不一定是连续存储的，每个元素都包含一个指向下一个元素的指针，需要通过遍历链表才能访问元素。</li><li>列表的插入和删除操作比较耗时，因为需要移动元素。而链表的插入和删除操作比较快，只需要修改指针即可。 </li><li>列表的访问操作比较快，可以通过下标直接访问元素。而链表的访问操作比较慢，需要遍历链表才能访问元素。</li><li>列表的空间利用率比较高，因为元素在内存中是连续存储的，不会浪费空间。而链表的空间利用率比较低，因为每个元素都需要额外的指针来指向下一个元素，会浪费一定的空间</li></ul></li></ul><h2 id="四、编程"><a href="#四、编程" class="headerlink" title="四、编程"></a>四、编程</h2><h3 id="1-查找文章中出现次数最多的单词"><a href="#1-查找文章中出现次数最多的单词" class="headerlink" title="1. 查找文章中出现次数最多的单词"></a>1. 查找文章中出现次数最多的单词</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br>letter = <span class="hljs-string">&quot;i like ai qi yi ai ai&quot;</span><br><br>letter_split = letter.split(<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>(letter_split)  <span class="hljs-comment"># [&#x27;i&#x27;, &#x27;like&#x27;, &#x27;ai&#x27;, &#x27;qi&#x27;, &#x27;yi&#x27;, &#x27;ai&#x27;, &#x27;ai&#x27;]</span><br>letter_count = Counter(letter_split)<br><span class="hljs-built_in">print</span>(letter_count)  <span class="hljs-comment"># Counter(&#123;&#x27;ai&#x27;: 3, &#x27;i&#x27;: 1, &#x27;like&#x27;: 1, &#x27;qi&#x27;: 1, &#x27;yi&#x27;: 1&#125;)</span><br><br>max_count = <span class="hljs-number">0</span><br>max_name = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> k, j <span class="hljs-keyword">in</span> letter_count.items():<br>    <span class="hljs-keyword">if</span> j &gt; max_count:<br>        max_count = j<br>        max_name = k<br><span class="hljs-built_in">print</span>(max_name)   <span class="hljs-comment"># ai</span><br></code></pre></td></tr></table></figure><h3 id="2-不包含重复字符的最长子串"><a href="#2-不包含重复字符的最长子串" class="headerlink" title="2. 不包含重复字符的最长子串"></a>2. 不包含重复字符的最长子串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">longest_substring</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment"># 记录每个字符最后一次出现的位置</span><br>    char_map = &#123;&#125;<br>    max_len = start = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 两个指针 `left` 和 `right`，分别指向子串的左右边界</span><br>    left = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> right <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;char_map&#x27;</span>, char_map)<br>        <span class="hljs-comment"># 如果当前字符已经在哈希表中出现过，并且其位置在左指针和右指针之间，则更新左指针的位置为该字符的下一个位置。</span><br>        <span class="hljs-keyword">if</span> s[right] <span class="hljs-keyword">in</span> char_map <span class="hljs-keyword">and</span> char_map[s[right]] &gt;= left:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ww&#x27;</span>, char_map[s[right]])<br>            left = char_map[s[right]] + <span class="hljs-number">1</span><br>        char_map[s[right]] = right<br>        <span class="hljs-comment"># 计算当前子串的长度，并更新最长子串的长度和起始位置。</span><br>        cur_len = right - left + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> cur_len &gt; max_len:<br>            max_len = cur_len<br>            start = left<br>    <span class="hljs-built_in">print</span>(s[start:start+max_len])<br>    <span class="hljs-keyword">return</span> s[start:start+max_len]<br><br>longest_substring(<span class="hljs-string">&#x27;abcabcbb&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-写一个多进程"><a href="#3-写一个多进程" class="headerlink" title="3. 写一个多进程"></a>3. 写一个多进程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建线程方式一：继承Thread类，重写run()方法，调用start开启线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test07</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">// 线程入口点</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// run方法线程体</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在听课&quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// main线程主线程</span><br>        <span class="hljs-comment">// 创建一个线程对象</span><br>        <span class="hljs-type">test07</span> <span class="hljs-variable">test07</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">test07</span>();<br><br>        <span class="hljs-comment">// 调用start()方法开启线程</span><br>        test07.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我在学习多线程&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-写一个最大回文子串"><a href="#4-写一个最大回文子串" class="headerlink" title="4. 写一个最大回文子串"></a>4. 写一个最大回文子串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">match</span>(<span class="hljs-params">s</span>):<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(s[i])<br>        <span class="hljs-keyword">if</span> s[i] == s[i + <span class="hljs-number">1</span>]:  <span class="hljs-comment"># 奇数长度</span><br>            first = i<br>            end = i + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> first &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> end &lt; <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">and</span> s[first] == s[end]:<br>                <span class="hljs-comment"># 满足条件就向两边扩展</span><br>                first -= <span class="hljs-number">1</span><br>                end += <span class="hljs-number">1</span><br>            res = <span class="hljs-built_in">max</span>(res, end - first - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> s[i - <span class="hljs-number">1</span>] == s[i + <span class="hljs-number">1</span>]:  <span class="hljs-comment"># 偶数长度</span><br>            first = i - <span class="hljs-number">1</span><br>            end = i + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> first &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> end &lt; <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">and</span> s[first] == s[end]:<br>                first -= <span class="hljs-number">1</span><br>                end += <span class="hljs-number">1</span><br>            res = <span class="hljs-built_in">max</span>(res, end - first - <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># print(res)</span><br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;csabba&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="5-列表中子串和的最大值"><a href="#5-列表中子串和的最大值" class="headerlink" title="5. 列表中子串和的最大值"></a>5. 列表中子串和的最大值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,-<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,-<span class="hljs-number">3</span>,-<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,-<span class="hljs-number">3</span>,-<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,-<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,-<span class="hljs-number">6</span>,<span class="hljs-number">3</span>]<br>dp = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(nums)<br>dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)):<br>    dp[i] = <span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>]+nums[i], nums[i])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(dp))<br></code></pre></td></tr></table></figure><h3 id="6-扑克牌判断是否为同花顺"><a href="#6-扑克牌判断是否为同花顺" class="headerlink" title="6. 扑克牌判断是否为同花顺"></a>6. 扑克牌判断是否为同花顺</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 判断花色</span><br>cards = [<span class="hljs-string">&#x27;3B&#x27;</span>,<span class="hljs-string">&#x27;2B&#x27;</span>,<span class="hljs-string">&#x27;1B&#x27;</span>,<span class="hljs-string">&#x27;4B&#x27;</span>,<span class="hljs-string">&#x27;5B&#x27;</span>]<br><br>suits = [card[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> card <span class="hljs-keyword">in</span> cards]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;suits&#x27;</span>, suits)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(suits))==<span class="hljs-number">1</span>:<br>    <span class="hljs-comment"># 判断点数</span><br>    score = [card[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> card <span class="hljs-keyword">in</span> cards]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;score&#x27;</span>, score)<br>    <br>    <span class="hljs-comment"># 排序</span><br>    score_sorted = <span class="hljs-built_in">sorted</span>(score)<br>    <span class="hljs-built_in">print</span>(score_sorted)<br><br>    <span class="hljs-comment"># 判断连续</span><br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(score_sorted)-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(score_sorted[i])+<span class="hljs-number">1</span> == <span class="hljs-built_in">int</span>(score_sorted[i+<span class="hljs-number">1</span>]):<br>            count += <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 判断是否同花顺</span><br><span class="hljs-built_in">print</span>(count)            <br><span class="hljs-keyword">if</span> count == <span class="hljs-number">4</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是一个同花顺&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这不是同花顺&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="7-数组中只出现一次的字符"><a href="#7-数组中只出现一次的字符" class="headerlink" title="7. 数组中只出现一次的字符 *"></a>7. 数组中只出现一次的字符 *</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">table = &#123;&#125;<br>nums = [<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">in</span> table:<br><span class="hljs-keyword">del</span> table[num]<br><span class="hljs-keyword">else</span>:<br>table[num] = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = [<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>nums_sort = <span class="hljs-built_in">sorted</span>(nums)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums_sort)):<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> nums_sort[i] != nums_sort[i+<span class="hljs-number">1</span>]:<br>            <span class="hljs-built_in">print</span>(nums_sort[i])<br><br>    <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(nums_sort)-<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> nums_sort[i] != nums_sort[i-<span class="hljs-number">1</span>]:<br>            <span class="hljs-built_in">print</span>(nums_sort[i])<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt; i &lt; <span class="hljs-built_in">len</span>(nums_sort)-<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> nums_sort[i] != nums_sort[i-<span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> nums_sort[i] != nums_sort[i+<span class="hljs-number">1</span>]:<br>            <span class="hljs-built_in">print</span>(nums_sort[i])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br>nums = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,-<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,-<span class="hljs-number">3</span>,-<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,-<span class="hljs-number">3</span>,-<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,-<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,-<span class="hljs-number">6</span>,<span class="hljs-number">3</span>]<br>b = Counter(nums)<br>b_dict = <span class="hljs-built_in">dict</span>(b)<br><span class="hljs-built_in">print</span>(b_dict)<br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> b_dict.items():<br>    <span class="hljs-built_in">print</span>(i,j)<br></code></pre></td></tr></table></figure><h3 id="8-对打乱顺序的单词进行分组"><a href="#8-对打乱顺序的单词进行分组" class="headerlink" title="8. 对打乱顺序的单词进行分组"></a>8. 对打乱顺序的单词进行分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">words = [<span class="hljs-string">&#x27;eat&#x27;</span>, <span class="hljs-string">&#x27;tae&#x27;</span>, <span class="hljs-string">&#x27;ate&#x27;</span>, <span class="hljs-string">&#x27;loop&#x27;</span>, <span class="hljs-string">&#x27;cta&#x27;</span>, <span class="hljs-string">&#x27;lpoo&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>]<br>anagrams = &#123;&#125;<br><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>    <span class="hljs-comment"># 对单词的字母进行排序后，重新组合形成新的字符串</span><br>    sorted_word = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">sorted</span>(word))<br>    <span class="hljs-keyword">if</span> sorted_word <span class="hljs-keyword">in</span> anagrams:<br>        anagrams[sorted_word].append(word)<br>    <span class="hljs-keyword">else</span>:<br>        anagrams[sorted_word] = [word]<br><br>result = []<br><span class="hljs-keyword">for</span> group <span class="hljs-keyword">in</span> anagrams.values():<br>    result.append(<span class="hljs-built_in">sorted</span>(group))<br><span class="hljs-built_in">print</span>(result)    <span class="hljs-comment"># [[&#x27;ate&#x27;, &#x27;eat&#x27;, &#x27;tae&#x27;], [&#x27;loop&#x27;, &#x27;lpoo&#x27;], [&#x27;cat&#x27;, &#x27;cta&#x27;]]</span><br></code></pre></td></tr></table></figure><h2 id="五、天马行空"><a href="#五、天马行空" class="headerlink" title="五、天马行空"></a>五、天马行空</h2><h3 id="13-有什么方法判断地球是圆的"><a href="#13-有什么方法判断地球是圆的" class="headerlink" title="13. 有什么方法判断地球是圆的"></a>13. 有什么方法判断地球是圆的</h3><ol><li>航海：当船只从海平面上远离时，观察到的地平线会逐渐下降，这是因为地球的曲率使得地平线向下弯曲。如果地球是平的，那么地平线应该始终保持在同一高度。</li><li>日食和月食：当地球在太阳和月亮之间时，会发生日食和月食。这些现象只有在地球是球形的情况下才能发生。</li><li>重力：地球的重力场是球对称的，这意味着地球的质量分布是球对称的，因此地球是球形的。</li></ol><h3 id="14-一根不均匀的香完全烧完需要10分钟，你有一个打火机，请确定2-5分钟"><a href="#14-一根不均匀的香完全烧完需要10分钟，你有一个打火机，请确定2-5分钟" class="headerlink" title="14.  一根不均匀的香完全烧完需要10分钟，你有一个打火机，请确定2.5分钟"></a>14.  一根不均匀的香完全烧完需要10分钟，你有一个打火机，请确定2.5分钟</h3><ol><li>将香分成四个相等的部分，每个部分的长度为香的总长度的1&#x2F;4。 </li><li>点燃香的一端，并在2.5分钟后将其熄灭。</li><li>记录此时香的燃烧长度。 </li><li>如果香的燃烧长度是香的总长度的1&#x2F;4，那么说明2.5分钟已经过去了。</li></ol><p>解释：由于香是不均匀的，所以它的燃烧速度也是不均匀的。将香分成四个相等的部分后，每个部分的长度相同，所以它们的燃烧时间也应该相同。因此，在2.5分钟后，香的燃烧长度应该是香的总长度的1&#x2F;4。</p>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语言</tag>
      
      <tag>Python</tag>
      
      <tag>Git</tag>
      
      <tag>Jenkins</tag>
      
      <tag>Java</tag>
      
      <tag>Linux</tag>
      
      <tag>测试</tag>
      
      <tag>库</tag>
      
      <tag>插件</tag>
      
      <tag>Cas</tag>
      
      <tag>API</tag>
      
      <tag>Appium</tag>
      
      <tag>Scrapy</tag>
      
      <tag>C</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>做道小题</title>
    <link href="/2023/11/20/%E5%81%9A%E9%81%93%E5%B0%8F%E9%A2%98/"/>
    <url>/2023/11/20/%E5%81%9A%E9%81%93%E5%B0%8F%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Easy"><a href="#1-Easy" class="headerlink" title="1. Easy"></a>1. Easy</h2><h3 id="1-字符串最后一个单词的长度"><a href="#1-字符串最后一个单词的长度" class="headerlink" title="1. 字符串最后一个单词的长度"></a>1. 字符串最后一个单词的长度</h3><div style="text-align:center">    <img src="/img/do_exercise_pic/2.png" alt="图片描述" style="zoom:40%"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-built_in">input</span>().split(<span class="hljs-string">&#x27; &#x27;</span>)[-<span class="hljs-number">1</span>]<br>s_len = <span class="hljs-built_in">len</span>(s)<br><span class="hljs-built_in">print</span>(s_len)<br></code></pre></td></tr></table></figure><h3 id="2-计算某字符出现次数"><a href="#2-计算某字符出现次数" class="headerlink" title="2. 计算某字符出现次数"></a>2. 计算某字符出现次数</h3><div style="text-align:center">    <img src="/img/do_exercise_pic/3.png" alt="图片描述" style="zoom:40%"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> re <span class="hljs-keyword">import</span> search<br>s1 = <span class="hljs-built_in">input</span>().lower()<br>s2 = <span class="hljs-built_in">input</span>().lower()<br><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> singo_s1 <span class="hljs-keyword">in</span> s1:<br>    <span class="hljs-keyword">if</span> singo_s1 == s2:<br>        i += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h3 id="3-明明的随机数"><a href="#3-明明的随机数" class="headerlink" title="3. 明明的随机数"></a>3. 明明的随机数</h3><div style="text-align:center">    <img src="/img/do_exercise_pic/4.png" alt="图片描述" style="zoom:40%"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">input_n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>input_list = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(input_n):<br>    input1 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-comment"># print(&#x27;input1&#x27;, input1)</span><br>    input_list.append(input1)<br><br>input_list_clean = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(input_list))<br>input_list_clean.sort()<br><br><span class="hljs-keyword">for</span> singo_i <span class="hljs-keyword">in</span> input_list_clean:<br>    <span class="hljs-built_in">print</span>(singo_i)<br></code></pre></td></tr></table></figure><h3 id="4-字符串分隔"><a href="#4-字符串分隔" class="headerlink" title="4. 字符串分隔"></a>4. 字符串分隔</h3><div style="text-align:center">    <img src="/img/do_exercise_pic/5.png" alt="图片描述" style="zoom:40%"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s)%<span class="hljs-number">8</span> != <span class="hljs-number">0</span>:<br>    s = s + <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">8</span>-<span class="hljs-built_in">len</span>(s)%<span class="hljs-number">8</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s),<span class="hljs-number">8</span>):<br>    <span class="hljs-built_in">print</span>(s[i:i+<span class="hljs-number">8</span>])<br></code></pre></td></tr></table></figure><h3 id="5-进制转换"><a href="#5-进制转换" class="headerlink" title="5. 进制转换"></a>5. 进制转换</h3><div style="text-align:center">    <img src="/img/do_exercise_pic/6.png" alt="图片描述" style="zoom:40%"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(n,<span class="hljs-number">16</span>))<br></code></pre></td></tr></table></figure><h3 id="6-质数因子"><a href="#6-质数因子" class="headerlink" title="6. 质数因子"></a>6. 质数因子</h3><div style="text-align:center">    <img src="/img/do_exercise_pic/7.png" alt="图片描述" style="zoom:40%"></div><ul><li>利用长除法进行计算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())   <span class="hljs-comment"># 要分解的数</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">int</span>(num**<span class="hljs-number">0.5</span>)+<span class="hljs-number">1</span>):<br><span class="hljs-keyword">while</span> num%i==<span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># //计算为整除，/计算会出现小数</span><br>num = num // i<br><span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-keyword">if</span> num == <span class="hljs-number">1</span>:<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">2</span>:<br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><h3 id="7-取近似值"><a href="#7-取近似值" class="headerlink" title="7. 取近似值"></a>7. 取近似值</h3><div style="text-align:center">    <img src="/img/do_exercise_pic/8.png" alt="图片描述" style="zoom:40%"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>())<br>a_int = a // <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> a-a_int&gt;=<span class="hljs-number">0.5</span>:<br>    a = <span class="hljs-built_in">int</span>(a_int + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    a = a_int<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><h3 id="8-合并表记录"><a href="#8-合并表记录" class="headerlink" title="8. 合并表记录"></a>8. 合并表记录</h3><div style="text-align:center">    <img src="/img/do_exercise_pic/9.png" alt="图片描述" style="zoom:40%"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">round</span> = <span class="hljs-built_in">input</span>()<br>nums_dict = &#123;&#125;<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>)):<br>    nums = <span class="hljs-built_in">input</span>()<br>    k, v = nums.split(<span class="hljs-string">&#x27; &#x27;</span>)<br>    k = <span class="hljs-built_in">int</span>(k)<br>    v = <span class="hljs-built_in">int</span>(v)<br>    <span class="hljs-keyword">if</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> nums_dict:<br>        nums_dict[k] = v<br>    <span class="hljs-keyword">else</span>:<br>        nums_dict[k] += v<br><span class="hljs-comment"># print(nums_dict)</span><br>nums_dict_sort = <span class="hljs-built_in">sorted</span>(nums_dict.items())<br><span class="hljs-comment"># print(nums_dict_sort)</span><br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> nums_dict_sort:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(k) + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">str</span>(v))<br></code></pre></td></tr></table></figure><h3 id="9-提取不重复的整数"><a href="#9-提取不重复的整数" class="headerlink" title="9. 提取不重复的整数"></a>9. 提取不重复的整数</h3><div style="text-align:center">    <img src="/img/do_exercise_pic/10.png" alt="图片描述" style="zoom:40%"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">li = <span class="hljs-built_in">input</span>()<br>li_str = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># 字符串倒序</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> li[：：-<span class="hljs-number">1</span>]:<br>    <span class="hljs-comment"># print(li[i])</span><br>    <span class="hljs-keyword">if</span> li[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> li_str:<br>        li_str += li[i]<br><br><span class="hljs-built_in">print</span>(li_str)<br></code></pre></td></tr></table></figure><h3 id="10-求int类型正整数在内存中存储时1的个数"><a href="#10-求int类型正整数在内存中存储时1的个数" class="headerlink" title="10. 求int类型正整数在内存中存储时1的个数 *"></a>10. 求int类型正整数在内存中存储时1的个数 *</h3><div style="text-align:center">    <img src="/img/do_exercise_pic/11.png" alt="图片描述" style="zoom:40%"></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(n).count(<span class="hljs-string">&#x27;1&#x27;</span>))<br></code></pre></td></tr></table></figure><ul><li>知识点<ul><li><code>bin()</code> 将数据转为二进制类型</li><li><code>.count(&quot;元素&quot;)</code>  统计字符串中元素的个数</li></ul></li></ul><h3 id="11-统计列表中出现一次的数"><a href="#11-统计列表中出现一次的数" class="headerlink" title="11. 统计列表中出现一次的数"></a>11. 统计列表中出现一次的数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = [<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]<br>num_dict = &#123;&#125;<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>    <span class="hljs-keyword">if</span> num <span class="hljs-keyword">in</span> num_dict:<br>        num_dict[num] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        num_dict[num] = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(num_dict)<br><br>result = []<br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> num_dict.items():<br>    <span class="hljs-keyword">if</span> v == <span class="hljs-number">1</span>:<br>        result.append(k)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="13-字母异位词文组"><a href="#13-字母异位词文组" class="headerlink" title="13. 字母异位词文组"></a>13. 字母异位词文组</h3><p><a href="https://leetcode.cn/problems/group-anagrams/description/?envType=study-plan-v2&envId=top-100-liked">https://leetcode.cn/problems/group-anagrams/description/?</a></p><ul><li><p>需求：将一个字符串数组，重新排列源单词的所有字母得到一个新单词，返回结果列表</p><ul><li>输入：<code>strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</code></li><li>输出：<code>[[&#39;eat&#39;, &#39;tea&#39;, &#39;ate&#39;], [&#39;tan&#39;, &#39;nat&#39;], [&#39;bat&#39;]]</code></li></ul></li><li><p>思路：</p><ul><li>将数组中的每一个字符串，根据单词顺序进行排列</li></ul></li><li><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">strs = [<span class="hljs-string">&quot;eat&quot;</span>, <span class="hljs-string">&quot;tea&quot;</span>, <span class="hljs-string">&quot;tan&quot;</span>, <span class="hljs-string">&quot;ate&quot;</span>, <span class="hljs-string">&quot;nat&quot;</span>, <span class="hljs-string">&quot;bat&quot;</span>]<br>dic = &#123;&#125;<br><span class="hljs-keyword">for</span> one_str <span class="hljs-keyword">in</span> strs:<br>    one_str_clean =<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">sorted</span>(one_str))<br><br>    <span class="hljs-keyword">if</span> one_str_clean <span class="hljs-keyword">in</span> dic:<br>        dic[one_str_clean].append(one_str)<br>    <span class="hljs-keyword">else</span>:<br>        dic[one_str_clean] = [one_str]<br>            <br><span class="hljs-built_in">print</span>(dic)       <span class="hljs-comment"># &#123;&#x27;aet&#x27;: [&#x27;eat&#x27;, &#x27;tea&#x27;, &#x27;ate&#x27;], &#x27;ant&#x27;: [&#x27;tan&#x27;, &#x27;nat&#x27;], &#x27;abt&#x27;: [&#x27;bat&#x27;]&#125;</span><br>result = [v <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> dic.items()]<br><span class="hljs-built_in">print</span>(result)    <span class="hljs-comment"># [[&#x27;eat&#x27;, &#x27;tea&#x27;, &#x27;ate&#x27;], [&#x27;tan&#x27;, &#x27;nat&#x27;], [&#x27;bat&#x27;]]</span><br></code></pre></td></tr></table></figure><h2 id="2-Leetcode"><a href="#2-Leetcode" class="headerlink" title="2. Leetcode"></a>2. Leetcode</h2><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h3><ul><li><p>链接：<a href="https://www.bilibili.com/video/BV1AN4y137uT/?p=4&vd_source=4cf7b60c223a665538a4d958765c91a5">https://www.bilibili.com/video/BV1AN4y137uT/?</a></p></li><li><p>关键词：【简单】【字典创建查询】</p></li><li><p>需求：查找数组<code>nums</code>中，和为目标值<code>target</code>的那两个整数，并返回他们的数组下标</p><ul><li>输入：<code>nums = [2,7,11,15], target = 9</code></li><li>输出：<code>[0,1]</code></li><li>解析：因为<code>nums[0]+nums[1]==9,返回[0,1]</code></li></ul></li><li><p>思路：</p><ul><li>将数组通过<code>enumerate()</code>，转为哈希表</li><li>查找第二个元素，并要求其索引值大于第一个元素的索引值（防止取重复数据）</li></ul></li><li><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">dic = &#123;&#125;<br>nums = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>]<br>target = <span class="hljs-number">9</span><br><span class="hljs-built_in">sum</span> = []<br><span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>    dic[v] = i<br><span class="hljs-built_in">print</span>(dic)    <span class="hljs-comment"># &#123;2: 0, 7: 1, 11: 2, 15: 3&#125;</span><br><br><span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>    <span class="hljs-keyword">if</span> target-v <span class="hljs-keyword">in</span> dic <span class="hljs-keyword">and</span> i&lt;dic[target-v]:<br>        <span class="hljs-built_in">print</span>([i, dic[target-v]])        <span class="hljs-comment"># [0, 1]</span><br></code></pre></td></tr></table></figure><h3 id="2-两链表数字相加"><a href="#2-两链表数字相加" class="headerlink" title="2. 两链表数字相加 *"></a>2. 两链表数字相加 *</h3><ul><li>链接：<a href="https://leetcode.cn/problems/add-two-numbers/">https://leetcode.cn/problems/add-two-numbers/</a></li><li>关键词：【中等】【链表crud】</li><li>需求：两个非空的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的。将两个数相加，并以相同形式返回一个表示和的链表。<ul><li>输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]</li><li>输出：[7,0,8]</li><li>解释：342 + 465 &#x3D; 807</li></ul></li><li>思路：<ul><li>python实现链表的构造</li><li>读取链表中的数据转为int类型进行计算</li><li>对于结果再次转为链表类型</li></ul></li><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, item</span>):<br>        self.item = item<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_linkList_head</span>(<span class="hljs-params">li</span>):<br>    head = Node(li[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> li[<span class="hljs-number">1</span>:]:<br>        node = Node(element)<br>        node.<span class="hljs-built_in">next</span> = head<br>        head = node<br>    <span class="hljs-keyword">return</span> head<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_int_linkList</span>(<span class="hljs-params">lk</span>):<br>    lk_str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">while</span> lk:<br>        <span class="hljs-built_in">print</span>(lk.item, end=<span class="hljs-string">&#x27;,&#x27;</span>)<br>        lk_str += <span class="hljs-built_in">str</span>(lk.item)<br>        lk = lk.<span class="hljs-built_in">next</span><br>    lk_int = <span class="hljs-built_in">int</span>(lk_str)<br>    <span class="hljs-built_in">print</span>(lk_int)<br>    <span class="hljs-keyword">return</span> lk_int<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_linkList_tail</span>(<span class="hljs-params">sum_num</span>):<br>    head = Node(sum_num[<span class="hljs-number">0</span>])<br>    tail = head<br>    <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> sum_num[<span class="hljs-number">1</span>:]:<br>        node = Node(element)<br>        tail.<span class="hljs-built_in">next</span> = node<br>        tail = node<br>    <span class="hljs-built_in">print</span>(head)<br>    <span class="hljs-keyword">return</span> head<br><br>num1 = get_linkList_head([<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>])<br>num2 = get_linkList_head([<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>])<br>num1_int = print_int_linkList(num1)<br>num2_int = print_int_linkList(num2)<br>sum_num = <span class="hljs-built_in">str</span>(num1_int + num2_int)<br>get_linkList_tail(sum_num)<br></code></pre></td></tr></table></figure><h3 id="3-无重复的最长子串"><a href="#3-无重复的最长子串" class="headerlink" title="3. 无重复的最长子串 *"></a>3. 无重复的最长子串 *</h3><ul><li><p>链接：<a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/">https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/</a></p></li><li><p>关键词：【中等】【字典变更】【列表增删】</p></li><li><p>需求：给定一个字符串 <code>s</code> ，找出其中不含有重复字符的最长子串的长度。</p><ul><li>输入: s &#x3D; “abcabcbb”</li><li>输出: 3</li><li>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3</li></ul></li><li><p>方法1：</p><ul><li><p>思路：</p><ul><li>循环字符串，将每个字符添加到新的列表中</li><li><mark>如果列表中已存在新的字符，循环删除列表的第一个元素，直到不存在新元素</mark></li></ul></li><li><p>代码：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;abcabcbb&#x27;</span><br>max_len = <span class="hljs-number">0</span><br>arr = []<br>max_list = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">while</span> i <span class="hljs-keyword">in</span> arr:<br>        <span class="hljs-comment"># 删除列表中的第一个元素，后续元素自动补齐</span><br>        arr.pop(<span class="hljs-number">0</span>)<br><br>    arr.append(i)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) &gt; max_len:<br>        max_len = <span class="hljs-built_in">len</span>(arr)<br>        max_list = <span class="hljs-string">&#x27;&#x27;</span>.join(arr)<br><br><span class="hljs-built_in">print</span>(max_len)    <span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(max_list)   <span class="hljs-comment"># abc</span><br></code></pre></td></tr></table></figure></li><li><p>方法2：</p><ul><li><p>思路：</p><ul><li>利用滑动窗口法</li><li>建立左右两个指针，遍历字符串</li><li>将第一次出现的字符，以及其的索引，记录在字典中</li></ul></li><li><p>代码：</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;abcabcbb&quot;</span><br>s_dict = &#123;&#125;<br>max_len = right = left = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> right <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    <span class="hljs-keyword">if</span> s[right] <span class="hljs-keyword">in</span> s_dict <span class="hljs-keyword">and</span> s_dict[s[right]] &gt;= left:<br>        left = s_dict[s[right]] + <span class="hljs-number">1</span><br>        s_dict[s[right]] = right<br>        str_len = right - left + <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;$$&#x27;</span>, right, s[right], s_dict, str_len)<br>    <span class="hljs-keyword">else</span>:<br>        s_dict[s[right]] = right<br>        str_len = right - left + <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;@@&#x27;</span>, right, s[right], s_dict, str_len)<br>    max_len = <span class="hljs-built_in">max</span>(max_len, str_len)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;max_len&#x27;</span>, max_len)<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gams">@@ <span class="hljs-number">0</span> a &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">0</span>&#125; <span class="hljs-number">1</span><br>@@ <span class="hljs-number">1</span> b &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>&#125; <span class="hljs-number">2</span><br>@@ <span class="hljs-number">2</span> c &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">2</span>&#125; <span class="hljs-number">3</span><br><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span> <span class="hljs-number">3</span> a &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">2</span>&#125; <span class="hljs-number">3</span><br><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span> <span class="hljs-number">4</span> b &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">2</span>&#125; <span class="hljs-number">3</span><br><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span> <span class="hljs-number">5</span> c &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>&#125; <span class="hljs-number">3</span><br><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span> <span class="hljs-number">6</span> b &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>&#125; <span class="hljs-number">2</span><br><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span> <span class="hljs-number">7</span> b &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">5</span>&#125; <span class="hljs-number">1</span><br>max_len <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a>4. 寻找两个正序数组的中位数</h3><ul><li>链接：<a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/description/">https://leetcode.cn/problems/median-of-two-sorted-arrays/description/</a></li><li>关键词：【困难】【列表合并】【数字计算】</li><li>需求：给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。找出这两个正序数组的 <strong>中位数</strong> <ul><li>输入：nums1 &#x3D; [1,2], nums2 &#x3D; [3,4]</li><li>输出：2.5</li><li>解释：合并数组 &#x3D; [1,2,3,4] ，中位数 (2 + 3) &#x2F; 2 &#x3D; 2.5</li></ul></li><li>思路：<ul><li>将两个列表进行合并，并更新顺序</li><li>寻找中位数的索引</li></ul></li><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">nums1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>nums2 = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>num3 = <span class="hljs-built_in">sorted</span>(nums1+nums2)<br><br><span class="hljs-comment"># 判断列表的奇偶性</span><br>num_kind = <span class="hljs-built_in">len</span>(num3) % <span class="hljs-number">2</span><br><span class="hljs-comment"># 取列表的中间索引</span><br>num_middle = <span class="hljs-built_in">len</span>(num3) // <span class="hljs-number">2</span><br><br><span class="hljs-keyword">if</span> num_kind == <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(num3[num_middle])<br><span class="hljs-keyword">else</span>:<br>    avg = (<span class="hljs-built_in">float</span>(num3[num_middle]) + <span class="hljs-built_in">float</span>(num3[num_middle-<span class="hljs-number">1</span>]))/<span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(avg)<br></code></pre></td></tr></table></figure><h3 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串 *"></a>5. 最长回文子串 *</h3><ul><li>链接：<a href="https://leetcode.cn/problems/longest-palindromic-substring/">https://leetcode.cn/problems/longest-palindromic-substring/</a></li><li>关键词：【中等】</li><li>需求：一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。如果字符串的反序与原始字符串相同，则该字符串称为回文字符串<ul><li>输入：csabba</li><li>输出：abba</li></ul></li><li>思路：<ul><li>创建左右两个指针，如果索引内容相同，继续向外扩</li></ul></li><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;csabba&#x27;</span><br>res = right = left = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> s[i] == s[i + <span class="hljs-number">1</span>]:  <span class="hljs-comment"># 偶数长度</span><br>        left = i<br>        right = i + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> right &lt; <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">and</span> s[left] == s[right]:<br>            <span class="hljs-comment"># 满足条件就向两边扩展</span><br>            left -= <span class="hljs-number">1</span><br>            right += <span class="hljs-number">1</span><br>        res = <span class="hljs-built_in">max</span>(res, right - left - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">if</span> s[i - <span class="hljs-number">1</span>] == s[i + <span class="hljs-number">1</span>]:  <span class="hljs-comment"># 奇数长度</span><br>        left = i - <span class="hljs-number">1</span><br>        right = i + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> right &lt; <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">and</span> s[left] == s[right]:<br>            left -= <span class="hljs-number">1</span><br>            right += <span class="hljs-number">1</span><br>        res = <span class="hljs-built_in">max</span>(res, right - left - <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-built_in">print</span>(s[left+<span class="hljs-number">1</span>:right])<br></code></pre></td></tr></table></figure><h3 id="6-Z字形变化"><a href="#6-Z字形变化" class="headerlink" title="6. Z字形变化"></a>6. Z字形变化</h3><ul><li><p>链接：<a href="https://leetcode.cn/problems/zigzag-conversion/description/">https://leetcode.cn/problems/zigzag-conversion/description/</a></p></li><li><p>关键词：【中等】</p></li><li><p>需求：将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 Z 字形排列。之后，你的输出需要从左往右逐行读取，产生出一个新的字符串。</p><ul><li><p>输入：s &#x3D; “PAYPALISHIRING”, numRows &#x3D; 4</p></li><li><p>输出：”PINALSIGYAHRPI”</p></li><li><p>解释：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">P</span>     <span class="hljs-selector-tag">I</span>     N<br><span class="hljs-selector-tag">A</span>   L S   <span class="hljs-selector-tag">I</span> G<br>Y <span class="hljs-selector-tag">A</span>   H R<br><span class="hljs-selector-tag">P</span>     <span class="hljs-selector-tag">I</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>思路：</p><ul><li><p>将Z字符进行拆解为最小单元，以上述示例为例，最小单元为下图</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">P</span>     <br><span class="hljs-selector-tag">A</span>   L <br>Y <span class="hljs-selector-tag">A</span>   <br><span class="hljs-selector-tag">P</span> <br></code></pre></td></tr></table></figure></li><li><p>建立符合Z字符长度的列表，用于存储Z字符每一行的字符串</p></li><li><p>循环字符串，根据索引和最小单元的余，填入列表中</p></li></ul></li><li><p>代码：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;PAYPALISHIRING&quot;</span><br>numRows = <span class="hljs-number">4</span><br>n = <span class="hljs-number">2</span>*numRows -<span class="hljs-number">2</span><br><span class="hljs-comment"># 建立符合Z字符长度的列表，用于存储Z字符每一行的字符串</span><br>res = [<span class="hljs-string">&quot;&quot;</span>] * numRows<br><span class="hljs-keyword">for</span> i,char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>    x = i%n<br>    res[<span class="hljs-built_in">min</span>(x,n-x)]+=char<br>    <span class="hljs-built_in">print</span>(res)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(res))<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;YA&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;AL&#x27;</span>, <span class="hljs-string">&#x27;YA&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;PI&#x27;</span>, <span class="hljs-string">&#x27;AL&#x27;</span>, <span class="hljs-string">&#x27;YA&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;PI&#x27;</span>, <span class="hljs-string">&#x27;ALS&#x27;</span>, <span class="hljs-string">&#x27;YA&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;PI&#x27;</span>, <span class="hljs-string">&#x27;ALS&#x27;</span>, <span class="hljs-string">&#x27;YAH&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;PI&#x27;</span>, <span class="hljs-string">&#x27;ALS&#x27;</span>, <span class="hljs-string">&#x27;YAH&#x27;</span>, <span class="hljs-string">&#x27;PI&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;PI&#x27;</span>, <span class="hljs-string">&#x27;ALS&#x27;</span>, <span class="hljs-string">&#x27;YAHR&#x27;</span>, <span class="hljs-string">&#x27;PI&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;PI&#x27;</span>, <span class="hljs-string">&#x27;ALSI&#x27;</span>, <span class="hljs-string">&#x27;YAHR&#x27;</span>, <span class="hljs-string">&#x27;PI&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;PIN&#x27;</span>, <span class="hljs-string">&#x27;ALSI&#x27;</span>, <span class="hljs-string">&#x27;YAHR&#x27;</span>, <span class="hljs-string">&#x27;PI&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;PIN&#x27;</span>, <span class="hljs-string">&#x27;ALSIG&#x27;</span>, <span class="hljs-string">&#x27;YAHR&#x27;</span>, <span class="hljs-string">&#x27;PI&#x27;</span>]</span><br>PINALSIGYAHRPI<br></code></pre></td></tr></table></figure><h3 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="7. 整数反转"></a>7. 整数反转</h3><ul><li>链接：<a href="https://leetcode.cn/problems/reverse-integer/description/">https://leetcode.cn/problems/reverse-integer/description/</a></li><li>关键词：【中等】</li><li>需求：返回将 <code>x</code> 中的数字部分反转后的结果<ul><li>输入1：x &#x3D; 123</li><li>输出1：321</li><li>输入2：x &#x3D; -123</li><li>输出2：-321</li></ul></li><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">x=-<span class="hljs-number">123</span><br><span class="hljs-keyword">if</span> x&gt;<span class="hljs-number">0</span>:<br>    x_str = <span class="hljs-built_in">str</span>(x)<br>    x_change = x_str[::-<span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">print</span>(x_change)<br><span class="hljs-keyword">if</span> x&lt;<span class="hljs-number">0</span>:<br>    x_str = <span class="hljs-built_in">str</span>(x)<br>    x_change = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;-&quot;</span>+x_str[:-<span class="hljs-built_in">len</span>(x_str):-<span class="hljs-number">1</span>])<br>    <span class="hljs-built_in">print</span>(x_change, <span class="hljs-built_in">type</span>(x_change))<br><span class="hljs-keyword">if</span> x == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="3-Leetcode-SQL"><a href="#3-Leetcode-SQL" class="headerlink" title="3. Leetcode SQL"></a>3. Leetcode SQL</h2><ul><li>刷题链接：<a href="https://leetcode.cn/studyplan/sql-free-50/">https://leetcode.cn/studyplan/sql-free-50/</a></li></ul><h3 id="1-寻找用户推荐人"><a href="#1-寻找用户推荐人" class="headerlink" title="1. 寻找用户推荐人"></a>1. 寻找用户推荐人</h3><ul><li>链接：<a href="https://leetcode.cn/problems/find-customer-referee/description/?envType=study-plan-v2&envId=sql-free-50">https://leetcode.cn/problems/find-customer-referee/description/?envType=study-plan-v2&envId=sql-free-50</a></li><li>关键词：【简单】</li><li>注：<mark>数据库为空需要用<code>is null</code>进行判断</mark></li><li>需求：找出那些 <strong>没有被</strong> <code>id = 2</code> 的客户 <strong>推荐</strong> 的客户的姓名。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">输入： <br>Customer 表:<br>+----+------+------------+<br>| id | name | referee_id |<br>+----+------+------------+<br>| 1  | Will | null       |<br>| 2  | Jane | null       |<br>| 3  | Alex | 2          |<br>| 4  | Bill | null       |<br>| 5  | Zack | 1          |<br>| 6  | Mark | 2          |<br>+----+------+------------+<br>输出：<br>+------+<br>| name |<br>+------+<br>| Will |<br>| Jane |<br>| Bill |<br>| Zack |<br>+------+<br></code></pre></td></tr></table></figure><ul><li>代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select name from Customer where referee_id != 2 or referee_id is NULL;<br></code></pre></td></tr></table></figure><h3 id="2-文章浏览"><a href="#2-文章浏览" class="headerlink" title="2. 文章浏览"></a>2. 文章浏览</h3><ul><li>链接：<a href="https://leetcode.cn/problems/article-views-i/description/?envType=study-plan-v2&envId=sql-free-50">https://leetcode.cn/problems/article-views-i/description/?envType=study-plan-v2&envId=sql-free-50</a></li><li>关键词：【简单】</li><li>注：<mark><code>distinct</code>用于清除重复元素</mark></li><li>需求：查询出所有author_id和viewer_id相同的作者，结果按照 <code>id</code> 升序排列。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">输入：<br>Views 表：<br>+------------+-----------+-----------+------------+<br>| article_id | author_id | viewer_id | view_date  |<br>+------------+-----------+-----------+------------+<br>| 1          | 3         | 5         | 2019-08-01 |<br>| 1          | 3         | 6         | 2019-08-02 |<br>| 2          | 7         | 7         | 2019-08-01 |<br>| 2          | 7         | 6         | 2019-08-02 |<br>| 4          | 7         | 1         | 2019-07-22 |<br>| 3          | 4         | 4         | 2019-07-21 |<br>| 3          | 4         | 4         | 2019-07-21 |<br>+------------+-----------+-----------+------------+<br><br>输出：<br>+------+<br>| id   |<br>+------+<br>| 4    |<br>| 7    |<br>+------+<br></code></pre></td></tr></table></figure><ul><li>代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select distinct author_id as id from Views where author_id = viewer_id order by id;<br></code></pre></td></tr></table></figure><h3 id="3-无效推文"><a href="#3-无效推文" class="headerlink" title="3. 无效推文"></a>3. 无效推文</h3><ul><li>链接：<a href="https://leetcode.cn/problems/invalid-tweets/description/?envType=study-plan-v2&envId=sql-free-50">https://leetcode.cn/problems/invalid-tweets/description/?envType=study-plan-v2&envId=sql-free-50</a></li><li>关键词：【简单】</li><li>注：<mark><code>length()</code>判断数据库中，元素的长度</mark></li><li>需求：查询所有无效推文的编号（ID）。当推文内容中的字符数<strong>大于</strong> <code>15</code> 时，该推文是无效的。以<strong>任意顺序</strong>返回结果表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">Tweets 表：<br>+----------+----------------------------------+<br>| tweet_id | content                          |<br>+----------+----------------------------------+<br>| 1        | Vote for Biden                   |<br>| 2        | Let us make America great again! |<br>+----------+----------------------------------+<br><br>输出：<br>+----------+<br>| tweet_id |<br>+----------+<br>| 2        |<br>+----------+<br>解释：<br>推文 1 的长度 length = 14。该推文是有效的。<br>推文 2 的长度 length = 32。该推文是无效的。<br></code></pre></td></tr></table></figure><ul><li>代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select tweet_id from Tweets where length(content)&gt;15;<br></code></pre></td></tr></table></figure><h3 id="4-使用唯一标识码替换员工ID"><a href="#4-使用唯一标识码替换员工ID" class="headerlink" title="4. 使用唯一标识码替换员工ID"></a>4. 使用唯一标识码替换员工ID</h3><ul><li>链接：<a href="https://leetcode.cn/problems/replace-employee-id-with-the-unique-identifier/description/?envType=study-plan-v2&envId=sql-free-50">https://leetcode.cn/problems/replace-employee-id-with-the-unique-identifier/description/?envType=study-plan-v2&envId=sql-free-50</a></li><li>关键词：【简单】</li><li>注：</li><li>需求：展示每位用户的 <strong>唯一标识码（unique ID ）</strong>；如果某位员工没有唯一标识码，使用 null 填充即可。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs mysql">输入：<br>Employees 表:<br>+----+----------+<br>| id | name     |<br>+----+----------+<br>| 1  | Alice    |<br>| 7  | Bob      |<br>| 11 | Meir     |<br>| 90 | Winston  |<br>| 3  | Jonathan |<br>+----+----------+<br>EmployeeUNI 表:<br>+----+-----------+<br>| id | unique_id |<br>+----+-----------+<br>| 3  | 1         |<br>| 11 | 2         |<br>| 90 | 3         |<br>+----+-----------+<br>输出：<br>+-----------+----------+<br>| unique_id | name     |<br>+-----------+----------+<br>| null      | Alice    |<br>| null      | Bob      |<br>| 2         | Meir     |<br>| 3         | Winston  |<br>| 1         | Jonathan |<br>+-----------+----------+<br>解释：<br>Alice and Bob 没有唯一标识码, 因此我们使用 null 替代。<br>Meir 的唯一标识码是 2 。<br>Winston 的唯一标识码是 3 。<br>Jonathan 唯一标识码是 1 <br></code></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select EmployeeUNI.unique_id, Employees.name from Employees left join EmployeeUNI on EmployeeUNI.id = Employees.id;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>硬件测试-可穿戴设备-小米篇</title>
    <link href="/2023/11/20/%E7%A1%AC%E4%BB%B6%E6%B5%8B%E8%AF%95-%E5%8F%AF%E7%A9%BF%E6%88%B4%E8%AE%BE%E5%A4%87-%E5%B0%8F%E7%B1%B3%E7%AF%87/"/>
    <url>/2023/11/20/%E7%A1%AC%E4%BB%B6%E6%B5%8B%E8%AF%95-%E5%8F%AF%E7%A9%BF%E6%88%B4%E8%AE%BE%E5%A4%87-%E5%B0%8F%E7%B1%B3%E7%AF%87/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
      <tag>个人规划</tag>
      
      <tag>功耗</tag>
      
      <tag>性能</tag>
      
      <tag>压力</tag>
      
      <tag>续航</tag>
      
      <tag>充电</tag>
      
      <tag>抬腕亮屏</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
